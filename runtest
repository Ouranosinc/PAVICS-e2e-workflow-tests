#!/bin/sh

NOTEBOOKS="$1"
if [ -z "$NOTEBOOKS" ]; then
    NOTEBOOKS="notebooks/*.ipynb"
fi

set -x

if [ -n "$FORCE_PAVICS_HOST" ]; then
    # jenkins work-around for envinject incompatibility with pipeline
    echo "FORCE_PAVICS_HOST='$FORCE_PAVICS_HOST'"
    echo "Overriding PAVICS_HOST with value from FORCE_PAVICS_HOST"
    PAVICS_HOST="$FORCE_PAVICS_HOST"
fi

if [ ! -z "$PAVICS_HOST" ]; then
    echo "Will run notebooks against $PAVICS_HOST"
    # .ncml links will always comes from the production server, not the server
    # under test since we do not perform regex replace for .ncml links.
    sed -i "/\.ncml/!s/pavics.ouranos.ca/$PAVICS_HOST/g" $NOTEBOOKS
    git diff  # not working for notebooks from other repos
fi

# suppress "InsecureRequestWarning: Unverified HTTPS request is being made"
# so tests still pass when user want to disable ssl cert verification
export PYTHONWARNINGS="ignore:Unverified HTTPS request"

# --nbval-lax do not check notebook cell output.  Add '# NBVAL_CHECK_OUTPUT' to
# cells that require output check.
#
# xarray html dataset output breaks cell output check.  Also prevent harmless
# changes like field ordering in output, external service version change,
# timestamp/uuid change to break the run.
#
# So for some very important notebook cells, have to remember to activate
# '# NBVAL_CHECK_OUTPUT' to properly ensure the notebooks are working correctly.
py.test --nbval-lax $NOTEBOOKS --sanitize-with notebooks/output-sanitize.cfg
EXIT_CODE="$?"

# lowercase SAVE_RESULTING_NOTEBOOK string
SAVE_RESULTING_NOTEBOOK="`echo "$SAVE_RESULTING_NOTEBOOK" | tr '[:upper:]' '[:lower:]'`"


# save notebooks resulting from the run
# this might not be the same as what py.test have seen since it's another run

# user can manually diff the original with the resulting notebooks this way:
# nbdiff original.ipynb resulting.ipynb.output.ipynb (conda install nbdime)

# work-around as nbval can not save the result of the run
# see https://github.com/computationalmodelling/nbval/issues/112

if [ x"$SAVE_RESULTING_NOTEBOOK" = xtrue ]; then
    mkdir -p buildout
    for nb in $NOTEBOOKS; do
        filename="`basename "$nb"`"
        filename="`echo "$filename" | sed "s/.ipynb$//"`"  # remove .ipynb ext
        if [ -e "buildout/${filename}.output.ipynb" ]; then
            # prevent name clash
            filename="${filename}_`date '+%s'`"
        fi
        jupyter nbconvert --to notebook --execute \
            --ExecutePreprocessor.timeout=60 --allow-errors \
            --output-dir buildout --output "${filename}.output.ipynb" "$nb"
    done
fi

# exit with return code from py.test
exit $EXIT_CODE
