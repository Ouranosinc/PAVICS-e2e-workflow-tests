Started by user Long Vu
Replayed #246
 > git rev-parse --is-inside-work-tree # timeout=10
Setting origin to https://github.com/Ouranosinc/PAVICS-e2e-workflow-tests.git
 > git config remote.origin.url https://github.com/Ouranosinc/PAVICS-e2e-workflow-tests.git # timeout=10
Fetching origin...
Fetching upstream changes from origin
 > git --version # timeout=10
 > git config --get remote.origin.url # timeout=10
 > git fetch --tags --progress -- origin +refs/heads/*:refs/remotes/origin/* # timeout=10
Seen branch in repository origin/current-production-version
Seen branch in repository origin/devel-new-extensions
Seen branch in repository origin/extended_tests
Seen branch in repository origin/master
Seen branch in repository origin/new-docker-build
Seen branch in repository origin/test-dockerhub-build
Seen branch in repository origin/twitcher_perf_test_notebook
Seen 7 remote branches
Obtained Jenkinsfile from daaa4896c7358eff3a7bd6434617b4af06c89e42
Running in Durability level: MAX_SURVIVABILITY
[Pipeline] Start of Pipeline
[Pipeline] node
Running on linux1 in /home/jenkins/agent/workspace/_workflow-tests_new-docker-build@3
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
No credentials specified
Fetching changes from the remote Git repository
Fetching without tags
 > git rev-parse --is-inside-work-tree # timeout=10
 > git config remote.origin.url https://github.com/Ouranosinc/PAVICS-e2e-workflow-tests.git # timeout=10
Fetching upstream changes from https://github.com/Ouranosinc/PAVICS-e2e-workflow-tests.git
 > git --version # timeout=10
 > git fetch --no-tags --progress -- https://github.com/Ouranosinc/PAVICS-e2e-workflow-tests.git +refs/heads/*:refs/remotes/origin/* # timeout=10
Checking out Revision daaa4896c7358eff3a7bd6434617b4af06c89e42 (new-docker-build)
Commit message: "docker: attempt to fix "Plugin 'jupyterlab_dash' is already registered.""
 > git config core.sparsecheckout # timeout=10
 > git checkout -f daaa4896c7358eff3a7bd6434617b4af06c89e42 # timeout=10
 > git rev-list --no-walk daaa4896c7358eff3a7bd6434617b4af06c89e42 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] isUnix
[Pipeline] sh
+ docker inspect -f . pavics/workflow-tests:py310-231107-update240306
.
[Pipeline] withDockerContainer
linux1 seems to be running inside container c7b47b12d037a55684325ed6aba8c5cdbf14095a9ef2302738499cdd57ccd08b
$ docker run -t -d -u 1000:1000 -w /home/jenkins/agent/workspace/_workflow-tests_new-docker-build@3 --volumes-from c7b47b12d037a55684325ed6aba8c5cdbf14095a9ef2302738499cdd57ccd08b -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** pavics/workflow-tests:py310-231107-update240306 cat
$ docker top afee8048e2b4deaf0609277fd962ea28b5c30bfa175abfd9c040c3676602ff2d -eo pid,comm
[Pipeline] {
[Pipeline] ansiColor
[Pipeline] {
[Pipeline] timestamps
[Pipeline] {
[Pipeline] timeout
[2024-03-07T16:18:10.123Z] Timeout set to expire in 2 hr 0 min
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Run tests)
[Pipeline] script
[Pipeline] {
[Pipeline] withCredentials
[2024-03-07T16:18:10.906Z] Masking supported pattern matches of $ESGF_AUTH_USERNAME or $ESGF_AUTH_PASSWORD or $ESGF_AUTH_TOKEN or $COMPUTE_TOKEN
[Pipeline] {
[Pipeline] sh
[2024-03-07T16:18:11.356Z] + VERIFY_SSL=true SAVE_RESULTING_NOTEBOOK=true ./testall
[2024-03-07T16:18:11.356Z] TEST_PAVICS_SDI_REPO has been set to 'false'
[2024-03-07T16:18:11.356Z] PAVICS_SDI_BRANCH has been set to 'master'
[2024-03-07T16:18:11.356Z] PAVICS_SDI_REPO has been set to 'Ouranosinc/pavics-sdi'
[2024-03-07T16:18:11.356Z] TEST_FINCH_REPO has been set to 'false'
[2024-03-07T16:18:11.356Z] FINCH_BRANCH has been set to 'master'
[2024-03-07T16:18:11.356Z] FINCH_REPO has been set to 'bird-house/finch'
[2024-03-07T16:18:11.356Z] TEST_PAVICS_LANDING_REPO has been set to 'false'
[2024-03-07T16:18:11.356Z] PAVICS_LANDING_BRANCH has been set to 'master'
[2024-03-07T16:18:11.356Z] PAVICS_LANDING_REPO has been set to 'Ouranosinc/PAVICS-landing'
[2024-03-07T16:18:11.356Z] TEST_RAVEN_REPO has been set to 'true'
[2024-03-07T16:18:11.356Z] RAVEN_BRANCH has been set to 'main'
[2024-03-07T16:18:11.356Z] RAVEN_REPO has been set to 'Ouranosinc/raven'
[2024-03-07T16:18:11.356Z] TEST_RAVENPY_REPO has been set to 'true'
[2024-03-07T16:18:11.356Z] RAVENPY_BRANCH has been set to 'master'
[2024-03-07T16:18:11.356Z] RAVENPY_REPO has been set to 'CSHS-CWRA/RavenPy'
[2024-03-07T16:18:11.356Z] TEST_ESGF_COMPUTE_API_REPO has been set to 'false'
[2024-03-07T16:18:11.356Z] ESGF_COMPUTE_API_BRANCH has been set to 'devel'
[2024-03-07T16:18:11.356Z] ESGF_COMPUTE_API_REPO has been set to 'ESGF/esgf-compute-api'
[2024-03-07T16:18:11.356Z] TEST_LOCAL_NOTEBOOKS has been set to 'true'
[2024-03-07T16:18:11.356Z] + git clean -fdx
[2024-03-07T16:18:11.922Z] Removing .pytest_cache/
[2024-03-07T16:18:11.922Z] Removing PAVICS-landing-master/
[2024-03-07T16:18:11.922Z] Removing RavenPy-fix_docs/
[2024-03-07T16:18:11.922Z] Removing __pycache__/
[2024-03-07T16:18:11.922Z] Removing buildout/
[2024-03-07T16:18:11.922Z] Removing esgf-compute-api-devel/
[2024-03-07T16:18:11.922Z] Removing finch-master/
[2024-03-07T16:18:11.922Z] Removing pavics-sdi-master/
[2024-03-07T16:18:11.922Z] Removing raven-master/
[2024-03-07T16:18:11.922Z] + ./downloadrepos
[2024-03-07T16:18:11.922Z] TEST_PAVICS_SDI_REPO has been set to 'false'
[2024-03-07T16:18:11.922Z] PAVICS_SDI_BRANCH has been set to 'master'
[2024-03-07T16:18:11.922Z] PAVICS_SDI_REPO has been set to 'Ouranosinc/pavics-sdi'
[2024-03-07T16:18:11.922Z] TEST_FINCH_REPO has been set to 'false'
[2024-03-07T16:18:11.922Z] FINCH_BRANCH has been set to 'master'
[2024-03-07T16:18:11.922Z] FINCH_REPO has been set to 'bird-house/finch'
[2024-03-07T16:18:11.922Z] TEST_PAVICS_LANDING_REPO has been set to 'false'
[2024-03-07T16:18:11.922Z] PAVICS_LANDING_BRANCH has been set to 'master'
[2024-03-07T16:18:11.922Z] PAVICS_LANDING_REPO has been set to 'Ouranosinc/PAVICS-landing'
[2024-03-07T16:18:11.922Z] TEST_RAVEN_REPO has been set to 'true'
[2024-03-07T16:18:11.922Z] RAVEN_BRANCH has been set to 'main'
[2024-03-07T16:18:11.922Z] RAVEN_REPO has been set to 'Ouranosinc/raven'
[2024-03-07T16:18:11.922Z] TEST_RAVENPY_REPO has been set to 'true'
[2024-03-07T16:18:11.922Z] RAVENPY_BRANCH has been set to 'master'
[2024-03-07T16:18:11.922Z] RAVENPY_REPO has been set to 'CSHS-CWRA/RavenPy'
[2024-03-07T16:18:11.922Z] TEST_ESGF_COMPUTE_API_REPO has been set to 'false'
[2024-03-07T16:18:11.922Z] ESGF_COMPUTE_API_BRANCH has been set to 'devel'
[2024-03-07T16:18:11.922Z] ESGF_COMPUTE_API_REPO has been set to 'ESGF/esgf-compute-api'
[2024-03-07T16:18:11.922Z] TEST_LOCAL_NOTEBOOKS has been set to 'true'
[2024-03-07T16:18:11.922Z] + rm -rf pavics-sdi-*
[2024-03-07T16:18:11.922Z] + ls
[2024-03-07T16:18:11.922Z] + grep pavics-sdi
[2024-03-07T16:18:11.922Z] + downloadrepos https://github.com/Ouranosinc/pavics-sdi master
[2024-03-07T16:18:11.922Z] + github_repo=https://github.com/Ouranosinc/pavics-sdi
[2024-03-07T16:18:11.922Z] + shift
[2024-03-07T16:18:11.922Z] + branch=master
[2024-03-07T16:18:11.922Z] + shift
[2024-03-07T16:18:11.922Z] + wget --quiet --output-document - https://github.com/Ouranosinc/pavics-sdi/archive/master.tar.gz
[2024-03-07T16:18:11.922Z] + tar xz
[2024-03-07T16:18:15.266Z] + ls
[2024-03-07T16:18:15.266Z] + grep pavics-sdi
[2024-03-07T16:18:15.266Z] pavics-sdi-master
[2024-03-07T16:18:15.266Z] + set +x
[2024-03-07T16:18:15.266Z] + rm -rf finch-*
[2024-03-07T16:18:15.266Z] + ls
[2024-03-07T16:18:15.266Z] + grep finch
[2024-03-07T16:18:15.266Z] + downloadrepos https://github.com/bird-house/finch master
[2024-03-07T16:18:15.266Z] + github_repo=https://github.com/bird-house/finch
[2024-03-07T16:18:15.266Z] + shift
[2024-03-07T16:18:15.266Z] + branch=master
[2024-03-07T16:18:15.266Z] + shift
[2024-03-07T16:18:15.266Z] + wget --quiet --output-document - https://github.com/bird-house/finch/archive/master.tar.gz
[2024-03-07T16:18:15.266Z] + tar xz
[2024-03-07T16:18:16.633Z] + ls
[2024-03-07T16:18:16.633Z] + grep finch
[2024-03-07T16:18:16.633Z] finch-master
[2024-03-07T16:18:16.633Z] + set +x
[2024-03-07T16:18:16.633Z] + rm -rf PAVICS-landing-*
[2024-03-07T16:18:16.633Z] + ls
[2024-03-07T16:18:16.633Z] + grep PAVICS-landing
[2024-03-07T16:18:16.633Z] + downloadrepos https://github.com/Ouranosinc/PAVICS-landing master
[2024-03-07T16:18:16.633Z] + github_repo=https://github.com/Ouranosinc/PAVICS-landing
[2024-03-07T16:18:16.633Z] + shift
[2024-03-07T16:18:16.633Z] + branch=master
[2024-03-07T16:18:16.633Z] + shift
[2024-03-07T16:18:16.633Z] + wget --quiet --output-document - https://github.com/Ouranosinc/PAVICS-landing/archive/master.tar.gz
[2024-03-07T16:18:16.633Z] + tar xz
[2024-03-07T16:18:38.543Z] + ls
[2024-03-07T16:18:38.543Z] + grep PAVICS-landing
[2024-03-07T16:18:38.543Z] PAVICS-landing-master
[2024-03-07T16:18:38.543Z] + set +x
[2024-03-07T16:18:38.543Z] + rm -rf raven-*
[2024-03-07T16:18:38.543Z] + ls
[2024-03-07T16:18:38.543Z] + grep raven
[2024-03-07T16:18:38.543Z] + downloadrepos https://github.com/Ouranosinc/raven main
[2024-03-07T16:18:38.543Z] + github_repo=https://github.com/Ouranosinc/raven
[2024-03-07T16:18:38.543Z] + shift
[2024-03-07T16:18:38.543Z] + branch=main
[2024-03-07T16:18:38.543Z] + shift
[2024-03-07T16:18:38.543Z] + wget --quiet --output-document - https://github.com/Ouranosinc/raven/archive/main.tar.gz
[2024-03-07T16:18:38.543Z] + tar xz
[2024-03-07T16:18:38.543Z] + ls
[2024-03-07T16:18:38.543Z] + grep raven
[2024-03-07T16:18:38.543Z] raven-main
[2024-03-07T16:18:38.543Z] + set +x
[2024-03-07T16:18:38.543Z] + rm -rf RavenPy-*
[2024-03-07T16:18:38.543Z] + ls
[2024-03-07T16:18:38.543Z] + grep RavenPy
[2024-03-07T16:18:38.543Z] + downloadrepos https://github.com/CSHS-CWRA/RavenPy master
[2024-03-07T16:18:38.543Z] + github_repo=https://github.com/CSHS-CWRA/RavenPy
[2024-03-07T16:18:38.543Z] + shift
[2024-03-07T16:18:38.543Z] + branch=master
[2024-03-07T16:18:38.543Z] + shift
[2024-03-07T16:18:38.543Z] + + tar xz
[2024-03-07T16:18:38.543Z] wget --quiet --output-document - https://github.com/CSHS-CWRA/RavenPy/archive/master.tar.gz
[2024-03-07T16:18:38.543Z] + ls
[2024-03-07T16:18:38.543Z] + grep RavenPy
[2024-03-07T16:18:38.543Z] RavenPy-master
[2024-03-07T16:18:38.543Z] + set +x
[2024-03-07T16:18:38.543Z] + rm -rf esgf-compute-api-*
[2024-03-07T16:18:38.543Z] + ls
[2024-03-07T16:18:38.543Z] + grep esgf-compute-api
[2024-03-07T16:18:38.543Z] + downloadrepos https://github.com/ESGF/esgf-compute-api devel
[2024-03-07T16:18:38.543Z] + github_repo=https://github.com/ESGF/esgf-compute-api
[2024-03-07T16:18:38.543Z] + shift
[2024-03-07T16:18:38.543Z] + branch=devel
[2024-03-07T16:18:38.543Z] + shift
[2024-03-07T16:18:38.543Z] + wget --quiet --output-document - https://github.com/ESGF/esgf-compute-api/archive/devel.tar.gz
[2024-03-07T16:18:38.543Z] + tar xz
[2024-03-07T16:18:39.923Z] + ls
[2024-03-07T16:18:39.923Z] + grep esgf-compute-api
[2024-03-07T16:18:39.923Z] esgf-compute-api-devel
[2024-03-07T16:18:39.923Z] + set +x
[2024-03-07T16:18:39.923Z] + echo master
[2024-03-07T16:18:39.923Z] + sed s@/@-@g
[2024-03-07T16:18:39.923Z] + PAVICS_SDI_BRANCH=master
[2024-03-07T16:18:39.923Z] + echo Ouranosinc/pavics-sdi
[2024-03-07T16:18:39.923Z] + sed s@^.*/@@g
[2024-03-07T16:18:39.923Z] + PAVICS_SDI_REPO_NAME=pavics-sdi
[2024-03-07T16:18:39.923Z] + echo master
[2024-03-07T16:18:39.923Z] + sed s@/@-@g
[2024-03-07T16:18:39.923Z] + FINCH_BRANCH=master
[2024-03-07T16:18:39.923Z] + echo bird-house/finch
[2024-03-07T16:18:39.923Z] + sed s@^.*/@@g
[2024-03-07T16:18:39.923Z] + FINCH_REPO_NAME=finch
[2024-03-07T16:18:39.923Z] + echo master
[2024-03-07T16:18:39.923Z] + sed s@/@-@g
[2024-03-07T16:18:39.923Z] + PAVICS_LANDING_BRANCH=master
[2024-03-07T16:18:39.923Z] + echo Ouranosinc/PAVICS-landing
[2024-03-07T16:18:39.923Z] + sed s@^.*/@@g
[2024-03-07T16:18:39.923Z] + PAVICS_LANDING_REPO_NAME=PAVICS-landing
[2024-03-07T16:18:39.923Z] + echo main
[2024-03-07T16:18:39.923Z] + sed s@/@-@g
[2024-03-07T16:18:39.923Z] + RAVEN_BRANCH=main
[2024-03-07T16:18:39.923Z] + echo Ouranosinc/raven
[2024-03-07T16:18:39.923Z] + sed s@^.*/@@g
[2024-03-07T16:18:39.923Z] + RAVEN_REPO_NAME=raven
[2024-03-07T16:18:39.923Z] + echo master
[2024-03-07T16:18:39.923Z] + sed s@/@-@g
[2024-03-07T16:18:39.923Z] + RAVENPY_BRANCH=master
[2024-03-07T16:18:39.923Z] + echo CSHS-CWRA/RavenPy
[2024-03-07T16:18:39.923Z] + sed s@^.*/@@g
[2024-03-07T16:18:39.923Z] + RAVENPY_REPO_NAME=RavenPy
[2024-03-07T16:18:39.923Z] + echo devel
[2024-03-07T16:18:39.923Z] + sed s@/@-@g
[2024-03-07T16:18:39.923Z] + ESGF_COMPUTE_API_BRANCH=devel
[2024-03-07T16:18:39.923Z] + echo ESGF/esgf-compute-api
[2024-03-07T16:18:39.923Z] + sed s@^.*/@@g
[2024-03-07T16:18:39.923Z] + ESGF_COMPUTE_API_REPO_NAME=esgf-compute-api
[2024-03-07T16:18:39.923Z] + echo pavics-sdi-master
[2024-03-07T16:18:39.924Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:18:39.924Z] + PAVICS_SDI_DIR=pavics-sdi-master
[2024-03-07T16:18:39.924Z] + echo finch-master
[2024-03-07T16:18:39.924Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:18:39.924Z] + FINCH_DIR=finch-master
[2024-03-07T16:18:39.924Z] + echo PAVICS-landing-master
[2024-03-07T16:18:39.924Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:18:39.924Z] + PAVICS_LANDING_DIR=PAVICS-landing-master
[2024-03-07T16:18:39.924Z] + echo raven-main
[2024-03-07T16:18:39.924Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:18:39.924Z] + RAVEN_DIR=raven-main
[2024-03-07T16:18:39.924Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:18:39.924Z] + echo RavenPy-master
[2024-03-07T16:18:39.924Z] + RAVENPY_DIR=RavenPy-master
[2024-03-07T16:18:39.924Z] + echo esgf-compute-api-devel
[2024-03-07T16:18:39.924Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:18:39.924Z] + ESGF_COMPUTE_API_DIR=esgf-compute-api-devel
[2024-03-07T16:18:39.924Z] + echo true
[2024-03-07T16:18:39.924Z] + tr [:upper:] [:lower:]
[2024-03-07T16:18:39.924Z] + VERIFY_SSL=true
[2024-03-07T16:18:39.924Z] + [ xtrue = xfalse ]
[2024-03-07T16:18:39.924Z] + rm -v finch-master/setup.cfg
[2024-03-07T16:18:39.924Z] removed 'finch-master/setup.cfg'
[2024-03-07T16:18:39.924Z] + rm -v raven-main/setup.cfg
[2024-03-07T16:18:39.924Z] removed 'raven-main/setup.cfg'
[2024-03-07T16:18:39.924Z] + rm -v raven-main/pyproject.toml
[2024-03-07T16:18:39.924Z] removed 'raven-main/pyproject.toml'
[2024-03-07T16:18:39.924Z] + rm -v RavenPy-master/setup.cfg
[2024-03-07T16:18:39.924Z] removed 'RavenPy-master/setup.cfg'
[2024-03-07T16:18:39.924Z] + rm -v RavenPy-master/tox.ini
[2024-03-07T16:18:39.924Z] removed 'RavenPy-master/tox.ini'
[2024-03-07T16:18:39.924Z] + rm -v RavenPy-master/pyproject.toml
[2024-03-07T16:18:39.924Z] removed 'RavenPy-master/pyproject.toml'
[2024-03-07T16:18:39.924Z] + rm -v esgf-compute-api-devel/setup.cfg
[2024-03-07T16:18:39.924Z] rm: cannot remove 'esgf-compute-api-devel/setup.cfg': No such file or directory
[2024-03-07T16:18:39.924Z] + rm -v esgf-compute-api-devel/tox.ini
[2024-03-07T16:18:39.924Z] rm: cannot remove 'esgf-compute-api-devel/tox.ini': No such file or directory
[2024-03-07T16:18:39.924Z] + echo false
[2024-03-07T16:18:39.924Z] + tr [:upper:] [:lower:]
[2024-03-07T16:18:39.924Z] + TEST_MAGPIE_AUTH=false
[2024-03-07T16:18:39.924Z] + echo false
[2024-03-07T16:18:39.924Z] + tr [:upper:] [:lower:]
[2024-03-07T16:18:39.924Z] + TEST_PAVICS_SDI_REPO=false
[2024-03-07T16:18:39.924Z] + echo false
[2024-03-07T16:18:39.924Z] + tr [:upper:] [:lower:]
[2024-03-07T16:18:39.924Z] + TEST_PAVICS_SDI_WEAVER=false
[2024-03-07T16:18:39.924Z] + echo false
[2024-03-07T16:18:39.924Z] + tr [:upper:] [:lower:]
[2024-03-07T16:18:39.924Z] + TEST_FINCH_REPO=false
[2024-03-07T16:18:39.924Z] + echo false
[2024-03-07T16:18:39.924Z] + tr [:upper:] [:lower:]
[2024-03-07T16:18:39.924Z] + TEST_PAVICS_LANDING_REPO=false
[2024-03-07T16:18:39.924Z] + echo true
[2024-03-07T16:18:39.924Z] + tr [:upper:] [:lower:]
[2024-03-07T16:18:39.924Z] + TEST_RAVEN_REPO=true
[2024-03-07T16:18:39.924Z] + echo true
[2024-03-07T16:18:39.924Z] + tr [:upper:] [:lower:]
[2024-03-07T16:18:39.924Z] + TEST_RAVENPY_REPO=true
[2024-03-07T16:18:39.924Z] + echo false
[2024-03-07T16:18:39.924Z] + tr [:upper:] [:lower:]
[2024-03-07T16:18:39.924Z] + TEST_ESGF_COMPUTE_API_REPO=false
[2024-03-07T16:18:39.924Z] + echo true
[2024-03-07T16:18:39.924Z] + tr [:upper:] [:lower:]
[2024-03-07T16:18:39.924Z] + TEST_LOCAL_NOTEBOOKS=true
[2024-03-07T16:18:39.924Z] + NOTEBOOKS_TO_TEST=
[2024-03-07T16:18:39.924Z] + [ xfalse = xtrue ]
[2024-03-07T16:18:39.924Z] + [ xfalse = xtrue ]
[2024-03-07T16:18:39.924Z] + [ xfalse = xtrue ]
[2024-03-07T16:18:39.924Z] + [ xfalse = xtrue ]
[2024-03-07T16:18:39.924Z] + [ xtrue = xtrue ]
[2024-03-07T16:18:39.924Z] + NOTEBOOKS_TO_TEST= raven-main/docs/source/notebooks/*.ipynb
[2024-03-07T16:18:39.924Z] + [ xtrue = xtrue ]
[2024-03-07T16:18:39.924Z] + NOTEBOOKS_TO_TEST= raven-main/docs/source/notebooks/*.ipynb RavenPy-master/docs/notebooks/*.ipynb
[2024-03-07T16:18:39.924Z] + NOTEBOOKS_TO_TEST= raven-main/docs/source/notebooks/*.ipynb RavenPy-master/docs/notebooks/*.ipynb RavenPy-master/docs/notebooks/paper/*.ipynb
[2024-03-07T16:18:39.924Z] + [ xfalse = xtrue ]
[2024-03-07T16:18:39.924Z] + [ xtrue = xtrue ]
[2024-03-07T16:18:39.924Z] + NOTEBOOKS_TO_TEST= raven-main/docs/source/notebooks/*.ipynb RavenPy-master/docs/notebooks/*.ipynb RavenPy-master/docs/notebooks/paper/*.ipynb notebooks/*.ipynb
[2024-03-07T16:18:39.924Z] + ./runtest  raven-main/docs/source/notebooks/*.ipynb RavenPy-master/docs/notebooks/*.ipynb RavenPy-master/docs/notebooks/paper/*.ipynb notebooks/*.ipynb
[2024-03-07T16:18:39.924Z] + [ -n  ]
[2024-03-07T16:18:39.924Z] + [ ! -z pavics.ouranos.ca ]
[2024-03-07T16:18:39.924Z] + echo Will run notebooks against pavics.ouranos.ca
[2024-03-07T16:18:39.924Z] Will run notebooks against pavics.ouranos.ca
[2024-03-07T16:18:39.924Z] + [ -z  ]
[2024-03-07T16:18:39.924Z] + sed -i /\(\.ncml\|TEST_USE_PROD_DATA\)/!s/pavics.ouranos.ca/pavics.ouranos.ca/g raven-main/docs/source/notebooks/Region_selection.ipynb raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb RavenPy-master/docs/notebooks/HydroShare_integration.ipynb RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb RavenPy-master/docs/notebooks/time_series_analysis.ipynb RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb notebooks/hummingbird.ipynb notebooks/stress-tests.ipynb
[2024-03-07T16:18:39.924Z] + git diff
[2024-03-07T16:18:39.924Z] + export PYTHONWARNINGS=ignore:Unverified HTTPS request
[2024-03-07T16:18:39.925Z] + py.test --nbval raven-main/docs/source/notebooks/Region_selection.ipynb raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb RavenPy-master/docs/notebooks/HydroShare_integration.ipynb RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb RavenPy-master/docs/notebooks/time_series_analysis.ipynb RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb notebooks/hummingbird.ipynb notebooks/stress-tests.ipynb --sanitize-with notebooks/output-sanitize.cfg --dist=loadscope --numprocesses=0 --nbval-lax
[2024-03-07T16:18:41.826Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/plugin.py:122: DeprecationWarning: --sanitize-with has been renamed to --nbval-sanitize-with
[2024-03-07T16:18:41.826Z]   warnings.warn("--sanitize-with has been renamed to --nbval-sanitize-with", DeprecationWarning)
[2024-03-07T16:18:42.093Z] ============================= test session starts ==============================
[2024-03-07T16:18:42.093Z] platform linux -- Python 3.10.13, pytest-7.4.3, pluggy-1.3.0
[2024-03-07T16:18:42.093Z] rootdir: /home/jenkins/agent/workspace/_workflow-tests_new-docker-build@3
[2024-03-07T16:18:42.093Z] plugins: anyio-4.0.0, dash-2.14.1, nbval-0.10.0, tornasync-0.6.0.post2, xdist-3.3.1
[2024-03-07T16:18:42.093Z] collected 260 items
[2024-03-07T16:18:42.093Z] 
[2024-03-07T16:18:52.404Z] raven-main/docs/source/notebooks/Region_selection.ipynb .........        [  3%]
[2024-03-07T16:18:54.350Z] raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb . [  3%]
[2024-03-07T16:19:06.828Z] ......                                                                   [  6%]
[2024-03-07T16:19:08.722Z] RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb ...... [  8%]
[2024-03-07T16:19:08.722Z]                                                                          [  8%]
[2024-03-07T16:19:10.877Z] RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb .... [ 10%]
[2024-03-07T16:19:19.096Z] ....                                                                     [ 11%]
[2024-03-07T16:19:29.063Z] RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb . [ 11%]
[2024-03-07T16:19:33.671Z] ....FFFF.FF.F                                                            [ 16%]
[2024-03-07T16:20:18.416Z] RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb .......FF [ 20%]
[2024-03-07T16:21:36.886Z] .F                                                                       [ 21%]
[2024-03-07T16:21:40.744Z] RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb ... [ 22%]
[2024-03-07T16:21:49.421Z] ..FFFFFFFF.......                                                        [ 28%]
[2024-03-07T16:21:56.579Z] RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb .. [ 29%]
[2024-03-07T16:22:06.651Z] ...........                                                              [ 33%]
[2024-03-07T16:22:17.210Z] RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb ......          [ 36%]
[2024-03-07T16:22:22.585Z] RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb . [ 36%]
[2024-03-07T16:22:29.730Z] .....                                                                    [ 38%]
[2024-03-07T16:22:31.694Z] RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb . [ 38%]
[2024-03-07T16:26:37.370Z] .................                                                        [ 45%]
[2024-03-07T16:26:42.627Z] RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb . [ 45%]
[2024-03-07T16:26:49.914Z] ....                                                                     [ 47%]
[2024-03-07T16:27:48.210Z] RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb ........        [ 50%]
[2024-03-07T16:28:01.148Z] RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb .. [ 51%]
[2024-03-07T16:28:47.066Z] ......                                                                   [ 53%]
[2024-03-07T16:28:57.054Z] RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb . [ 53%]
[2024-03-07T16:29:07.383Z] .......                                                                  [ 56%]
[2024-03-07T16:29:15.304Z] RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb .... [ 58%]
[2024-03-07T16:29:35.867Z] ....                                                                     [ 59%]
[2024-03-07T16:29:43.996Z] RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb . [ 60%]
[2024-03-07T16:30:08.000Z] .......                                                                  [ 62%]
[2024-03-07T16:30:11.284Z] RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb . [ 63%]
[2024-03-07T16:30:40.676Z] .......                                                                  [ 65%]
[2024-03-07T16:30:43.214Z] RavenPy-master/docs/notebooks/HydroShare_integration.ipynb FFFF          [ 67%]
[2024-03-07T16:30:55.526Z] RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb .. [ 68%]
[2024-03-07T16:31:03.389Z] ....                                                                     [ 69%]
[2024-03-07T16:32:00.621Z] RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb ...    [ 70%]
[2024-03-07T16:32:26.129Z] RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb .......      [ 73%]
[2024-03-07T16:32:26.129Z] RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb . [ 73%]
[2024-03-07T16:32:39.765Z] .............                                                            [ 78%]
[2024-03-07T16:32:57.288Z] RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb .....           [ 80%]
[2024-03-07T16:33:06.431Z] RavenPy-master/docs/notebooks/time_series_analysis.ipynb ...........     [ 85%]
[2024-03-07T16:33:18.620Z] RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb . [ 85%]
[2024-03-07T16:34:35.719Z] ......FFFFFFFFFFFFFF                                                     [ 93%]
[2024-03-07T16:34:38.285Z] notebooks/hummingbird.ipynb ............                                 [ 97%]
[2024-03-07T16:36:33.237Z] notebooks/stress-tests.ipynb ......                                      [100%]
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.237Z] =================================== FAILURES ===================================
[2024-03-07T16:36:33.237Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 5 _
[2024-03-07T16:36:33.237Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.237Z] [94mCell 5: Cell execution caused an exception
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.237Z] Input:
[2024-03-07T16:36:33.237Z] [0mfeatures, statistics, raster = stats_resp.get(asobj=True)
[2024-03-07T16:36:33.237Z] grid = raster[0]
[2024-03-07T16:36:33.237Z] grid.plot()
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.237Z] [94mTraceback:[0m
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.237Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.237Z] [0;31mAttributeError[0m                            Traceback (most recent call last)
[2024-03-07T16:36:33.237Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.237Z] [0;32m----> 1[0m features, statistics, raster [38;5;241m=[39m [43mstats_resp[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43masobj[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[2024-03-07T16:36:33.237Z] [1;32m      2[0m grid [38;5;241m=[39m raster[[38;5;241m0[39m]
[2024-03-07T16:36:33.237Z] [1;32m      3[0m grid[38;5;241m.[39mplot()
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.237Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:41[0m, in [0;36mWPSResult.get[0;34m(self, asobj)[0m
[2024-03-07T16:36:33.237Z] [1;32m     38[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39misSucceded():
[2024-03-07T16:36:33.237Z] [1;32m     39[0m     [38;5;66;03m# TODO: add reason for failure[39;00m
[2024-03-07T16:36:33.237Z] [1;32m     40[0m     [38;5;28;01mraise[39;00m ProcessFailed([38;5;124m"[39m[38;5;124mSorry, process failed.[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.237Z] [0;32m---> 41[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_output[49m[43m([49m[43masobj[49m[43m)[49m
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.237Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36mWPSResult._make_output[0;34m(self, convert_objects)[0m
[2024-03-07T16:36:33.237Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:36:33.237Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.237Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:36:33.237Z] [1;32m     47[0m )
[2024-03-07T16:36:33.237Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:36:33.237Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:36:33.237Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28mself[39m[38;5;241m.[39m_process_output(o, convert_objects) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:36:33.237Z] [1;32m     51[0m )
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.237Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:36:33.237Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:36:33.237Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.237Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:36:33.237Z] [1;32m     47[0m )
[2024-03-07T16:36:33.237Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:36:33.237Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:36:33.237Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_process_output[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mconvert_objects[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:36:33.237Z] [1;32m     51[0m )
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.237Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:71[0m, in [0;36mWPSResult._process_output[0;34m(self, output, convert_objects)[0m
[2024-03-07T16:36:33.237Z] [1;32m     68[0m     [38;5;28;01mreturn[39;00m delist(data)
[2024-03-07T16:36:33.237Z] [1;32m     70[0m [38;5;28;01mif[39;00m convert_objects:
[2024-03-07T16:36:33.237Z] [0;32m---> 71[0m     [38;5;28;01mreturn[39;00m [43mconvert[49m[43m([49m[43moutput[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_path[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_converters[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mauth[49m[38;5;241;43m.[39;49m[43mverify[49m[43m)[49m
[2024-03-07T16:36:33.237Z] [1;32m     72[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:36:33.237Z] [1;32m     73[0m     [38;5;28;01mreturn[39;00m output[38;5;241m.[39mreference
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.237Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:376[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:36:33.237Z] [1;32m    374[0m     out [38;5;241m=[39m converter[38;5;241m.[39mconvert()
[2024-03-07T16:36:33.237Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:36:33.237Z] [0;32m--> 376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:36:33.237Z] [1;32m    377[0m     [38;5;28;01mreturn[39;00m out
[2024-03-07T16:36:33.237Z] [1;32m    379[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mImportError[39;00m, [38;5;167;01mNotImplementedError[39;00m):
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.237Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:376[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:36:33.237Z] [1;32m    374[0m     out [38;5;241m=[39m converter[38;5;241m.[39mconvert()
[2024-03-07T16:36:33.237Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:36:33.237Z] [0;32m--> 376[0m         out [38;5;241m=[39m [[43mconvert[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mpath[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:36:33.237Z] [1;32m    377[0m     [38;5;28;01mreturn[39;00m out
[2024-03-07T16:36:33.237Z] [1;32m    379[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mImportError[39;00m, [38;5;167;01mNotImplementedError[39;00m):
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.237Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:374[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:36:33.237Z] [1;32m    372[0m [38;5;28;01mtry[39;00m:
[2024-03-07T16:36:33.237Z] [1;32m    373[0m     converter [38;5;241m=[39m [38;5;28mcls[39m(output, path[38;5;241m=[39mpath, verify[38;5;241m=[39mverify)
[2024-03-07T16:36:33.237Z] [0;32m--> 374[0m     out [38;5;241m=[39m [43mconverter[49m[38;5;241;43m.[39;49m[43mconvert[49m[43m([49m[43m)[49m
[2024-03-07T16:36:33.237Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:36:33.237Z] [1;32m    376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:36:33.237Z] 
[2024-03-07T16:36:33.238Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:266[0m, in [0;36mGeotiffRioxarrayConverter.convert[0;34m(self)[0m
[2024-03-07T16:36:33.238Z] [1;32m    263[0m [38;5;28;01mimport[39;00m [38;5;21;01mxarray[39;00m  [38;5;66;03m# isort: skip[39;00m
[2024-03-07T16:36:33.238Z] [1;32m    264[0m [38;5;28;01mimport[39;00m [38;5;21;01mrioxarray[39;00m  [38;5;66;03m# noqa[39;00m
[2024-03-07T16:36:33.238Z] [0;32m--> 266[0m [38;5;28;01mreturn[39;00m [43mxarray[49m[38;5;241;43m.[39;49m[43mopen_rasterio[49m([38;5;28mself[39m[38;5;241m.[39mfile)
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [0;31mAttributeError[0m: module 'xarray' has no attribute 'open_rasterio'
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 6 _
[2024-03-07T16:36:33.238Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.238Z] [94mCell 6: Cell execution caused an exception
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] Input:
[2024-03-07T16:36:33.238Z] [0mlu = statistics[0]
[2024-03-07T16:36:33.238Z] total = sum(lu.values())
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] land_use = {k: (v / total) for (k, v) in lu.items()}
[2024-03-07T16:36:33.238Z] display("Land use ratios", land_use)
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] land_use_pct = {k: f"{np.round(v/total*100, 2)} %" for (k, v) in lu.items()}
[2024-03-07T16:36:33.238Z] display("Land use percentages", land_use_pct)
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [94mTraceback:[0m
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.238Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.238Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.238Z] [0;32m----> 1[0m lu [38;5;241m=[39m [43mstatistics[49m[[38;5;241m0[39m]
[2024-03-07T16:36:33.238Z] [1;32m      2[0m total [38;5;241m=[39m [38;5;28msum[39m(lu[38;5;241m.[39mvalues())
[2024-03-07T16:36:33.238Z] [1;32m      4[0m land_use [38;5;241m=[39m {k: (v [38;5;241m/[39m total) [38;5;28;01mfor[39;00m (k, v) [38;5;129;01min[39;00m lu[38;5;241m.[39mitems()}
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [0;31mNameError[0m: name 'statistics' is not defined
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 7 _
[2024-03-07T16:36:33.238Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.238Z] [94mCell 7: Cell execution caused an exception
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] Input:
[2024-03-07T16:36:33.238Z] [0munique, counts = np.unique(grid, return_counts=True)
[2024-03-07T16:36:33.238Z] print("The land-use categories available are: " + str(unique))
[2024-03-07T16:36:33.238Z] print("The number of occurrences of each land-use category is: " + str(counts))
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] # Pixels values at '127' are NaN and can be ignored.
[2024-03-07T16:36:33.238Z] from matplotlib.colors import Normalize
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] norm = Normalize()
[2024-03-07T16:36:33.238Z] norm.autoscale(unique[:-1])
[2024-03-07T16:36:33.238Z] cm = mpl.colormaps["tab20"]
[2024-03-07T16:36:33.238Z] plt.bar(unique[:-1], counts[:-1], color=cm(norm(unique[:-1])))
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] # plt.bar(unique[:-1], counts[:-1])
[2024-03-07T16:36:33.238Z] plt.xticks(np.arange(min(unique[:-1]), max(unique[:-1]) + 1, 1.0))
[2024-03-07T16:36:33.238Z] plt.xlabel("Land-use categories")
[2024-03-07T16:36:33.238Z] plt.ylabel("Number of pixels")
[2024-03-07T16:36:33.238Z] plt.show()
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] grid.where(grid != 127).sel(band=1).plot.imshow(cmap="tab20")
[2024-03-07T16:36:33.238Z] grid.name = "Land-use categories"
[2024-03-07T16:36:33.238Z] plt.show()
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [94mTraceback:[0m
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.238Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.238Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.238Z] [0;32m----> 1[0m unique, counts [38;5;241m=[39m np[38;5;241m.[39munique([43mgrid[49m, return_counts[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[2024-03-07T16:36:33.238Z] [1;32m      2[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mThe land-use categories available are: [39m[38;5;124m"[39m [38;5;241m+[39m [38;5;28mstr[39m(unique))
[2024-03-07T16:36:33.238Z] [1;32m      3[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mThe number of occurrences of each land-use category is: [39m[38;5;124m"[39m [38;5;241m+[39m [38;5;28mstr[39m(counts))
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [0;31mNameError[0m: name 'grid' is not defined
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 8 _
[2024-03-07T16:36:33.238Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.238Z] [94mCell 8: Cell execution caused an exception
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] Input:
[2024-03-07T16:36:33.238Z] [0mimport cartopy.crs as ccrs
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] # Set a CRS transformation:
[2024-03-07T16:36:33.238Z] crs = ccrs.LambertConformal(
[2024-03-07T16:36:33.238Z]     central_latitude=49, central_longitude=-95, standard_parallels=(49, 77)
[2024-03-07T16:36:33.238Z] )
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] ax = plt.subplot(projection=crs)
[2024-03-07T16:36:33.238Z] grid.name = "Land-use categories"
[2024-03-07T16:36:33.238Z] grid.where(grid != 127).sel(band=1).plot.imshow(ax=ax, transform=crs, cmap="tab20")
[2024-03-07T16:36:33.238Z] plt.show()
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [94mTraceback:[0m
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.238Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.238Z] Cell [0;32mIn[1], line 9[0m
[2024-03-07T16:36:33.238Z] [1;32m      4[0m crs [38;5;241m=[39m ccrs[38;5;241m.[39mLambertConformal(
[2024-03-07T16:36:33.238Z] [1;32m      5[0m     central_latitude[38;5;241m=[39m[38;5;241m49[39m, central_longitude[38;5;241m=[39m[38;5;241m-[39m[38;5;241m95[39m, standard_parallels[38;5;241m=[39m([38;5;241m49[39m, [38;5;241m77[39m)
[2024-03-07T16:36:33.238Z] [1;32m      6[0m )
[2024-03-07T16:36:33.238Z] [1;32m      8[0m ax [38;5;241m=[39m plt[38;5;241m.[39msubplot(projection[38;5;241m=[39mcrs)
[2024-03-07T16:36:33.238Z] [0;32m----> 9[0m [43mgrid[49m[38;5;241m.[39mname [38;5;241m=[39m [38;5;124m"[39m[38;5;124mLand-use categories[39m[38;5;124m"[39m
[2024-03-07T16:36:33.238Z] [1;32m     10[0m grid[38;5;241m.[39mwhere(grid [38;5;241m!=[39m [38;5;241m127[39m)[38;5;241m.[39msel(band[38;5;241m=[39m[38;5;241m1[39m)[38;5;241m.[39mplot[38;5;241m.[39mimshow(ax[38;5;241m=[39max, transform[38;5;241m=[39mcrs, cmap[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtab20[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.238Z] [1;32m     11[0m plt[38;5;241m.[39mshow()
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [0;31mNameError[0m: name 'grid' is not defined
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 10 _
[2024-03-07T16:36:33.238Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.238Z] [94mCell 10: Cell execution caused an exception
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] Input:
[2024-03-07T16:36:33.238Z] [0mproperties, dem = terrain_resp.get(asobj=True)
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] elevation = properties[0]["elevation"]
[2024-03-07T16:36:33.238Z] slope = properties[0]["slope"]
[2024-03-07T16:36:33.238Z] aspect = properties[0]["aspect"]
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] terrain = {"elevation": elevation, "slope": slope, "aspect": aspect}
[2024-03-07T16:36:33.238Z] display(terrain)
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [94mTraceback:[0m
[2024-03-07T16:36:33.238Z] 
[2024-03-07T16:36:33.238Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.238Z] [0;31mAttributeError[0m                            Traceback (most recent call last)
[2024-03-07T16:36:33.238Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.239Z] [0;32m----> 1[0m properties, dem [38;5;241m=[39m [43mterrain_resp[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43masobj[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[2024-03-07T16:36:33.239Z] [1;32m      3[0m elevation [38;5;241m=[39m properties[[38;5;241m0[39m][[38;5;124m"[39m[38;5;124melevation[39m[38;5;124m"[39m]
[2024-03-07T16:36:33.239Z] [1;32m      4[0m slope [38;5;241m=[39m properties[[38;5;241m0[39m][[38;5;124m"[39m[38;5;124mslope[39m[38;5;124m"[39m]
[2024-03-07T16:36:33.239Z] 
[2024-03-07T16:36:33.239Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:41[0m, in [0;36mWPSResult.get[0;34m(self, asobj)[0m
[2024-03-07T16:36:33.239Z] [1;32m     38[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39misSucceded():
[2024-03-07T16:36:33.239Z] [1;32m     39[0m     [38;5;66;03m# TODO: add reason for failure[39;00m
[2024-03-07T16:36:33.239Z] [1;32m     40[0m     [38;5;28;01mraise[39;00m ProcessFailed([38;5;124m"[39m[38;5;124mSorry, process failed.[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.239Z] [0;32m---> 41[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_output[49m[43m([49m[43masobj[49m[43m)[49m
[2024-03-07T16:36:33.239Z] 
[2024-03-07T16:36:33.239Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36mWPSResult._make_output[0;34m(self, convert_objects)[0m
[2024-03-07T16:36:33.239Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:36:33.239Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.239Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:36:33.239Z] [1;32m     47[0m )
[2024-03-07T16:36:33.239Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:36:33.239Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:36:33.239Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28mself[39m[38;5;241m.[39m_process_output(o, convert_objects) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:36:33.239Z] [1;32m     51[0m )
[2024-03-07T16:36:33.239Z] 
[2024-03-07T16:36:33.239Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:36:33.239Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:36:33.239Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.239Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:36:33.239Z] [1;32m     47[0m )
[2024-03-07T16:36:33.239Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:36:33.239Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:36:33.239Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_process_output[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mconvert_objects[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:36:33.239Z] [1;32m     51[0m )
[2024-03-07T16:36:33.239Z] 
[2024-03-07T16:36:33.239Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:71[0m, in [0;36mWPSResult._process_output[0;34m(self, output, convert_objects)[0m
[2024-03-07T16:36:33.239Z] [1;32m     68[0m     [38;5;28;01mreturn[39;00m delist(data)
[2024-03-07T16:36:33.239Z] [1;32m     70[0m [38;5;28;01mif[39;00m convert_objects:
[2024-03-07T16:36:33.239Z] [0;32m---> 71[0m     [38;5;28;01mreturn[39;00m [43mconvert[49m[43m([49m[43moutput[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_path[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_converters[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mauth[49m[38;5;241;43m.[39;49m[43mverify[49m[43m)[49m
[2024-03-07T16:36:33.239Z] [1;32m     72[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:36:33.239Z] [1;32m     73[0m     [38;5;28;01mreturn[39;00m output[38;5;241m.[39mreference
[2024-03-07T16:36:33.239Z] 
[2024-03-07T16:36:33.239Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:374[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:36:33.239Z] [1;32m    372[0m [38;5;28;01mtry[39;00m:
[2024-03-07T16:36:33.239Z] [1;32m    373[0m     converter [38;5;241m=[39m [38;5;28mcls[39m(output, path[38;5;241m=[39mpath, verify[38;5;241m=[39mverify)
[2024-03-07T16:36:33.239Z] [0;32m--> 374[0m     out [38;5;241m=[39m [43mconverter[49m[38;5;241;43m.[39;49m[43mconvert[49m[43m([49m[43m)[49m
[2024-03-07T16:36:33.239Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:36:33.239Z] [1;32m    376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:36:33.239Z] 
[2024-03-07T16:36:33.240Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:266[0m, in [0;36mGeotiffRioxarrayConverter.convert[0;34m(self)[0m
[2024-03-07T16:36:33.240Z] [1;32m    263[0m [38;5;28;01mimport[39;00m [38;5;21;01mxarray[39;00m  [38;5;66;03m# isort: skip[39;00m
[2024-03-07T16:36:33.240Z] [1;32m    264[0m [38;5;28;01mimport[39;00m [38;5;21;01mrioxarray[39;00m  [38;5;66;03m# noqa[39;00m
[2024-03-07T16:36:33.240Z] [0;32m--> 266[0m [38;5;28;01mreturn[39;00m [43mxarray[49m[38;5;241;43m.[39;49m[43mopen_rasterio[49m([38;5;28mself[39m[38;5;241m.[39mfile)
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] [0;31mAttributeError[0m: module 'xarray' has no attribute 'open_rasterio'
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 11 _
[2024-03-07T16:36:33.240Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.240Z] [94mCell 11: Cell execution caused an exception
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] Input:
[2024-03-07T16:36:33.240Z] [0mcrs = ccrs.LambertConformal(
[2024-03-07T16:36:33.240Z]     central_latitude=49, central_longitude=-95, standard_parallels=(49, 77)
[2024-03-07T16:36:33.240Z] )
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] dem.name = "Elevation"
[2024-03-07T16:36:33.240Z] dem.attrs["units"] = "m"
[2024-03-07T16:36:33.240Z] ax = plt.subplot(projection=crs)
[2024-03-07T16:36:33.240Z] dem.where(dem != -32768).sel(band=1).plot.imshow(ax=ax, transform=crs, cmap="gnuplot")
[2024-03-07T16:36:33.240Z] plt.show()
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] [94mTraceback:[0m
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.240Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.240Z] Cell [0;32mIn[1], line 5[0m
[2024-03-07T16:36:33.240Z] [1;32m      1[0m crs [38;5;241m=[39m ccrs[38;5;241m.[39mLambertConformal(
[2024-03-07T16:36:33.240Z] [1;32m      2[0m     central_latitude[38;5;241m=[39m[38;5;241m49[39m, central_longitude[38;5;241m=[39m[38;5;241m-[39m[38;5;241m95[39m, standard_parallels[38;5;241m=[39m([38;5;241m49[39m, [38;5;241m77[39m)
[2024-03-07T16:36:33.240Z] [1;32m      3[0m )
[2024-03-07T16:36:33.240Z] [0;32m----> 5[0m [43mdem[49m[38;5;241m.[39mname [38;5;241m=[39m [38;5;124m"[39m[38;5;124mElevation[39m[38;5;124m"[39m
[2024-03-07T16:36:33.240Z] [1;32m      6[0m dem[38;5;241m.[39mattrs[[38;5;124m"[39m[38;5;124munits[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;124m"[39m[38;5;124mm[39m[38;5;124m"[39m
[2024-03-07T16:36:33.240Z] [1;32m      7[0m ax [38;5;241m=[39m plt[38;5;241m.[39msubplot(projection[38;5;241m=[39mcrs)
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] [0;31mNameError[0m: name 'dem' is not defined
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 13 _
[2024-03-07T16:36:33.240Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.240Z] [94mCell 13: Cell execution caused an exception
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] Input:
[2024-03-07T16:36:33.240Z] [0mall_properties = {**shape_info, **land_use, **terrain}
[2024-03-07T16:36:33.240Z] display(all_properties)
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] [94mTraceback:[0m
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.240Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.240Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.240Z] [0;32m----> 1[0m all_properties [38;5;241m=[39m {[38;5;241m*[39m[38;5;241m*[39mshape_info, [38;5;241m*[39m[38;5;241m*[39m[43mland_use[49m, [38;5;241m*[39m[38;5;241m*[39mterrain}
[2024-03-07T16:36:33.240Z] [1;32m      2[0m display(all_properties)
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] [0;31mNameError[0m: name 'land_use' is not defined
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] ____ RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 7 ____
[2024-03-07T16:36:33.240Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.240Z] [94mCell 7: Cell execution caused an exception
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] Input:
[2024-03-07T16:36:33.240Z] [0mwith xr.set_options(keep_attrs=True):
[2024-03-07T16:36:33.240Z]     # Average the variables
[2024-03-07T16:36:33.240Z]     ERA5_tmin = ERA5_tmin.mean({"latitude", "longitude"})
[2024-03-07T16:36:33.240Z]     ERA5_tmax = ERA5_tmax.mean({"latitude", "longitude"})
[2024-03-07T16:36:33.240Z]     ERA5_pr = ERA5_pr.mean({"latitude", "longitude"})
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z]     # Ensure that the precipitation is non-negative, which can happen with some reanalysis models.
[2024-03-07T16:36:33.240Z]     ERA5_pr[ERA5_pr < 0] = 0
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z]     # Transform them to a dataset such that they can be written with attributes to netcdf
[2024-03-07T16:36:33.240Z]     ERA5_tmin = ERA5_tmin.to_dataset(name="tmin", promote_attrs=True)
[2024-03-07T16:36:33.240Z]     ERA5_tmax = ERA5_tmax.to_dataset(name="tmax", promote_attrs=True)
[2024-03-07T16:36:33.240Z]     ERA5_pr = ERA5_pr.to_dataset(name="pr", promote_attrs=True)
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] [94mTraceback:[0m
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.240Z] [0;31mKeyError[0m                                  Traceback (most recent call last)
[2024-03-07T16:36:33.240Z] Cell [0;32mIn[1], line 8[0m
[2024-03-07T16:36:33.240Z] [1;32m      5[0m ERA5_pr [38;5;241m=[39m ERA5_pr[38;5;241m.[39mmean({[38;5;124m"[39m[38;5;124mlatitude[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mlongitude[39m[38;5;124m"[39m})
[2024-03-07T16:36:33.240Z] [1;32m      7[0m [38;5;66;03m# Ensure that the precipitation is non-negative, which can happen with some reanalysis models.[39;00m
[2024-03-07T16:36:33.240Z] [0;32m----> 8[0m [43mERA5_pr[49m[43m[[49m[43mERA5_pr[49m[43m [49m[38;5;241;43m<[39;49m[43m [49m[38;5;241;43m0[39;49m[43m][49m [38;5;241m=[39m [38;5;241m0[39m
[2024-03-07T16:36:33.240Z] [1;32m     10[0m [38;5;66;03m# Transform them to a dataset such that they can be written with attributes to netcdf[39;00m
[2024-03-07T16:36:33.240Z] [1;32m     11[0m ERA5_tmin [38;5;241m=[39m ERA5_tmin[38;5;241m.[39mto_dataset(name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtmin[39m[38;5;124m"[39m, promote_attrs[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[2024-03-07T16:36:33.240Z] 
[2024-03-07T16:36:33.240Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:856[0m, in [0;36mDataArray.__setitem__[0;34m(self, key, value)[0m
[2024-03-07T16:36:33.240Z] [1;32m    851[0m     [38;5;28mself[39m[38;5;241m.[39mcoords[key] [38;5;241m=[39m value
[2024-03-07T16:36:33.240Z] [1;32m    852[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:36:33.240Z] [1;32m    853[0m     [38;5;66;03m# Coordinates in key, value and self[key] should be consistent.[39;00m
[2024-03-07T16:36:33.240Z] [1;32m    854[0m     [38;5;66;03m# TODO Coordinate consistency in key is checked here, but it[39;00m
[2024-03-07T16:36:33.241Z] [1;32m    855[0m     [38;5;66;03m# causes unnecessary indexing. It should be optimized.[39;00m
[2024-03-07T16:36:33.241Z] [0;32m--> 856[0m     obj [38;5;241m=[39m [38;5;28;43mself[39;49m[43m[[49m[43mkey[49m[43m][49m
[2024-03-07T16:36:33.241Z] [1;32m    857[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(value, DataArray):
[2024-03-07T16:36:33.241Z] [1;32m    858[0m         assert_coordinate_consistent(value, obj[38;5;241m.[39mcoords[38;5;241m.[39mvariables)
[2024-03-07T16:36:33.241Z] 
[2024-03-07T16:36:33.241Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:847[0m, in [0;36mDataArray.__getitem__[0;34m(self, key)[0m
[2024-03-07T16:36:33.241Z] [1;32m    844[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_getitem_coord(key)
[2024-03-07T16:36:33.241Z] [1;32m    845[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:36:33.241Z] [1;32m    846[0m     [38;5;66;03m# xarray-style array indexing[39;00m
[2024-03-07T16:36:33.241Z] [0;32m--> 847[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43misel[49m[43m([49m[43mindexers[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_item_key_to_dict[49m[43m([49m[43mkey[49m[43m)[49m[43m)[49m
[2024-03-07T16:36:33.241Z] 
[2024-03-07T16:36:33.241Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:1445[0m, in [0;36mDataArray.isel[0;34m(self, indexers, drop, missing_dims, **indexers_kwargs)[0m
[2024-03-07T16:36:33.241Z] [1;32m   1442[0m indexers [38;5;241m=[39m either_dict_or_kwargs(indexers, indexers_kwargs, [38;5;124m"[39m[38;5;124misel[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.241Z] [1;32m   1444[0m [38;5;28;01mif[39;00m [38;5;28many[39m(is_fancy_indexer(idx) [38;5;28;01mfor[39;00m idx [38;5;129;01min[39;00m indexers[38;5;241m.[39mvalues()):
[2024-03-07T16:36:33.241Z] [0;32m-> 1445[0m     ds [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_to_temp_dataset[49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43m_isel_fancy[49m[43m([49m
[2024-03-07T16:36:33.241Z] [1;32m   1446[0m [43m        [49m[43mindexers[49m[43m,[49m[43m [49m[43mdrop[49m[38;5;241;43m=[39;49m[43mdrop[49m[43m,[49m[43m [49m[43mmissing_dims[49m[38;5;241;43m=[39;49m[43mmissing_dims[49m
[2024-03-07T16:36:33.241Z] [1;32m   1447[0m [43m    [49m[43m)[49m
[2024-03-07T16:36:33.241Z] [1;32m   1448[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_from_temp_dataset(ds)
[2024-03-07T16:36:33.241Z] [1;32m   1450[0m [38;5;66;03m# Much faster algorithm for when all indexers are ints, slices, one-dimensional[39;00m
[2024-03-07T16:36:33.241Z] [1;32m   1451[0m [38;5;66;03m# lists, or zero or one-dimensional np.ndarray's[39;00m
[2024-03-07T16:36:33.241Z] 
[2024-03-07T16:36:33.241Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataset.py:2930[0m, in [0;36mDataset._isel_fancy[0;34m(self, indexers, drop, missing_dims)[0m
[2024-03-07T16:36:33.241Z] [1;32m   2926[0m var_indexers [38;5;241m=[39m {
[2024-03-07T16:36:33.241Z] [1;32m   2927[0m     k: v [38;5;28;01mfor[39;00m k, v [38;5;129;01min[39;00m valid_indexers[38;5;241m.[39mitems() [38;5;28;01mif[39;00m k [38;5;129;01min[39;00m var[38;5;241m.[39mdims
[2024-03-07T16:36:33.241Z] [1;32m   2928[0m }
[2024-03-07T16:36:33.241Z] [1;32m   2929[0m [38;5;28;01mif[39;00m var_indexers:
[2024-03-07T16:36:33.241Z] [0;32m-> 2930[0m     new_var [38;5;241m=[39m [43mvar[49m[38;5;241;43m.[39;49m[43misel[49m[43m([49m[43mindexers[49m[38;5;241;43m=[39;49m[43mvar_indexers[49m[43m)[49m
[2024-03-07T16:36:33.241Z] [1;32m   2931[0m     [38;5;66;03m# drop scalar coordinates[39;00m
[2024-03-07T16:36:33.241Z] [1;32m   2932[0m     [38;5;66;03m# https://github.com/pydata/xarray/issues/6554[39;00m
[2024-03-07T16:36:33.241Z] [1;32m   2933[0m     [38;5;28;01mif[39;00m name [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mcoords [38;5;129;01mand[39;00m drop [38;5;129;01mand[39;00m new_var[38;5;241m.[39mndim [38;5;241m==[39m [38;5;241m0[39m:
[2024-03-07T16:36:33.241Z] 
[2024-03-07T16:36:33.241Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:1368[0m, in [0;36mVariable.isel[0;34m(self, indexers, missing_dims, **indexers_kwargs)[0m
[2024-03-07T16:36:33.241Z] [1;32m   1365[0m indexers [38;5;241m=[39m drop_dims_from_indexers(indexers, [38;5;28mself[39m[38;5;241m.[39mdims, missing_dims)
[2024-03-07T16:36:33.241Z] [1;32m   1367[0m key [38;5;241m=[39m [38;5;28mtuple[39m(indexers[38;5;241m.[39mget(dim, [38;5;28mslice[39m([38;5;28;01mNone[39;00m)) [38;5;28;01mfor[39;00m dim [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mdims)
[2024-03-07T16:36:33.241Z] [0;32m-> 1368[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m[[49m[43mkey[49m[43m][49m
[2024-03-07T16:36:33.241Z] 
[2024-03-07T16:36:33.241Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:891[0m, in [0;36mVariable.__getitem__[0;34m(self, key)[0m
[2024-03-07T16:36:33.241Z] [1;32m    878[0m [38;5;28;01mdef[39;00m [38;5;21m__getitem__[39m([38;5;28mself[39m: T_Variable, key) [38;5;241m-[39m[38;5;241m>[39m T_Variable:
[2024-03-07T16:36:33.241Z] [1;32m    879[0m [38;5;250m    [39m[38;5;124;03m"""Return a new Variable object whose contents are consistent with[39;00m
[2024-03-07T16:36:33.241Z] [1;32m    880[0m [38;5;124;03m    getting the provided key from the underlying data.[39;00m
[2024-03-07T16:36:33.241Z] [1;32m    881[0m 
[2024-03-07T16:36:33.241Z] [0;32m   (...)[0m
[2024-03-07T16:36:33.241Z] [1;32m    889[0m [38;5;124;03m    array `x.values` directly.[39;00m
[2024-03-07T16:36:33.241Z] [1;32m    890[0m [38;5;124;03m    """[39;00m
[2024-03-07T16:36:33.241Z] [0;32m--> 891[0m     dims, indexer, new_order [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_broadcast_indexes[49m[43m([49m[43mkey[49m[43m)[49m
[2024-03-07T16:36:33.241Z] [1;32m    892[0m     data [38;5;241m=[39m as_indexable([38;5;28mself[39m[38;5;241m.[39m_data)[indexer]
[2024-03-07T16:36:33.241Z] [1;32m    893[0m     [38;5;28;01mif[39;00m new_order:
[2024-03-07T16:36:33.241Z] 
[2024-03-07T16:36:33.241Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:724[0m, in [0;36mVariable._broadcast_indexes[0;34m(self, key)[0m
[2024-03-07T16:36:33.241Z] [1;32m    721[0m [38;5;28;01mif[39;00m [38;5;28mall[39m([38;5;28misinstance[39m(k, BASIC_INDEXING_TYPES) [38;5;28;01mfor[39;00m k [38;5;129;01min[39;00m key):
[2024-03-07T16:36:33.241Z] [1;32m    722[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_broadcast_indexes_basic(key)
[2024-03-07T16:36:33.241Z] [0;32m--> 724[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_indexers[49m[43m([49m[43mkey[49m[43m)[49m
[2024-03-07T16:36:33.241Z] [1;32m    725[0m [38;5;66;03m# Detect it can be mapped as an outer indexer[39;00m
[2024-03-07T16:36:33.241Z] [1;32m    726[0m [38;5;66;03m# If all key is unlabeled, or[39;00m
[2024-03-07T16:36:33.241Z] [1;32m    727[0m [38;5;66;03m# key can be mapped as an OuterIndexer.[39;00m
[2024-03-07T16:36:33.241Z] [1;32m    728[0m [38;5;28;01mif[39;00m [38;5;28mall[39m([38;5;129;01mnot[39;00m [38;5;28misinstance[39m(k, Variable) [38;5;28;01mfor[39;00m k [38;5;129;01min[39;00m key):
[2024-03-07T16:36:33.241Z] 
[2024-03-07T16:36:33.241Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:776[0m, in [0;36mVariable._validate_indexers[0;34m(self, key)[0m
[2024-03-07T16:36:33.241Z] [1;32m    771[0m     [38;5;28;01mraise[39;00m [38;5;167;01mIndexError[39;00m(
[2024-03-07T16:36:33.241Z] [1;32m    772[0m         [38;5;124m"[39m[38;5;132;01m{}[39;00m[38;5;124m-dimensional boolean indexing is [39m[38;5;124m"[39m
[2024-03-07T16:36:33.241Z] [1;32m    773[0m         [38;5;124m"[39m[38;5;124mnot supported. [39m[38;5;124m"[39m[38;5;241m.[39mformat(k[38;5;241m.[39mndim)
[2024-03-07T16:36:33.241Z] [1;32m    774[0m     )
[2024-03-07T16:36:33.241Z] [1;32m    775[0m [38;5;28;01mif[39;00m is_duck_dask_array(k[38;5;241m.[39mdata):
[2024-03-07T16:36:33.241Z] [0;32m--> 776[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(
[2024-03-07T16:36:33.241Z] [1;32m    777[0m         [38;5;124m"[39m[38;5;124mIndexing with a boolean dask array is not allowed. [39m[38;5;124m"[39m
[2024-03-07T16:36:33.242Z] [1;32m    778[0m         [38;5;124m"[39m[38;5;124mThis will result in a dask array of unknown shape. [39m[38;5;124m"[39m
[2024-03-07T16:36:33.242Z] [1;32m    779[0m         [38;5;124m"[39m[38;5;124mSuch arrays are unsupported by Xarray.[39m[38;5;124m"[39m
[2024-03-07T16:36:33.242Z] [1;32m    780[0m         [38;5;124m"[39m[38;5;124mPlease compute the indexer first using .compute()[39m[38;5;124m"[39m
[2024-03-07T16:36:33.242Z] [1;32m    781[0m     )
[2024-03-07T16:36:33.242Z] [1;32m    782[0m [38;5;28;01mif[39;00m [38;5;28mgetattr[39m(k, [38;5;124m"[39m[38;5;124mdims[39m[38;5;124m"[39m, (dim,)) [38;5;241m!=[39m (dim,):
[2024-03-07T16:36:33.242Z] [1;32m    783[0m     [38;5;28;01mraise[39;00m [38;5;167;01mIndexError[39;00m(
[2024-03-07T16:36:33.242Z] [1;32m    784[0m         [38;5;124m"[39m[38;5;124mBoolean indexer should be unlabeled or on the [39m[38;5;124m"[39m
[2024-03-07T16:36:33.242Z] [1;32m    785[0m         [38;5;124m"[39m[38;5;124msame dimension to the indexed array. Indexer is [39m[38;5;124m"[39m
[2024-03-07T16:36:33.242Z] [0;32m   (...)[0m
[2024-03-07T16:36:33.242Z] [1;32m    788[0m         )
[2024-03-07T16:36:33.242Z] [1;32m    789[0m     )
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] [0;31mKeyError[0m: 'Indexing with a boolean dask array is not allowed. This will result in a dask array of unknown shape. Such arrays are unsupported by Xarray.Please compute the indexer first using .compute()'
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] ____ RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 8 ____
[2024-03-07T16:36:33.242Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.242Z] [94mCell 8: Cell execution caused an exception
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] Input:
[2024-03-07T16:36:33.242Z] [0m# Check and see if the precipitation makes sense:
[2024-03-07T16:36:33.242Z] ERA5_pr.pr.plot()
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] [94mTraceback:[0m
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.242Z] [0;31mAttributeError[0m                            Traceback (most recent call last)
[2024-03-07T16:36:33.242Z] Cell [0;32mIn[1], line 2[0m
[2024-03-07T16:36:33.242Z] [1;32m      1[0m [38;5;66;03m# Check and see if the precipitation makes sense:[39;00m
[2024-03-07T16:36:33.242Z] [0;32m----> 2[0m [43mERA5_pr[49m[38;5;241;43m.[39;49m[43mpr[49m[38;5;241m.[39mplot()
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/common.py:277[0m, in [0;36mAttrAccessMixin.__getattr__[0;34m(self, name)[0m
[2024-03-07T16:36:33.242Z] [1;32m    275[0m         [38;5;28;01mwith[39;00m suppress([38;5;167;01mKeyError[39;00m):
[2024-03-07T16:36:33.242Z] [1;32m    276[0m             [38;5;28;01mreturn[39;00m source[name]
[2024-03-07T16:36:33.242Z] [0;32m--> 277[0m [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(
[2024-03-07T16:36:33.242Z] [1;32m    278[0m     [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m[38;5;28mtype[39m([38;5;28mself[39m)[38;5;241m.[39m[38;5;18m__name__[39m[38;5;132;01m!r}[39;00m[38;5;124m object has no attribute [39m[38;5;132;01m{[39;00mname[38;5;132;01m!r}[39;00m[38;5;124m"[39m
[2024-03-07T16:36:33.242Z] [1;32m    279[0m )
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] [0;31mAttributeError[0m: 'DataArray' object has no attribute 'pr'
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] ___ RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 10 ____
[2024-03-07T16:36:33.242Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.242Z] [94mCell 10: Cell execution caused an exception
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] Input:
[2024-03-07T16:36:33.242Z] [0m# Option 2, which is recommended, in which we prepare a single file that merges all three variables into one netcdf file:
[2024-03-07T16:36:33.242Z] with xr.set_options(keep_attrs=True):
[2024-03-07T16:36:33.242Z]     xr.merge([ERA5_tmin, ERA5_tmax, ERA5_pr]).to_netcdf(tmp / "ERA5_weather_data.nc")
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] [94mTraceback:[0m
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.242Z] [0;31mMergeError[0m                                Traceback (most recent call last)
[2024-03-07T16:36:33.242Z] Cell [0;32mIn[1], line 3[0m
[2024-03-07T16:36:33.242Z] [1;32m      1[0m [38;5;66;03m# Option 2, which is recommended, in which we prepare a single file that merges all three variables into one netcdf file:[39;00m
[2024-03-07T16:36:33.242Z] [1;32m      2[0m [38;5;28;01mwith[39;00m xr[38;5;241m.[39mset_options(keep_attrs[38;5;241m=[39m[38;5;28;01mTrue[39;00m):
[2024-03-07T16:36:33.242Z] [0;32m----> 3[0m     [43mxr[49m[38;5;241;43m.[39;49m[43mmerge[49m[43m([49m[43m[[49m[43mERA5_tmin[49m[43m,[49m[43m [49m[43mERA5_tmax[49m[43m,[49m[43m [49m[43mERA5_pr[49m[43m][49m[43m)[49m[38;5;241m.[39mto_netcdf(tmp [38;5;241m/[39m [38;5;124m"[39m[38;5;124mERA5_weather_data.nc[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/merge.py:992[0m, in [0;36mmerge[0;34m(objects, compat, join, fill_value, combine_attrs)[0m
[2024-03-07T16:36:33.242Z] [1;32m    989[0m         obj [38;5;241m=[39m obj[38;5;241m.[39mto_dataset()
[2024-03-07T16:36:33.242Z] [1;32m    990[0m     dict_like_objects[38;5;241m.[39mappend(obj)
[2024-03-07T16:36:33.242Z] [0;32m--> 992[0m merge_result [38;5;241m=[39m [43mmerge_core[49m[43m([49m
[2024-03-07T16:36:33.242Z] [1;32m    993[0m [43m    [49m[43mdict_like_objects[49m[43m,[49m
[2024-03-07T16:36:33.242Z] [1;32m    994[0m [43m    [49m[43mcompat[49m[43m,[49m
[2024-03-07T16:36:33.242Z] [1;32m    995[0m [43m    [49m[43mjoin[49m[43m,[49m
[2024-03-07T16:36:33.242Z] [1;32m    996[0m [43m    [49m[43mcombine_attrs[49m[38;5;241;43m=[39;49m[43mcombine_attrs[49m[43m,[49m
[2024-03-07T16:36:33.242Z] [1;32m    997[0m [43m    [49m[43mfill_value[49m[38;5;241;43m=[39;49m[43mfill_value[49m[43m,[49m
[2024-03-07T16:36:33.242Z] [1;32m    998[0m [43m[49m[43m)[49m
[2024-03-07T16:36:33.242Z] [1;32m    999[0m [38;5;28;01mreturn[39;00m Dataset[38;5;241m.[39m_construct_direct([38;5;241m*[39m[38;5;241m*[39mmerge_result[38;5;241m.[39m_asdict())
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/merge.py:719[0m, in [0;36mmerge_core[0;34m(objects, compat, join, combine_attrs, priority_arg, explicit_coords, indexes, fill_value, skip_align_args)[0m
[2024-03-07T16:36:33.242Z] [1;32m    717[0m collected [38;5;241m=[39m collect_variables_and_indexes(aligned, indexes[38;5;241m=[39mindexes)
[2024-03-07T16:36:33.242Z] [1;32m    718[0m prioritized [38;5;241m=[39m _get_priority_vars_and_indexes(aligned, priority_arg, compat[38;5;241m=[39mcompat)
[2024-03-07T16:36:33.242Z] [0;32m--> 719[0m variables, out_indexes [38;5;241m=[39m [43mmerge_collected[49m[43m([49m
[2024-03-07T16:36:33.242Z] [1;32m    720[0m [43m    [49m[43mcollected[49m[43m,[49m[43m [49m[43mprioritized[49m[43m,[49m[43m [49m[43mcompat[49m[38;5;241;43m=[39;49m[43mcompat[49m[43m,[49m[43m [49m[43mcombine_attrs[49m[38;5;241;43m=[39;49m[43mcombine_attrs[49m
[2024-03-07T16:36:33.242Z] [1;32m    721[0m [43m[49m[43m)[49m
[2024-03-07T16:36:33.242Z] [1;32m    723[0m dims [38;5;241m=[39m calculate_dimensions(variables)
[2024-03-07T16:36:33.242Z] [1;32m    725[0m coord_names, noncoord_names [38;5;241m=[39m determine_coords(coerced)
[2024-03-07T16:36:33.242Z] 
[2024-03-07T16:36:33.242Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/merge.py:290[0m, in [0;36mmerge_collected[0;34m(grouped, prioritized, compat, combine_attrs, equals)[0m
[2024-03-07T16:36:33.242Z] [1;32m    288[0m variables [38;5;241m=[39m [variable [38;5;28;01mfor[39;00m variable, _ [38;5;129;01min[39;00m elements_list]
[2024-03-07T16:36:33.242Z] [1;32m    289[0m [38;5;28;01mtry[39;00m:
[2024-03-07T16:36:33.242Z] [0;32m--> 290[0m     merged_vars[name] [38;5;241m=[39m [43munique_variable[49m[43m([49m
[2024-03-07T16:36:33.242Z] [1;32m    291[0m [43m        [49m[43mname[49m[43m,[49m[43m [49m[43mvariables[49m[43m,[49m[43m [49m[43mcompat[49m[43m,[49m[43m [49m[43mequals[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43mname[49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m
[2024-03-07T16:36:33.242Z] [1;32m    292[0m [43m    [49m[43m)[49m
[2024-03-07T16:36:33.243Z] [1;32m    293[0m [38;5;28;01mexcept[39;00m MergeError:
[2024-03-07T16:36:33.243Z] [1;32m    294[0m     [38;5;28;01mif[39;00m compat [38;5;241m!=[39m [38;5;124m"[39m[38;5;124mminimal[39m[38;5;124m"[39m:
[2024-03-07T16:36:33.243Z] [1;32m    295[0m         [38;5;66;03m# we need more than "minimal" compatibility (for which[39;00m
[2024-03-07T16:36:33.243Z] [1;32m    296[0m         [38;5;66;03m# we drop conflicting coordinates)[39;00m
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/merge.py:144[0m, in [0;36munique_variable[0;34m(name, variables, compat, equals)[0m
[2024-03-07T16:36:33.243Z] [1;32m    141[0m                 [38;5;28;01mbreak[39;00m
[2024-03-07T16:36:33.243Z] [1;32m    143[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m equals:
[2024-03-07T16:36:33.243Z] [0;32m--> 144[0m     [38;5;28;01mraise[39;00m MergeError(
[2024-03-07T16:36:33.243Z] [1;32m    145[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mconflicting values for variable [39m[38;5;132;01m{[39;00mname[38;5;132;01m!r}[39;00m[38;5;124m on objects to be combined. [39m[38;5;124m"[39m
[2024-03-07T16:36:33.243Z] [1;32m    146[0m         [38;5;124m"[39m[38;5;124mYou can skip this check by specifying compat=[39m[38;5;124m'[39m[38;5;124moverride[39m[38;5;124m'[39m[38;5;124m.[39m[38;5;124m"[39m
[2024-03-07T16:36:33.243Z] [1;32m    147[0m     )
[2024-03-07T16:36:33.243Z] [1;32m    149[0m [38;5;28;01mif[39;00m combine_method:
[2024-03-07T16:36:33.243Z] [1;32m    150[0m     [38;5;28;01mfor[39;00m var [38;5;129;01min[39;00m variables[[38;5;241m1[39m:]:
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] [0;31mMergeError[0m: conflicting values for variable 't2m' on objects to be combined. You can skip this check by specifying compat='override'.
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 5 _
[2024-03-07T16:36:33.243Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.243Z] [94mCell 5: Cell execution caused an exception
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] Input:
[2024-03-07T16:36:33.243Z] [0m# If we want to import our own raven configuration files and forcing data, we can do so by importing them
[2024-03-07T16:36:33.243Z] # using the ravenpy.run  method. This will run the model exactly as the users will have designed it.
[2024-03-07T16:36:33.243Z] from ravenpy import OutputReader
[2024-03-07T16:36:33.243Z] from ravenpy.ravenpy import run
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] # This is used to specify the raven configuration files prefixes. In this case, we will retake the previously created files
[2024-03-07T16:36:33.243Z] run_name = run_name
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] # This is the path where the files were uploaded by the user. Model outputs will also be placed there in a
[2024-03-07T16:36:33.243Z] # subfolder called "outputs"
[2024-03-07T16:36:33.243Z] configdir = workdir
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] # Run the model and get the path to the outputs folder that can be used in the output reader.
[2024-03-07T16:36:33.243Z] outputs_path = run(modelname=run_name, configdir=configdir)
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] # Get the outputs using the Output Reader object.
[2024-03-07T16:36:33.243Z] outputs = OutputReader(run_name=run_name, path=outputs_path)
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] [94mTraceback:[0m
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.243Z] [0;31mRavenError[0m                                Traceback (most recent call last)
[2024-03-07T16:36:33.243Z] Cell [0;32mIn[1], line 14[0m
[2024-03-07T16:36:33.243Z] [1;32m     11[0m configdir [38;5;241m=[39m workdir
[2024-03-07T16:36:33.243Z] [1;32m     13[0m [38;5;66;03m# Run the model and get the path to the outputs folder that can be used in the output reader.[39;00m
[2024-03-07T16:36:33.243Z] [0;32m---> 14[0m outputs_path [38;5;241m=[39m [43mrun[49m[43m([49m[43mmodelname[49m[38;5;241;43m=[39;49m[43mrun_name[49m[43m,[49m[43m [49m[43mconfigdir[49m[38;5;241;43m=[39;49m[43mconfigdir[49m[43m)[49m
[2024-03-07T16:36:33.243Z] [1;32m     16[0m [38;5;66;03m# Get the outputs using the Output Reader object.[39;00m
[2024-03-07T16:36:33.243Z] [1;32m     17[0m outputs [38;5;241m=[39m OutputReader(run_name[38;5;241m=[39mrun_name, path[38;5;241m=[39moutputs_path)
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/ravenpy/ravenpy.py:323[0m, in [0;36mrun[0;34m(modelname, configdir, outputdir, overwrite, verbose)[0m
[2024-03-07T16:36:33.243Z] [1;32m    320[0m         warn(msg, category[38;5;241m=[39mRavenWarning)
[2024-03-07T16:36:33.243Z] [1;32m    322[0m [38;5;28;01mif[39;00m messages[[38;5;124m"[39m[38;5;124mERROR[39m[38;5;124m"[39m]:
[2024-03-07T16:36:33.243Z] [0;32m--> 323[0m     [38;5;28;01mraise[39;00m RavenError(
[2024-03-07T16:36:33.243Z] [1;32m    324[0m         [38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m[38;5;241m.[39mjoin([[38;5;124mf[39m[38;5;124m"[39m[38;5;124mConfig directory: [39m[38;5;132;01m{[39;00mconfigdir[38;5;132;01m}[39;00m[38;5;124m"[39m] [38;5;241m+[39m messages[[38;5;124m"[39m[38;5;124mERROR[39m[38;5;124m"[39m])
[2024-03-07T16:36:33.243Z] [1;32m    325[0m     )
[2024-03-07T16:36:33.243Z] [1;32m    327[0m [38;5;28;01mif[39;00m returncode [38;5;241m!=[39m [38;5;241m0[39m:
[2024-03-07T16:36:33.243Z] [1;32m    328[0m     [38;5;28;01mraise[39;00m [38;5;167;01mOSError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mRaven segfaulted : [39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00mstdout[38;5;132;01m}[39;00m[38;5;124m"[39m)
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] [0;31mRavenError[0m: Config directory: /tmp/NB4bks_mu30
[2024-03-07T16:36:33.243Z] :CustomOutput command: Unrecognized custom output temporal aggregation method
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 6 _
[2024-03-07T16:36:33.243Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.243Z] [94mCell 6: Cell execution caused an exception
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] Input:
[2024-03-07T16:36:33.243Z] [0m# If we already have a model configuration that we built in-memory (such as the "m" GR4JCN model we built above),
[2024-03-07T16:36:33.243Z] # then we can use the Emulator object to simply emulate the model we were working on and get outputs directly
[2024-03-07T16:36:33.243Z] from ravenpy import Emulator
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] # Prepare the emulator by writing files on disk
[2024-03-07T16:36:33.243Z] e = Emulator(config=m)
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] # Run the model and get the outputs.
[2024-03-07T16:36:33.243Z] outputs = e.run()
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] [94mTraceback:[0m
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.243Z] [0;31mRavenError[0m                                Traceback (most recent call last)
[2024-03-07T16:36:33.243Z] Cell [0;32mIn[1], line 9[0m
[2024-03-07T16:36:33.243Z] [1;32m      6[0m e [38;5;241m=[39m Emulator(config[38;5;241m=[39mm)
[2024-03-07T16:36:33.243Z] [1;32m      8[0m [38;5;66;03m# Run the model and get the outputs.[39;00m
[2024-03-07T16:36:33.243Z] [0;32m----> 9[0m outputs [38;5;241m=[39m [43me[49m[38;5;241;43m.[39;49m[43mrun[49m[43m([49m[43m)[49m
[2024-03-07T16:36:33.243Z] 
[2024-03-07T16:36:33.243Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/ravenpy/ravenpy.py:68[0m, in [0;36mEmulator.run[0;34m(self, overwrite)[0m
[2024-03-07T16:36:33.243Z] [1;32m     64[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m ([38;5;28mself[39m[38;5;241m.[39mworkdir [38;5;241m/[39m [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m[38;5;28mself[39m[38;5;241m.[39mmodelname[38;5;132;01m}[39;00m[38;5;124m.rvi[39m[38;5;124m"[39m)[38;5;241m.[39mexists():
[2024-03-07T16:36:33.243Z] [1;32m     65[0m     [38;5;66;03m# FIXME: No attribute 'write_rv' on Emulator [attribute-error][39;00m
[2024-03-07T16:36:33.243Z] [1;32m     66[0m     [38;5;28mself[39m[38;5;241m.[39mwrite_rv(overwrite[38;5;241m=[39moverwrite)
[2024-03-07T16:36:33.243Z] [0;32m---> 68[0m [38;5;28mself[39m[38;5;241m.[39m_output_path [38;5;241m=[39m [43mrun[49m[43m([49m
[2024-03-07T16:36:33.244Z] [1;32m     69[0m [43m    [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mmodelname[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mworkdir[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43moutput[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43moverwrite[49m[38;5;241;43m=[39;49m[43moverwrite[49m
[2024-03-07T16:36:33.244Z] [1;32m     70[0m [43m[49m[43m)[49m
[2024-03-07T16:36:33.244Z] [1;32m     71[0m [38;5;28mself[39m[38;5;241m.[39m_output [38;5;241m=[39m OutputReader([38;5;28mself[39m[38;5;241m.[39mconfig[38;5;241m.[39mrun_name, path[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_output_path)
[2024-03-07T16:36:33.244Z] [1;32m     72[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_output
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/ravenpy/ravenpy.py:323[0m, in [0;36mrun[0;34m(modelname, configdir, outputdir, overwrite, verbose)[0m
[2024-03-07T16:36:33.244Z] [1;32m    320[0m         warn(msg, category[38;5;241m=[39mRavenWarning)
[2024-03-07T16:36:33.244Z] [1;32m    322[0m [38;5;28;01mif[39;00m messages[[38;5;124m"[39m[38;5;124mERROR[39m[38;5;124m"[39m]:
[2024-03-07T16:36:33.244Z] [0;32m--> 323[0m     [38;5;28;01mraise[39;00m RavenError(
[2024-03-07T16:36:33.244Z] [1;32m    324[0m         [38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m[38;5;241m.[39mjoin([[38;5;124mf[39m[38;5;124m"[39m[38;5;124mConfig directory: [39m[38;5;132;01m{[39;00mconfigdir[38;5;132;01m}[39;00m[38;5;124m"[39m] [38;5;241m+[39m messages[[38;5;124m"[39m[38;5;124mERROR[39m[38;5;124m"[39m])
[2024-03-07T16:36:33.244Z] [1;32m    325[0m     )
[2024-03-07T16:36:33.244Z] [1;32m    327[0m [38;5;28;01mif[39;00m returncode [38;5;241m!=[39m [38;5;241m0[39m:
[2024-03-07T16:36:33.244Z] [1;32m    328[0m     [38;5;28;01mraise[39;00m [38;5;167;01mOSError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mRaven segfaulted : [39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00mstdout[38;5;132;01m}[39;00m[38;5;124m"[39m)
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [0;31mRavenError[0m: Config directory: /tmp/tmpdnqk_sqj
[2024-03-07T16:36:33.244Z] :CustomOutput command: Unrecognized custom output temporal aggregation method
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 7 _
[2024-03-07T16:36:33.244Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.244Z] [94mCell 7: Cell execution caused an exception
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] Input:
[2024-03-07T16:36:33.244Z] [0m# Show the files available in the outputs. Each of these can be accessed to get information about the simulation.
[2024-03-07T16:36:33.244Z] outputs.files
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [94mTraceback:[0m
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.244Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.244Z] Cell [0;32mIn[1], line 2[0m
[2024-03-07T16:36:33.244Z] [1;32m      1[0m [38;5;66;03m# Show the files available in the outputs. Each of these can be accessed to get information about the simulation.[39;00m
[2024-03-07T16:36:33.244Z] [0;32m----> 2[0m [43moutputs[49m[38;5;241m.[39mfiles
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 8 _
[2024-03-07T16:36:33.244Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.244Z] [94mCell 8: Cell execution caused an exception
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] Input:
[2024-03-07T16:36:33.244Z] [0m# The model outputs are actually already loaded as Python objects in memory, thus we can access the data directly.
[2024-03-07T16:36:33.244Z] print("----------------HYDROGRAPH----------------")
[2024-03-07T16:36:33.244Z] display(outputs.hydrograph)
[2024-03-07T16:36:33.244Z] print("")
[2024-03-07T16:36:33.244Z] print("-----------------STORAGE------------------")
[2024-03-07T16:36:33.244Z] display(outputs.storage)
[2024-03-07T16:36:33.244Z] print("")
[2024-03-07T16:36:33.244Z] print("-----------------SOLUTION-----------------")
[2024-03-07T16:36:33.244Z] display(outputs.solution)
[2024-03-07T16:36:33.244Z] print("")
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [94mTraceback:[0m
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.244Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.244Z] Cell [0;32mIn[1], line 3[0m
[2024-03-07T16:36:33.244Z] [1;32m      1[0m [38;5;66;03m# The model outputs are actually already loaded as Python objects in memory, thus we can access the data directly.[39;00m
[2024-03-07T16:36:33.244Z] [1;32m      2[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124m----------------HYDROGRAPH----------------[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.244Z] [0;32m----> 3[0m display([43moutputs[49m[38;5;241m.[39mhydrograph)
[2024-03-07T16:36:33.244Z] [1;32m      4[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.244Z] [1;32m      5[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124m-----------------STORAGE------------------[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 9 _
[2024-03-07T16:36:33.244Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.244Z] [94mCell 9: Cell execution caused an exception
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] Input:
[2024-03-07T16:36:33.244Z] [0m# Import the graphing utility built to handle Raven model outputs
[2024-03-07T16:36:33.244Z] from ravenpy.utilities.nb_graphs import hydrographs
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] hydrograph_objects = outputs.hydrograph
[2024-03-07T16:36:33.244Z] hydrographs(hydrograph_objects)
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [94mTraceback:[0m
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.244Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.244Z] Cell [0;32mIn[1], line 4[0m
[2024-03-07T16:36:33.244Z] [1;32m      1[0m [38;5;66;03m# Import the graphing utility built to handle Raven model outputs[39;00m
[2024-03-07T16:36:33.244Z] [1;32m      2[0m [38;5;28;01mfrom[39;00m [38;5;21;01mravenpy[39;00m[38;5;21;01m.[39;00m[38;5;21;01mutilities[39;00m[38;5;21;01m.[39;00m[38;5;21;01mnb_graphs[39;00m [38;5;28;01mimport[39;00m hydrographs
[2024-03-07T16:36:33.244Z] [0;32m----> 4[0m hydrograph_objects [38;5;241m=[39m [43moutputs[49m[38;5;241m.[39mhydrograph
[2024-03-07T16:36:33.244Z] [1;32m      5[0m hydrographs(hydrograph_objects)
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 10 _
[2024-03-07T16:36:33.244Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.244Z] [94mCell 10: Cell execution caused an exception
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] Input:
[2024-03-07T16:36:33.244Z] [0moutputs.hydrograph.q_sim.plot()
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [94mTraceback:[0m
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.244Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.244Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.244Z] [0;32m----> 1[0m [43moutputs[49m[38;5;241m.[39mhydrograph[38;5;241m.[39mq_sim[38;5;241m.[39mplot()
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 11 _
[2024-03-07T16:36:33.244Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.244Z] [94mCell 11: Cell execution caused an exception
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] Input:
[2024-03-07T16:36:33.244Z] [0mprint(list(outputs.storage.keys()))
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [94mTraceback:[0m
[2024-03-07T16:36:33.244Z] 
[2024-03-07T16:36:33.244Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.245Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.245Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.245Z] [0;32m----> 1[0m [38;5;28mprint[39m([38;5;28mlist[39m([43moutputs[49m[38;5;241m.[39mstorage[38;5;241m.[39mkeys()))
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 12 _
[2024-03-07T16:36:33.245Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.245Z] [94mCell 12: Cell execution caused an exception
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] Input:
[2024-03-07T16:36:33.245Z] [0m# Plot the "Snow" variable
[2024-03-07T16:36:33.245Z] outputs.storage["Snow"].plot()
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] [94mTraceback:[0m
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.245Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.245Z] Cell [0;32mIn[1], line 2[0m
[2024-03-07T16:36:33.245Z] [1;32m      1[0m [38;5;66;03m# Plot the "Snow" variable[39;00m
[2024-03-07T16:36:33.245Z] [0;32m----> 2[0m [43moutputs[49m[38;5;241m.[39mstorage[[38;5;124m"[39m[38;5;124mSnow[39m[38;5;124m"[39m][38;5;241m.[39mplot()
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] ______ RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 0 ______
[2024-03-07T16:36:33.245Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.245Z] [94mCell 0: Cell execution caused an exception
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] Input:
[2024-03-07T16:36:33.245Z] [0mimport os
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] from hsclient import HydroShare, Token
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] # Authentication method using username and password
[2024-03-07T16:36:33.245Z] """
[2024-03-07T16:36:33.245Z] username = 'XXXXX'
[2024-03-07T16:36:33.245Z] password = 'XXXXX'
[2024-03-07T16:36:33.245Z] hs = HydroShare(username=username, password=password)
[2024-03-07T16:36:33.245Z] """
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] client_id = os.environ.get("HYDROSHARE_AUTH_CLIENT_ID", "<your_client_id>")
[2024-03-07T16:36:33.245Z] access_token = os.environ.get("HYDROSHARE_AUTH_TOKEN", "<your_auth_token>")
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] token = Token(access_token=access_token, token_type="bearer")
[2024-03-07T16:36:33.245Z] hs = HydroShare(client_id=client_id, token=token)
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] [94mTraceback:[0m
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.245Z] [0;31mPydanticUserError[0m                         Traceback (most recent call last)
[2024-03-07T16:36:33.245Z] Cell [0;32mIn[1], line 3[0m
[2024-03-07T16:36:33.245Z] [1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[2024-03-07T16:36:33.245Z] [0;32m----> 3[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsclient[39;00m [38;5;28;01mimport[39;00m HydroShare, Token
[2024-03-07T16:36:33.245Z] [1;32m      5[0m [38;5;66;03m# Authentication method using username and password[39;00m
[2024-03-07T16:36:33.245Z] [1;32m      6[0m [38;5;124;03m"""[39;00m
[2024-03-07T16:36:33.245Z] [1;32m      7[0m [38;5;124;03musername = 'XXXXX'[39;00m
[2024-03-07T16:36:33.245Z] [1;32m      8[0m [38;5;124;03mpassword = 'XXXXX'[39;00m
[2024-03-07T16:36:33.245Z] [1;32m      9[0m [38;5;124;03mhs = HydroShare(username=username, password=password)[39;00m
[2024-03-07T16:36:33.245Z] [1;32m     10[0m [38;5;124;03m"""[39;00m
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/hsclient/__init__.py:1[0m
[2024-03-07T16:36:33.245Z] [0;32m----> 1[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsclient[39;00m[38;5;21;01m.[39;00m[38;5;21;01mhydroshare[39;00m [38;5;28;01mimport[39;00m (
[2024-03-07T16:36:33.245Z] [1;32m      2[0m     Aggregation,
[2024-03-07T16:36:33.245Z] [1;32m      3[0m     File,
[2024-03-07T16:36:33.245Z] [1;32m      4[0m     HydroShare,
[2024-03-07T16:36:33.245Z] [1;32m      5[0m     Resource,
[2024-03-07T16:36:33.245Z] [1;32m      6[0m     NetCDFAggregation,
[2024-03-07T16:36:33.245Z] [1;32m      7[0m     TimeseriesAggregation,
[2024-03-07T16:36:33.245Z] [1;32m      8[0m     GeoRasterAggregation,
[2024-03-07T16:36:33.245Z] [1;32m      9[0m     GeoFeatureAggregation,
[2024-03-07T16:36:33.245Z] [1;32m     10[0m )
[2024-03-07T16:36:33.245Z] [1;32m     11[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsclient[39;00m[38;5;21;01m.[39;00m[38;5;21;01moauth2_model[39;00m [38;5;28;01mimport[39;00m Token
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/hsclient/hydroshare.py:46[0m
[2024-03-07T16:36:33.245Z] [1;32m     42[0m         xarray [38;5;241m=[39m [38;5;28;01mNone[39;00m
[2024-03-07T16:36:33.245Z] [1;32m     44[0m [38;5;28;01mimport[39;00m [38;5;21;01mrequests[39;00m
[2024-03-07T16:36:33.245Z] [0;32m---> 46[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mschemas[39;00m [38;5;28;01mimport[39;00m load_rdf, rdf_string
[2024-03-07T16:36:33.245Z] [1;32m     47[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mschemas[39;00m[38;5;21;01m.[39;00m[38;5;21;01mbase_models[39;00m [38;5;28;01mimport[39;00m BaseMetadata
[2024-03-07T16:36:33.245Z] [1;32m     48[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mschemas[39;00m[38;5;21;01m.[39;00m[38;5;21;01menums[39;00m [38;5;28;01mimport[39;00m AggregationType
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/hsmodels/schemas/__init__.py:8[0m
[2024-03-07T16:36:33.245Z] [1;32m      5[0m [38;5;28;01mfrom[39;00m [38;5;21;01mrdflib[39;00m [38;5;28;01mimport[39;00m Graph, Literal, URIRef
[2024-03-07T16:36:33.245Z] [1;32m      7[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mnamespaces[39;00m [38;5;28;01mimport[39;00m DC, HSTERMS, ORE, RDF, RDFS1
[2024-03-07T16:36:33.245Z] [0;32m----> 8[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mschemas[39;00m[38;5;21;01m.[39;00m[38;5;21;01maggregations[39;00m [38;5;28;01mimport[39;00m (
[2024-03-07T16:36:33.245Z] [1;32m      9[0m     FileSetMetadata,
[2024-03-07T16:36:33.245Z] [1;32m     10[0m     GeographicFeatureMetadata,
[2024-03-07T16:36:33.245Z] [1;32m     11[0m     GeographicRasterMetadata,
[2024-03-07T16:36:33.245Z] [1;32m     12[0m     ModelInstanceMetadata,
[2024-03-07T16:36:33.245Z] [1;32m     13[0m     ModelProgramMetadata,
[2024-03-07T16:36:33.245Z] [1;32m     14[0m     MultidimensionalMetadata,
[2024-03-07T16:36:33.245Z] [1;32m     15[0m     ReferencedTimeSeriesMetadata,
[2024-03-07T16:36:33.245Z] [1;32m     16[0m     SingleFileMetadata,
[2024-03-07T16:36:33.245Z] [1;32m     17[0m     TimeSeriesMetadata,
[2024-03-07T16:36:33.245Z] [1;32m     18[0m )
[2024-03-07T16:36:33.245Z] [1;32m     19[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mschemas[39;00m[38;5;21;01m.[39;00m[38;5;21;01menums[39;00m [38;5;28;01mimport[39;00m TermEnum
[2024-03-07T16:36:33.245Z] [1;32m     20[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mschemas[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrdf[39;00m[38;5;21;01m.[39;00m[38;5;21;01maggregations[39;00m [38;5;28;01mimport[39;00m (
[2024-03-07T16:36:33.245Z] [1;32m     21[0m     FileSetMetadataInRDF,
[2024-03-07T16:36:33.245Z] [1;32m     22[0m     GeographicFeatureMetadataInRDF,
[2024-03-07T16:36:33.245Z] [0;32m   (...)[0m
[2024-03-07T16:36:33.245Z] [1;32m     29[0m     TimeSeriesMetadataInRDF,
[2024-03-07T16:36:33.245Z] [1;32m     30[0m )
[2024-03-07T16:36:33.245Z] 
[2024-03-07T16:36:33.245Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/hsmodels/schemas/aggregations.py:8[0m
[2024-03-07T16:36:33.245Z] [1;32m      6[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mschemas[39;00m[38;5;21;01m.[39;00m[38;5;21;01mbase_models[39;00m [38;5;28;01mimport[39;00m BaseMetadata
[2024-03-07T16:36:33.245Z] [1;32m      7[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mschemas[39;00m[38;5;21;01m.[39;00m[38;5;21;01menums[39;00m [38;5;28;01mimport[39;00m AggregationType
[2024-03-07T16:36:33.245Z] [0;32m----> 8[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mschemas[39;00m[38;5;21;01m.[39;00m[38;5;21;01mfields[39;00m [38;5;28;01mimport[39;00m (
[2024-03-07T16:36:33.245Z] [1;32m      9[0m     BandInformation,
[2024-03-07T16:36:33.245Z] [1;32m     10[0m     BoxCoverage,
[2024-03-07T16:36:33.246Z] [1;32m     11[0m     BoxSpatialReference,
[2024-03-07T16:36:33.246Z] [1;32m     12[0m     CellInformation,
[2024-03-07T16:36:33.246Z] [1;32m     13[0m     FieldInformation,
[2024-03-07T16:36:33.246Z] [1;32m     14[0m     GeometryInformation,
[2024-03-07T16:36:33.246Z] [1;32m     15[0m     ModelProgramFile,
[2024-03-07T16:36:33.246Z] [1;32m     16[0m     MultidimensionalBoxSpatialReference,
[2024-03-07T16:36:33.246Z] [1;32m     17[0m     MultidimensionalPointSpatialReference,
[2024-03-07T16:36:33.246Z] [1;32m     18[0m     PeriodCoverage,
[2024-03-07T16:36:33.246Z] [1;32m     19[0m     PointCoverage,
[2024-03-07T16:36:33.246Z] [1;32m     20[0m     PointSpatialReference,
[2024-03-07T16:36:33.246Z] [1;32m     21[0m     Rights,
[2024-03-07T16:36:33.246Z] [1;32m     22[0m     TimeSeriesResult,
[2024-03-07T16:36:33.246Z] [1;32m     23[0m     Variable,
[2024-03-07T16:36:33.246Z] [1;32m     24[0m )
[2024-03-07T16:36:33.246Z] [1;32m     25[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mschemas[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrdf[39;00m[38;5;21;01m.[39;00m[38;5;21;01mvalidators[39;00m [38;5;28;01mimport[39;00m language_constraint, subjects_constraint
[2024-03-07T16:36:33.246Z] [1;32m     26[0m [38;5;28;01mfrom[39;00m [38;5;21;01mhsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mschemas[39;00m[38;5;21;01m.[39;00m[38;5;21;01mroot_validators[39;00m [38;5;28;01mimport[39;00m (
[2024-03-07T16:36:33.246Z] [1;32m     27[0m     normalize_additional_metadata,
[2024-03-07T16:36:33.246Z] [1;32m     28[0m     parse_abstract,
[2024-03-07T16:36:33.246Z] [0;32m   (...)[0m
[2024-03-07T16:36:33.246Z] [1;32m     32[0m     split_coverages,
[2024-03-07T16:36:33.246Z] [1;32m     33[0m )
[2024-03-07T16:36:33.246Z] 
[2024-03-07T16:36:33.246Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/hsmodels/schemas/fields.py:677[0m
[2024-03-07T16:36:33.246Z] [1;32m    669[0m     utc_offset: [38;5;28mfloat[39m [38;5;241m=[39m Field(
[2024-03-07T16:36:33.246Z] [1;32m    670[0m         default[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[2024-03-07T16:36:33.246Z] [1;32m    671[0m         title[38;5;241m=[39m[38;5;124m"[39m[38;5;124mUTC Offset[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.246Z] [1;32m    672[0m         description[38;5;241m=[39m[38;5;124m"[39m[38;5;124mA floating point value that represents the time offset from UTC time in hours associated with the time series result value timestamps[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.246Z] [1;32m    673[0m     )
[2024-03-07T16:36:33.246Z] [1;32m    674[0m     _parse_utc_offset [38;5;241m=[39m root_validator(pre[38;5;241m=[39m[38;5;28;01mTrue[39;00m, allow_reuse[38;5;241m=[39m[38;5;28;01mTrue[39;00m)(parse_utc_offset_value)
[2024-03-07T16:36:33.246Z] [0;32m--> 677[0m [38;5;28;01mclass[39;00m [38;5;21;01mBoxCoverage[39;00m(base_models[38;5;241m.[39mBaseCoverage):
[2024-03-07T16:36:33.246Z] [1;32m    678[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[2024-03-07T16:36:33.246Z] [1;32m    679[0m [38;5;124;03m    A class used to represent geographic coverage metadata for a resource or aggregation expressed as a[39;00m
[2024-03-07T16:36:33.246Z] [1;32m    680[0m [38;5;124;03m    latitude-longitude bounding box[39;00m
[2024-03-07T16:36:33.246Z] [1;32m    681[0m [38;5;124;03m    """[39;00m
[2024-03-07T16:36:33.246Z] [1;32m    683[0m     [38;5;28;01mclass[39;00m [38;5;21;01mConfig[39;00m:
[2024-03-07T16:36:33.246Z] 
[2024-03-07T16:36:33.246Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/hsmodels/schemas/fields.py:688[0m, in [0;36mBoxCoverage[0;34m()[0m
[2024-03-07T16:36:33.246Z] [1;32m    684[0m     title [38;5;241m=[39m [38;5;124m'[39m[38;5;124mBox Coverage Metadata[39m[38;5;124m'[39m
[2024-03-07T16:36:33.246Z] [1;32m    686[0m     schema_config [38;5;241m=[39m {[38;5;124m'[39m[38;5;124mread_only[39m[38;5;124m'[39m: [[38;5;124m'[39m[38;5;124mtype[39m[38;5;124m'[39m]}
[2024-03-07T16:36:33.246Z] [0;32m--> 688[0m [38;5;28mtype[39m: [38;5;28mstr[39m [38;5;241m=[39m [43mField[49m[43m([49m
[2024-03-07T16:36:33.246Z] [1;32m    689[0m [43m    [49m[43mdefault[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mbox[39;49m[38;5;124;43m"[39;49m[43m,[49m
[2024-03-07T16:36:33.246Z] [1;32m    690[0m [43m    [49m[43mconst[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m
[2024-03-07T16:36:33.246Z] [1;32m    691[0m [43m    [49m[43mtitle[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mGeographic coverage type[39;49m[38;5;124;43m"[39;49m[43m,[49m
[2024-03-07T16:36:33.246Z] [1;32m    692[0m [43m    [49m[43mdescription[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mA string containing the type of geographic coverage[39;49m[38;5;124;43m"[39;49m[43m,[49m
[2024-03-07T16:36:33.246Z] [1;32m    693[0m [43m    [49m[43mallow_mutation[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[2024-03-07T16:36:33.246Z] [1;32m    694[0m [43m[49m[43m)[49m
[2024-03-07T16:36:33.246Z] [1;32m    695[0m name: [38;5;28mstr[39m [38;5;241m=[39m Field(
[2024-03-07T16:36:33.246Z] [1;32m    696[0m     default[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[2024-03-07T16:36:33.246Z] [1;32m    697[0m     title[38;5;241m=[39m[38;5;124m"[39m[38;5;124mName[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.246Z] [1;32m    698[0m     description[38;5;241m=[39m[38;5;124m"[39m[38;5;124mA string containing a name for the place associated with the geographic coverage[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.246Z] [1;32m    699[0m )
[2024-03-07T16:36:33.246Z] [1;32m    700[0m northlimit: [38;5;28mfloat[39m [38;5;241m=[39m Field(
[2024-03-07T16:36:33.246Z] [1;32m    701[0m     gt[38;5;241m=[39m[38;5;241m-[39m[38;5;241m90[39m,
[2024-03-07T16:36:33.246Z] [1;32m    702[0m     lt[38;5;241m=[39m[38;5;241m90[39m,
[2024-03-07T16:36:33.246Z] [1;32m    703[0m     title[38;5;241m=[39m[38;5;124m"[39m[38;5;124mNorth limit[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.246Z] [1;32m    704[0m     description[38;5;241m=[39m[38;5;124m"[39m[38;5;124mA floating point value containing the constant coordinate for the northernmost face or edge of the bounding box[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.246Z] [1;32m    705[0m )
[2024-03-07T16:36:33.246Z] 
[2024-03-07T16:36:33.246Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/pydantic/fields.py:719[0m, in [0;36mField[0;34m(default, default_factory, alias, alias_priority, validation_alias, serialization_alias, title, description, examples, exclude, discriminator, json_schema_extra, frozen, validate_default, repr, init, init_var, kw_only, pattern, strict, gt, ge, lt, le, multiple_of, allow_inf_nan, max_digits, decimal_places, min_length, max_length, union_mode, **extra)[0m
[2024-03-07T16:36:33.246Z] [1;32m    717[0m const [38;5;241m=[39m extra[38;5;241m.[39mpop([38;5;124m'[39m[38;5;124mconst[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m)  [38;5;66;03m# type: ignore[39;00m
[2024-03-07T16:36:33.246Z] [1;32m    718[0m [38;5;28;01mif[39;00m const [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[2024-03-07T16:36:33.246Z] [0;32m--> 719[0m     [38;5;28;01mraise[39;00m PydanticUserError([38;5;124m'[39m[38;5;124m`const` is removed, use `Literal` instead[39m[38;5;124m'[39m, code[38;5;241m=[39m[38;5;124m'[39m[38;5;124mremoved-kwargs[39m[38;5;124m'[39m)
[2024-03-07T16:36:33.246Z] [1;32m    721[0m min_items [38;5;241m=[39m extra[38;5;241m.[39mpop([38;5;124m'[39m[38;5;124mmin_items[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m)  [38;5;66;03m# type: ignore[39;00m
[2024-03-07T16:36:33.247Z] [1;32m    722[0m [38;5;28;01mif[39;00m min_items [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [0;31mPydanticUserError[0m: `const` is removed, use `Literal` instead
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] For further information visit https://errors.pydantic.dev/2.6/u/removed-kwargs
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] ______ RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 1 ______
[2024-03-07T16:36:33.247Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.247Z] [94mCell 1: Cell execution caused an exception
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] Input:
[2024-03-07T16:36:33.247Z] [0mresults = hs.search(subject=["Harvey"])
[2024-03-07T16:36:33.247Z] for r in results:
[2024-03-07T16:36:33.247Z]     print(r.resource_title, ": ", r.resource_id)
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [94mTraceback:[0m
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.247Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.247Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.247Z] [0;32m----> 1[0m results [38;5;241m=[39m [43mhs[49m[38;5;241m.[39msearch(subject[38;5;241m=[39m[[38;5;124m"[39m[38;5;124mHarvey[39m[38;5;124m"[39m])
[2024-03-07T16:36:33.247Z] [1;32m      2[0m [38;5;28;01mfor[39;00m r [38;5;129;01min[39;00m results:
[2024-03-07T16:36:33.247Z] [1;32m      3[0m     [38;5;28mprint[39m(r[38;5;241m.[39mresource_title, [38;5;124m"[39m[38;5;124m: [39m[38;5;124m"[39m, r[38;5;241m.[39mresource_id)
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [0;31mNameError[0m: name 'hs' is not defined
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] ______ RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 2 ______
[2024-03-07T16:36:33.247Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.247Z] [94mCell 2: Cell execution caused an exception
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] Input:
[2024-03-07T16:36:33.247Z] [0mres = hs.resource("51d1539bf6e94b15ac33f7631228118c", validate=False)
[2024-03-07T16:36:33.247Z] res.files()
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [94mTraceback:[0m
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.247Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.247Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.247Z] [0;32m----> 1[0m res [38;5;241m=[39m [43mhs[49m[38;5;241m.[39mresource([38;5;124m"[39m[38;5;124m51d1539bf6e94b15ac33f7631228118c[39m[38;5;124m"[39m, validate[38;5;241m=[39m[38;5;28;01mFalse[39;00m)
[2024-03-07T16:36:33.247Z] [1;32m      2[0m res[38;5;241m.[39mfiles()
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [0;31mNameError[0m: name 'hs' is not defined
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] ______ RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 3 ______
[2024-03-07T16:36:33.247Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.247Z] [94mCell 3: Cell execution caused an exception
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] Input:
[2024-03-07T16:36:33.247Z] [0mres.file_download("USGS_Harvey_gages_TxLaMsAr.csv", save_path="/tmp")
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [94mTraceback:[0m
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.247Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.247Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.247Z] [0;32m----> 1[0m [43mres[49m[38;5;241m.[39mfile_download([38;5;124m"[39m[38;5;124mUSGS_Harvey_gages_TxLaMsAr.csv[39m[38;5;124m"[39m, save_path[38;5;241m=[39m[38;5;124m"[39m[38;5;124m/tmp[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [0;31mNameError[0m: name 'res' is not defined
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 7 _
[2024-03-07T16:36:33.247Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.247Z] [94mCell 7: Cell execution caused an exception
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] Input:
[2024-03-07T16:36:33.247Z] [0mfeatures, statistics, grid0 = stats_resp.get(asobj=True)
[2024-03-07T16:36:33.247Z] lu = statistics[0]
[2024-03-07T16:36:33.247Z] total = sum(lu.values())
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] land_use = {k: (v / total) for (k, v) in lu.items()}
[2024-03-07T16:36:33.247Z] display("Land use ratios", land_use)
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] land_use_pct = {k: f"{np.round(v/total*100, 2)} %" for (k, v) in lu.items()}
[2024-03-07T16:36:33.247Z] display("Land use percentages", land_use_pct)
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [94mTraceback:[0m
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.247Z] [0;31mAttributeError[0m                            Traceback (most recent call last)
[2024-03-07T16:36:33.247Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.247Z] [0;32m----> 1[0m features, statistics, grid0 [38;5;241m=[39m [43mstats_resp[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43masobj[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[2024-03-07T16:36:33.247Z] [1;32m      2[0m lu [38;5;241m=[39m statistics[[38;5;241m0[39m]
[2024-03-07T16:36:33.247Z] [1;32m      3[0m total [38;5;241m=[39m [38;5;28msum[39m(lu[38;5;241m.[39mvalues())
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:41[0m, in [0;36mWPSResult.get[0;34m(self, asobj)[0m
[2024-03-07T16:36:33.247Z] [1;32m     38[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39misSucceded():
[2024-03-07T16:36:33.247Z] [1;32m     39[0m     [38;5;66;03m# TODO: add reason for failure[39;00m
[2024-03-07T16:36:33.247Z] [1;32m     40[0m     [38;5;28;01mraise[39;00m ProcessFailed([38;5;124m"[39m[38;5;124mSorry, process failed.[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.247Z] [0;32m---> 41[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_output[49m[43m([49m[43masobj[49m[43m)[49m
[2024-03-07T16:36:33.247Z] 
[2024-03-07T16:36:33.247Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36mWPSResult._make_output[0;34m(self, convert_objects)[0m
[2024-03-07T16:36:33.247Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:36:33.247Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.247Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:36:33.247Z] [1;32m     47[0m )
[2024-03-07T16:36:33.247Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:36:33.247Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:36:33.248Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28mself[39m[38;5;241m.[39m_process_output(o, convert_objects) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:36:33.248Z] [1;32m     51[0m )
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:36:33.248Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:36:33.248Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.248Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:36:33.248Z] [1;32m     47[0m )
[2024-03-07T16:36:33.248Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:36:33.248Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:36:33.248Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_process_output[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mconvert_objects[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:36:33.248Z] [1;32m     51[0m )
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:71[0m, in [0;36mWPSResult._process_output[0;34m(self, output, convert_objects)[0m
[2024-03-07T16:36:33.248Z] [1;32m     68[0m     [38;5;28;01mreturn[39;00m delist(data)
[2024-03-07T16:36:33.248Z] [1;32m     70[0m [38;5;28;01mif[39;00m convert_objects:
[2024-03-07T16:36:33.248Z] [0;32m---> 71[0m     [38;5;28;01mreturn[39;00m [43mconvert[49m[43m([49m[43moutput[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_path[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_converters[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mauth[49m[38;5;241;43m.[39;49m[43mverify[49m[43m)[49m
[2024-03-07T16:36:33.248Z] [1;32m     72[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:36:33.248Z] [1;32m     73[0m     [38;5;28;01mreturn[39;00m output[38;5;241m.[39mreference
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:376[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:36:33.248Z] [1;32m    374[0m     out [38;5;241m=[39m converter[38;5;241m.[39mconvert()
[2024-03-07T16:36:33.248Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:36:33.248Z] [0;32m--> 376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:36:33.248Z] [1;32m    377[0m     [38;5;28;01mreturn[39;00m out
[2024-03-07T16:36:33.248Z] [1;32m    379[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mImportError[39;00m, [38;5;167;01mNotImplementedError[39;00m):
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:376[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:36:33.248Z] [1;32m    374[0m     out [38;5;241m=[39m converter[38;5;241m.[39mconvert()
[2024-03-07T16:36:33.248Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:36:33.248Z] [0;32m--> 376[0m         out [38;5;241m=[39m [[43mconvert[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mpath[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:36:33.248Z] [1;32m    377[0m     [38;5;28;01mreturn[39;00m out
[2024-03-07T16:36:33.248Z] [1;32m    379[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mImportError[39;00m, [38;5;167;01mNotImplementedError[39;00m):
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:374[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:36:33.248Z] [1;32m    372[0m [38;5;28;01mtry[39;00m:
[2024-03-07T16:36:33.248Z] [1;32m    373[0m     converter [38;5;241m=[39m [38;5;28mcls[39m(output, path[38;5;241m=[39mpath, verify[38;5;241m=[39mverify)
[2024-03-07T16:36:33.248Z] [0;32m--> 374[0m     out [38;5;241m=[39m [43mconverter[49m[38;5;241;43m.[39;49m[43mconvert[49m[43m([49m[43m)[49m
[2024-03-07T16:36:33.248Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:36:33.248Z] [1;32m    376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:266[0m, in [0;36mGeotiffRioxarrayConverter.convert[0;34m(self)[0m
[2024-03-07T16:36:33.248Z] [1;32m    263[0m [38;5;28;01mimport[39;00m [38;5;21;01mxarray[39;00m  [38;5;66;03m# isort: skip[39;00m
[2024-03-07T16:36:33.248Z] [1;32m    264[0m [38;5;28;01mimport[39;00m [38;5;21;01mrioxarray[39;00m  [38;5;66;03m# noqa[39;00m
[2024-03-07T16:36:33.248Z] [0;32m--> 266[0m [38;5;28;01mreturn[39;00m [43mxarray[49m[38;5;241;43m.[39;49m[43mopen_rasterio[49m([38;5;28mself[39m[38;5;241m.[39mfile)
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] [0;31mAttributeError[0m: module 'xarray' has no attribute 'open_rasterio'
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 8 _
[2024-03-07T16:36:33.248Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.248Z] [94mCell 8: Cell execution caused an exception
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] Input:
[2024-03-07T16:36:33.248Z] [0mterrain_resp = wps.terrain_analysis(
[2024-03-07T16:36:33.248Z]     shape=basin_contour, select_all_touching=True, projected_crs=3978
[2024-03-07T16:36:33.248Z] )
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] properties, dem0 = terrain_resp.get(asobj=True)
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] elevation = properties[0]["elevation"]
[2024-03-07T16:36:33.248Z] slope = properties[0]["slope"]
[2024-03-07T16:36:33.248Z] aspect = properties[0]["aspect"]
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] terrain = {"elevation": elevation, "slope": slope, "aspect": aspect}
[2024-03-07T16:36:33.248Z] display(terrain)
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] [94mTraceback:[0m
[2024-03-07T16:36:33.248Z] 
[2024-03-07T16:36:33.248Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.248Z] [0;31mAttributeError[0m                            Traceback (most recent call last)
[2024-03-07T16:36:33.248Z] Cell [0;32mIn[1], line 5[0m
[2024-03-07T16:36:33.248Z] [1;32m      1[0m terrain_resp [38;5;241m=[39m wps[38;5;241m.[39mterrain_analysis(
[2024-03-07T16:36:33.249Z] [1;32m      2[0m     shape[38;5;241m=[39mbasin_contour, select_all_touching[38;5;241m=[39m[38;5;28;01mTrue[39;00m, projected_crs[38;5;241m=[39m[38;5;241m3978[39m
[2024-03-07T16:36:33.249Z] [1;32m      3[0m )
[2024-03-07T16:36:33.249Z] [0;32m----> 5[0m properties, dem0 [38;5;241m=[39m [43mterrain_resp[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43masobj[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[2024-03-07T16:36:33.249Z] [1;32m      7[0m elevation [38;5;241m=[39m properties[[38;5;241m0[39m][[38;5;124m"[39m[38;5;124melevation[39m[38;5;124m"[39m]
[2024-03-07T16:36:33.249Z] [1;32m      8[0m slope [38;5;241m=[39m properties[[38;5;241m0[39m][[38;5;124m"[39m[38;5;124mslope[39m[38;5;124m"[39m]
[2024-03-07T16:36:33.249Z] 
[2024-03-07T16:36:33.249Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:41[0m, in [0;36mWPSResult.get[0;34m(self, asobj)[0m
[2024-03-07T16:36:33.249Z] [1;32m     38[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39misSucceded():
[2024-03-07T16:36:33.249Z] [1;32m     39[0m     [38;5;66;03m# TODO: add reason for failure[39;00m
[2024-03-07T16:36:33.249Z] [1;32m     40[0m     [38;5;28;01mraise[39;00m ProcessFailed([38;5;124m"[39m[38;5;124mSorry, process failed.[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.249Z] [0;32m---> 41[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_output[49m[43m([49m[43masobj[49m[43m)[49m
[2024-03-07T16:36:33.249Z] 
[2024-03-07T16:36:33.249Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36mWPSResult._make_output[0;34m(self, convert_objects)[0m
[2024-03-07T16:36:33.249Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:36:33.249Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.249Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:36:33.249Z] [1;32m     47[0m )
[2024-03-07T16:36:33.249Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:36:33.249Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:36:33.249Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28mself[39m[38;5;241m.[39m_process_output(o, convert_objects) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:36:33.249Z] [1;32m     51[0m )
[2024-03-07T16:36:33.249Z] 
[2024-03-07T16:36:33.249Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:36:33.249Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:36:33.249Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.249Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:36:33.249Z] [1;32m     47[0m )
[2024-03-07T16:36:33.249Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:36:33.249Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:36:33.249Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_process_output[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mconvert_objects[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:36:33.249Z] [1;32m     51[0m )
[2024-03-07T16:36:33.249Z] 
[2024-03-07T16:36:33.249Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:71[0m, in [0;36mWPSResult._process_output[0;34m(self, output, convert_objects)[0m
[2024-03-07T16:36:33.249Z] [1;32m     68[0m     [38;5;28;01mreturn[39;00m delist(data)
[2024-03-07T16:36:33.249Z] [1;32m     70[0m [38;5;28;01mif[39;00m convert_objects:
[2024-03-07T16:36:33.249Z] [0;32m---> 71[0m     [38;5;28;01mreturn[39;00m [43mconvert[49m[43m([49m[43moutput[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_path[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_converters[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mauth[49m[38;5;241;43m.[39;49m[43mverify[49m[43m)[49m
[2024-03-07T16:36:33.249Z] [1;32m     72[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:36:33.249Z] [1;32m     73[0m     [38;5;28;01mreturn[39;00m output[38;5;241m.[39mreference
[2024-03-07T16:36:33.249Z] 
[2024-03-07T16:36:33.249Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:374[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:36:33.249Z] [1;32m    372[0m [38;5;28;01mtry[39;00m:
[2024-03-07T16:36:33.249Z] [1;32m    373[0m     converter [38;5;241m=[39m [38;5;28mcls[39m(output, path[38;5;241m=[39mpath, verify[38;5;241m=[39mverify)
[2024-03-07T16:36:33.249Z] [0;32m--> 374[0m     out [38;5;241m=[39m [43mconverter[49m[38;5;241;43m.[39;49m[43mconvert[49m[43m([49m[43m)[49m
[2024-03-07T16:36:33.249Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:36:33.249Z] [1;32m    376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:36:33.249Z] 
[2024-03-07T16:36:33.249Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:266[0m, in [0;36mGeotiffRioxarrayConverter.convert[0;34m(self)[0m
[2024-03-07T16:36:33.249Z] [1;32m    263[0m [38;5;28;01mimport[39;00m [38;5;21;01mxarray[39;00m  [38;5;66;03m# isort: skip[39;00m
[2024-03-07T16:36:33.249Z] [1;32m    264[0m [38;5;28;01mimport[39;00m [38;5;21;01mrioxarray[39;00m  [38;5;66;03m# noqa[39;00m
[2024-03-07T16:36:33.249Z] [0;32m--> 266[0m [38;5;28;01mreturn[39;00m [43mxarray[49m[38;5;241;43m.[39;49m[43mopen_rasterio[49m([38;5;28mself[39m[38;5;241m.[39mfile)
[2024-03-07T16:36:33.249Z] 
[2024-03-07T16:36:33.249Z] [0;31mAttributeError[0m: module 'xarray' has no attribute 'open_rasterio'
[2024-03-07T16:36:33.249Z] 
[2024-03-07T16:36:33.249Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 9 _
[2024-03-07T16:36:33.249Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.249Z] [94mCell 9: Cell execution caused an exception
[2024-03-07T16:36:33.249Z] 
[2024-03-07T16:36:33.249Z] Input:
[2024-03-07T16:36:33.249Z] [0mall_properties = {**shape_info, **land_use, **terrain}
[2024-03-07T16:36:33.249Z] display(all_properties)
[2024-03-07T16:36:33.249Z] 
[2024-03-07T16:36:33.250Z] [94mTraceback:[0m
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.250Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.250Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:36:33.250Z] [0;32m----> 1[0m all_properties [38;5;241m=[39m {[38;5;241m*[39m[38;5;241m*[39mshape_info, [38;5;241m*[39m[38;5;241m*[39m[43mland_use[49m, [38;5;241m*[39m[38;5;241m*[39mterrain}
[2024-03-07T16:36:33.250Z] [1;32m      2[0m display(all_properties)
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z] [0;31mNameError[0m: name 'land_use' is not defined
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 10 _
[2024-03-07T16:36:33.250Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.250Z] [94mCell 10: Cell execution caused an exception
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z] Input:
[2024-03-07T16:36:33.250Z] [0m# Get the ERA5 data from the Wasabi/Amazon S3 server.
[2024-03-07T16:36:33.250Z] catalog_name = "https://raw.githubusercontent.com/hydrocloudservices/catalogs/main/catalogs/atmosphere.yaml"
[2024-03-07T16:36:33.250Z] cat = intake.open_catalog(catalog_name)
[2024-03-07T16:36:33.250Z] ds = cat.era5_reanalysis_single_levels.to_dask()
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z] """
[2024-03-07T16:36:33.250Z] Get the ERA5 data. We will rechunk it to a single chunck to make it compatible with other codes on the platform,
[2024-03-07T16:36:33.250Z] especially bias-correction. We are also taking the daily min and max temperatures as well as the daily total
[2024-03-07T16:36:33.250Z] precipitation.
[2024-03-07T16:36:33.250Z] """
[2024-03-07T16:36:33.250Z] # We will add a wrapper to ensure that the following operations will preserve the original data attributes,
[2024-03-07T16:36:33.250Z] # such as units and variable names.
[2024-03-07T16:36:33.250Z] with xr.set_options(keep_attrs=True):
[2024-03-07T16:36:33.250Z]     ERA5_reference = subset.subset_shape(
[2024-03-07T16:36:33.250Z]         ds.sel(time=slice(reference_start_day, reference_end_day)), basin_contour
[2024-03-07T16:36:33.250Z]     )
[2024-03-07T16:36:33.250Z]     ERA5_tmin = ERA5_reference["t2m"].resample(time="1D").min().chunk(-1, -1, -1)
[2024-03-07T16:36:33.250Z]     ERA5_tmax = ERA5_reference["t2m"].resample(time="1D").max().chunk(-1, -1, -1)
[2024-03-07T16:36:33.250Z]     ERA5_pr = ERA5_reference["tp"].resample(time="1D").sum().chunk(-1, -1, -1)
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z]     # Change the units
[2024-03-07T16:36:33.250Z]     ERA5_tmin = ERA5_tmin - 273.15  # K to ��C
[2024-03-07T16:36:33.250Z]     ERA5_tmin.attrs["units"] = "degC"
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z]     ERA5_tmax = ERA5_tmax - 273.15  # K to ��C
[2024-03-07T16:36:33.250Z]     ERA5_tmax.attrs["units"] = "degC"
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z]     ERA5_pr = ERA5_pr * 1000  # m to mm
[2024-03-07T16:36:33.250Z]     ERA5_pr.attrs["units"] = "mm"
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z]     # Average the variables spatially
[2024-03-07T16:36:33.250Z]     ERA5_tmin = ERA5_tmin.mean({"latitude", "longitude"})
[2024-03-07T16:36:33.250Z]     ERA5_tmax = ERA5_tmax.mean({"latitude", "longitude"})
[2024-03-07T16:36:33.250Z]     ERA5_pr = ERA5_pr.mean({"latitude", "longitude"})
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z]     # Ensure that the precipitation is non-negative, which can happen with some reanalysis models.
[2024-03-07T16:36:33.250Z]     ERA5_pr[ERA5_pr < 0] = 0
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z]     # Transform them to a dataset such that they can be written with attributes to netcdf
[2024-03-07T16:36:33.250Z]     ERA5_tmin = ERA5_tmin.to_dataset(name="tmin", promote_attrs=True)
[2024-03-07T16:36:33.250Z]     ERA5_tmax = ERA5_tmax.to_dataset(name="tmax", promote_attrs=True)
[2024-03-07T16:36:33.250Z]     ERA5_pr = ERA5_pr.to_dataset(name="pr", promote_attrs=True)
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z]     # Write to disk. Here is where we write to disk and where the notebook will fail if running it from the
[2024-03-07T16:36:33.250Z]     # original location on the server (which is read-only). Please move the notebooks to your writable-workspace.
[2024-03-07T16:36:33.250Z]     ERA5_weather = xr.merge([ERA5_tmin, ERA5_tmax, ERA5_pr])
[2024-03-07T16:36:33.250Z]     ERA5_weather.to_netcdf(tmp / "ERA5_meteo_data.nc")
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z] [94mTraceback:[0m
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.250Z] [0;31mKeyError[0m                                  Traceback (most recent call last)
[2024-03-07T16:36:33.250Z] Cell [0;32mIn[1], line 37[0m
[2024-03-07T16:36:33.250Z] [1;32m     34[0m ERA5_pr [38;5;241m=[39m ERA5_pr[38;5;241m.[39mmean({[38;5;124m"[39m[38;5;124mlatitude[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mlongitude[39m[38;5;124m"[39m})
[2024-03-07T16:36:33.250Z] [1;32m     36[0m [38;5;66;03m# Ensure that the precipitation is non-negative, which can happen with some reanalysis models.[39;00m
[2024-03-07T16:36:33.250Z] [0;32m---> 37[0m [43mERA5_pr[49m[43m[[49m[43mERA5_pr[49m[43m [49m[38;5;241;43m<[39;49m[43m [49m[38;5;241;43m0[39;49m[43m][49m [38;5;241m=[39m [38;5;241m0[39m
[2024-03-07T16:36:33.250Z] [1;32m     39[0m [38;5;66;03m# Transform them to a dataset such that they can be written with attributes to netcdf[39;00m
[2024-03-07T16:36:33.250Z] [1;32m     40[0m ERA5_tmin [38;5;241m=[39m ERA5_tmin[38;5;241m.[39mto_dataset(name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtmin[39m[38;5;124m"[39m, promote_attrs[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:856[0m, in [0;36mDataArray.__setitem__[0;34m(self, key, value)[0m
[2024-03-07T16:36:33.250Z] [1;32m    851[0m     [38;5;28mself[39m[38;5;241m.[39mcoords[key] [38;5;241m=[39m value
[2024-03-07T16:36:33.250Z] [1;32m    852[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:36:33.250Z] [1;32m    853[0m     [38;5;66;03m# Coordinates in key, value and self[key] should be consistent.[39;00m
[2024-03-07T16:36:33.250Z] [1;32m    854[0m     [38;5;66;03m# TODO Coordinate consistency in key is checked here, but it[39;00m
[2024-03-07T16:36:33.250Z] [1;32m    855[0m     [38;5;66;03m# causes unnecessary indexing. It should be optimized.[39;00m
[2024-03-07T16:36:33.250Z] [0;32m--> 856[0m     obj [38;5;241m=[39m [38;5;28;43mself[39;49m[43m[[49m[43mkey[49m[43m][49m
[2024-03-07T16:36:33.250Z] [1;32m    857[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(value, DataArray):
[2024-03-07T16:36:33.250Z] [1;32m    858[0m         assert_coordinate_consistent(value, obj[38;5;241m.[39mcoords[38;5;241m.[39mvariables)
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:847[0m, in [0;36mDataArray.__getitem__[0;34m(self, key)[0m
[2024-03-07T16:36:33.250Z] [1;32m    844[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_getitem_coord(key)
[2024-03-07T16:36:33.250Z] [1;32m    845[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:36:33.250Z] [1;32m    846[0m     [38;5;66;03m# xarray-style array indexing[39;00m
[2024-03-07T16:36:33.250Z] [0;32m--> 847[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43misel[49m[43m([49m[43mindexers[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_item_key_to_dict[49m[43m([49m[43mkey[49m[43m)[49m[43m)[49m
[2024-03-07T16:36:33.250Z] 
[2024-03-07T16:36:33.250Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:1445[0m, in [0;36mDataArray.isel[0;34m(self, indexers, drop, missing_dims, **indexers_kwargs)[0m
[2024-03-07T16:36:33.250Z] [1;32m   1442[0m indexers [38;5;241m=[39m either_dict_or_kwargs(indexers, indexers_kwargs, [38;5;124m"[39m[38;5;124misel[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.250Z] [1;32m   1444[0m [38;5;28;01mif[39;00m [38;5;28many[39m(is_fancy_indexer(idx) [38;5;28;01mfor[39;00m idx [38;5;129;01min[39;00m indexers[38;5;241m.[39mvalues()):
[2024-03-07T16:36:33.250Z] [0;32m-> 1445[0m     ds [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_to_temp_dataset[49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43m_isel_fancy[49m[43m([49m
[2024-03-07T16:36:33.251Z] [1;32m   1446[0m [43m        [49m[43mindexers[49m[43m,[49m[43m [49m[43mdrop[49m[38;5;241;43m=[39;49m[43mdrop[49m[43m,[49m[43m [49m[43mmissing_dims[49m[38;5;241;43m=[39;49m[43mmissing_dims[49m
[2024-03-07T16:36:33.251Z] [1;32m   1447[0m [43m    [49m[43m)[49m
[2024-03-07T16:36:33.251Z] [1;32m   1448[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_from_temp_dataset(ds)
[2024-03-07T16:36:33.251Z] [1;32m   1450[0m [38;5;66;03m# Much faster algorithm for when all indexers are ints, slices, one-dimensional[39;00m
[2024-03-07T16:36:33.251Z] [1;32m   1451[0m [38;5;66;03m# lists, or zero or one-dimensional np.ndarray's[39;00m
[2024-03-07T16:36:33.251Z] 
[2024-03-07T16:36:33.251Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataset.py:2930[0m, in [0;36mDataset._isel_fancy[0;34m(self, indexers, drop, missing_dims)[0m
[2024-03-07T16:36:33.251Z] [1;32m   2926[0m var_indexers [38;5;241m=[39m {
[2024-03-07T16:36:33.251Z] [1;32m   2927[0m     k: v [38;5;28;01mfor[39;00m k, v [38;5;129;01min[39;00m valid_indexers[38;5;241m.[39mitems() [38;5;28;01mif[39;00m k [38;5;129;01min[39;00m var[38;5;241m.[39mdims
[2024-03-07T16:36:33.251Z] [1;32m   2928[0m }
[2024-03-07T16:36:33.251Z] [1;32m   2929[0m [38;5;28;01mif[39;00m var_indexers:
[2024-03-07T16:36:33.251Z] [0;32m-> 2930[0m     new_var [38;5;241m=[39m [43mvar[49m[38;5;241;43m.[39;49m[43misel[49m[43m([49m[43mindexers[49m[38;5;241;43m=[39;49m[43mvar_indexers[49m[43m)[49m
[2024-03-07T16:36:33.251Z] [1;32m   2931[0m     [38;5;66;03m# drop scalar coordinates[39;00m
[2024-03-07T16:36:33.251Z] [1;32m   2932[0m     [38;5;66;03m# https://github.com/pydata/xarray/issues/6554[39;00m
[2024-03-07T16:36:33.251Z] [1;32m   2933[0m     [38;5;28;01mif[39;00m name [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mcoords [38;5;129;01mand[39;00m drop [38;5;129;01mand[39;00m new_var[38;5;241m.[39mndim [38;5;241m==[39m [38;5;241m0[39m:
[2024-03-07T16:36:33.251Z] 
[2024-03-07T16:36:33.251Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:1368[0m, in [0;36mVariable.isel[0;34m(self, indexers, missing_dims, **indexers_kwargs)[0m
[2024-03-07T16:36:33.251Z] [1;32m   1365[0m indexers [38;5;241m=[39m drop_dims_from_indexers(indexers, [38;5;28mself[39m[38;5;241m.[39mdims, missing_dims)
[2024-03-07T16:36:33.251Z] [1;32m   1367[0m key [38;5;241m=[39m [38;5;28mtuple[39m(indexers[38;5;241m.[39mget(dim, [38;5;28mslice[39m([38;5;28;01mNone[39;00m)) [38;5;28;01mfor[39;00m dim [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mdims)
[2024-03-07T16:36:33.251Z] [0;32m-> 1368[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m[[49m[43mkey[49m[43m][49m
[2024-03-07T16:36:33.251Z] 
[2024-03-07T16:36:33.251Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:891[0m, in [0;36mVariable.__getitem__[0;34m(self, key)[0m
[2024-03-07T16:36:33.251Z] [1;32m    878[0m [38;5;28;01mdef[39;00m [38;5;21m__getitem__[39m([38;5;28mself[39m: T_Variable, key) [38;5;241m-[39m[38;5;241m>[39m T_Variable:
[2024-03-07T16:36:33.251Z] [1;32m    879[0m [38;5;250m    [39m[38;5;124;03m"""Return a new Variable object whose contents are consistent with[39;00m
[2024-03-07T16:36:33.251Z] [1;32m    880[0m [38;5;124;03m    getting the provided key from the underlying data.[39;00m
[2024-03-07T16:36:33.251Z] [1;32m    881[0m 
[2024-03-07T16:36:33.251Z] [0;32m   (...)[0m
[2024-03-07T16:36:33.251Z] [1;32m    889[0m [38;5;124;03m    array `x.values` directly.[39;00m
[2024-03-07T16:36:33.251Z] [1;32m    890[0m [38;5;124;03m    """[39;00m
[2024-03-07T16:36:33.251Z] [0;32m--> 891[0m     dims, indexer, new_order [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_broadcast_indexes[49m[43m([49m[43mkey[49m[43m)[49m
[2024-03-07T16:36:33.251Z] [1;32m    892[0m     data [38;5;241m=[39m as_indexable([38;5;28mself[39m[38;5;241m.[39m_data)[indexer]
[2024-03-07T16:36:33.251Z] [1;32m    893[0m     [38;5;28;01mif[39;00m new_order:
[2024-03-07T16:36:33.251Z] 
[2024-03-07T16:36:33.251Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:724[0m, in [0;36mVariable._broadcast_indexes[0;34m(self, key)[0m
[2024-03-07T16:36:33.251Z] [1;32m    721[0m [38;5;28;01mif[39;00m [38;5;28mall[39m([38;5;28misinstance[39m(k, BASIC_INDEXING_TYPES) [38;5;28;01mfor[39;00m k [38;5;129;01min[39;00m key):
[2024-03-07T16:36:33.251Z] [1;32m    722[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_broadcast_indexes_basic(key)
[2024-03-07T16:36:33.251Z] [0;32m--> 724[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_indexers[49m[43m([49m[43mkey[49m[43m)[49m
[2024-03-07T16:36:33.251Z] [1;32m    725[0m [38;5;66;03m# Detect it can be mapped as an outer indexer[39;00m
[2024-03-07T16:36:33.251Z] [1;32m    726[0m [38;5;66;03m# If all key is unlabeled, or[39;00m
[2024-03-07T16:36:33.251Z] [1;32m    727[0m [38;5;66;03m# key can be mapped as an OuterIndexer.[39;00m
[2024-03-07T16:36:33.251Z] [1;32m    728[0m [38;5;28;01mif[39;00m [38;5;28mall[39m([38;5;129;01mnot[39;00m [38;5;28misinstance[39m(k, Variable) [38;5;28;01mfor[39;00m k [38;5;129;01min[39;00m key):
[2024-03-07T16:36:33.251Z] 
[2024-03-07T16:36:33.251Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:776[0m, in [0;36mVariable._validate_indexers[0;34m(self, key)[0m
[2024-03-07T16:36:33.251Z] [1;32m    771[0m     [38;5;28;01mraise[39;00m [38;5;167;01mIndexError[39;00m(
[2024-03-07T16:36:33.251Z] [1;32m    772[0m         [38;5;124m"[39m[38;5;132;01m{}[39;00m[38;5;124m-dimensional boolean indexing is [39m[38;5;124m"[39m
[2024-03-07T16:36:33.251Z] [1;32m    773[0m         [38;5;124m"[39m[38;5;124mnot supported. [39m[38;5;124m"[39m[38;5;241m.[39mformat(k[38;5;241m.[39mndim)
[2024-03-07T16:36:33.251Z] [1;32m    774[0m     )
[2024-03-07T16:36:33.251Z] [1;32m    775[0m [38;5;28;01mif[39;00m is_duck_dask_array(k[38;5;241m.[39mdata):
[2024-03-07T16:36:33.251Z] [0;32m--> 776[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(
[2024-03-07T16:36:33.251Z] [1;32m    777[0m         [38;5;124m"[39m[38;5;124mIndexing with a boolean dask array is not allowed. [39m[38;5;124m"[39m
[2024-03-07T16:36:33.251Z] [1;32m    778[0m         [38;5;124m"[39m[38;5;124mThis will result in a dask array of unknown shape. [39m[38;5;124m"[39m
[2024-03-07T16:36:33.251Z] [1;32m    779[0m         [38;5;124m"[39m[38;5;124mSuch arrays are unsupported by Xarray.[39m[38;5;124m"[39m
[2024-03-07T16:36:33.251Z] [1;32m    780[0m         [38;5;124m"[39m[38;5;124mPlease compute the indexer first using .compute()[39m[38;5;124m"[39m
[2024-03-07T16:36:33.251Z] [1;32m    781[0m     )
[2024-03-07T16:36:33.251Z] [1;32m    782[0m [38;5;28;01mif[39;00m [38;5;28mgetattr[39m(k, [38;5;124m"[39m[38;5;124mdims[39m[38;5;124m"[39m, (dim,)) [38;5;241m!=[39m (dim,):
[2024-03-07T16:36:33.251Z] [1;32m    783[0m     [38;5;28;01mraise[39;00m [38;5;167;01mIndexError[39;00m(
[2024-03-07T16:36:33.251Z] [1;32m    784[0m         [38;5;124m"[39m[38;5;124mBoolean indexer should be unlabeled or on the [39m[38;5;124m"[39m
[2024-03-07T16:36:33.251Z] [1;32m    785[0m         [38;5;124m"[39m[38;5;124msame dimension to the indexed array. Indexer is [39m[38;5;124m"[39m
[2024-03-07T16:36:33.251Z] [0;32m   (...)[0m
[2024-03-07T16:36:33.251Z] [1;32m    788[0m         )
[2024-03-07T16:36:33.251Z] [1;32m    789[0m     )
[2024-03-07T16:36:33.251Z] 
[2024-03-07T16:36:33.251Z] [0;31mKeyError[0m: 'Indexing with a boolean dask array is not allowed. This will result in a dask array of unknown shape. Such arrays are unsupported by Xarray.Please compute the indexer first using .compute()'
[2024-03-07T16:36:33.251Z] 
[2024-03-07T16:36:33.251Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 11 _
[2024-03-07T16:36:33.251Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.252Z] [94mCell 11: Cell execution caused an exception
[2024-03-07T16:36:33.252Z] 
[2024-03-07T16:36:33.252Z] Input:
[2024-03-07T16:36:33.252Z] [0m# Climate model to use
[2024-03-07T16:36:33.252Z] climate_model = "MIROC6"
[2024-03-07T16:36:33.252Z] 
[2024-03-07T16:36:33.252Z] # Get the catalog info from the pangeo dataset, which basically is a list of links to the various products.
[2024-03-07T16:36:33.252Z] fsCMIP = gcsfs.GCSFileSystem(token="anon", access="read_only")
[2024-03-07T16:36:33.252Z] col = intake.open_esm_datastore(
[2024-03-07T16:36:33.252Z]     "https://storage.googleapis.com/cmip6/pangeo-cmip6.json"
[2024-03-07T16:36:33.252Z] )
[2024-03-07T16:36:33.252Z] 
[2024-03-07T16:36:33.252Z] # We will add a wrapper to ensure that the following operations will preserve the original data attributes, such as units and variable names.
[2024-03-07T16:36:33.252Z] with xr.set_options(keep_attrs=True):
[2024-03-07T16:36:33.252Z]     # Load the files from the PanGEO catalogs, for reference and future variables of temperature and precipitation.
[2024-03-07T16:36:33.252Z]     out = {}
[2024-03-07T16:36:33.252Z]     for exp in ["historical", "ssp585"]:
[2024-03-07T16:36:33.252Z]         if exp == "historical":
[2024-03-07T16:36:33.252Z]             period_start = reference_start_day
[2024-03-07T16:36:33.252Z]             period_end = reference_end_day
[2024-03-07T16:36:33.252Z]         else:
[2024-03-07T16:36:33.252Z]             period_start = future_start_day
[2024-03-07T16:36:33.252Z]             period_end = future_end_day
[2024-03-07T16:36:33.252Z] 
[2024-03-07T16:36:33.252Z]         out[exp] = {}
[2024-03-07T16:36:33.252Z]         for variable in ["tasmin", "tasmax", "pr"]:
[2024-03-07T16:36:33.252Z]             print(exp, variable)
[2024-03-07T16:36:33.252Z]             query = dict(
[2024-03-07T16:36:33.252Z]                 experiment_id=exp,
[2024-03-07T16:36:33.252Z]                 table_id="day",
[2024-03-07T16:36:33.252Z]                 variable_id=variable,
[2024-03-07T16:36:33.252Z]                 member_id="r1i1p1f1",
[2024-03-07T16:36:33.252Z]                 source_id=climate_model,
[2024-03-07T16:36:33.252Z]             )
[2024-03-07T16:36:33.252Z]             col_subset = col.search(require_all_on=["source_id"], **query)
[2024-03-07T16:36:33.252Z]             mapper = fsCMIP.get_mapper(col_subset.df.zstore[0])
[2024-03-07T16:36:33.252Z] 
[2024-03-07T16:36:33.252Z]             # special case for precipitation, which does not have the "height" variable that we need to discard as for tasmax and tasmin.
[2024-03-07T16:36:33.252Z]             if variable == "pr":
[2024-03-07T16:36:33.252Z]                 out[exp][variable] = average.average_shape(
[2024-03-07T16:36:33.252Z]                     xr.open_zarr(mapper, consolidated=True).sel(
[2024-03-07T16:36:33.252Z]                         time=slice(period_start, period_end)
[2024-03-07T16:36:33.252Z]                     )[variable],
[2024-03-07T16:36:33.252Z]                     basin_contour,
[2024-03-07T16:36:33.252Z]                 ).chunk(-1)
[2024-03-07T16:36:33.252Z]             else:
[2024-03-07T16:36:33.252Z]                 out[exp][variable] = average.average_shape(
[2024-03-07T16:36:33.252Z]                     xr.open_zarr(mapper, consolidated=True)
[2024-03-07T16:36:33.252Z]                     .sel(time=slice(period_start, period_end))
[2024-03-07T16:36:33.252Z]                     .reset_coords("height", drop=True)[variable],
[2024-03-07T16:36:33.252Z]                     basin_contour,
[2024-03-07T16:36:33.252Z]                 ).chunk(-1)
[2024-03-07T16:36:33.252Z] 
[2024-03-07T16:36:33.252Z] # We can now extract the variables that we will need later:
[2024-03-07T16:36:33.252Z] historical_tasmax = out["historical"]["tasmax"]
[2024-03-07T16:36:33.252Z] historical_tasmin = out["historical"]["tasmin"]
[2024-03-07T16:36:33.252Z] historical_pr = out["historical"]["pr"]
[2024-03-07T16:36:33.252Z] future_tasmax = out["ssp585"]["tasmax"]
[2024-03-07T16:36:33.252Z] future_tasmin = out["ssp585"]["tasmin"]
[2024-03-07T16:36:33.252Z] future_pr = out["ssp585"]["pr"]
[2024-03-07T16:36:33.252Z] 
[2024-03-07T16:36:33.252Z] [94mTraceback:[0m
[2024-03-07T16:36:33.252Z] 
[2024-03-07T16:36:33.252Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.252Z] [0;31mKeyError[0m                                  Traceback (most recent call last)
[2024-03-07T16:36:33.252Z] Cell [0;32mIn[1], line 44[0m
[2024-03-07T16:36:33.252Z] [1;32m     37[0m                 out[exp][variable] [38;5;241m=[39m average[38;5;241m.[39maverage_shape(
[2024-03-07T16:36:33.252Z] [1;32m     38[0m                     xr[38;5;241m.[39mopen_zarr(mapper, consolidated[38;5;241m=[39m[38;5;28;01mTrue[39;00m)[38;5;241m.[39msel(
[2024-03-07T16:36:33.252Z] [1;32m     39[0m                         time[38;5;241m=[39m[38;5;28mslice[39m(period_start, period_end)
[2024-03-07T16:36:33.252Z] [1;32m     40[0m                     )[variable],
[2024-03-07T16:36:33.252Z] [1;32m     41[0m                     basin_contour,
[2024-03-07T16:36:33.252Z] [1;32m     42[0m                 )[38;5;241m.[39mchunk([38;5;241m-[39m[38;5;241m1[39m)
[2024-03-07T16:36:33.252Z] [1;32m     43[0m             [38;5;28;01melse[39;00m:
[2024-03-07T16:36:33.252Z] [0;32m---> 44[0m                 out[exp][variable] [38;5;241m=[39m [43maverage[49m[38;5;241;43m.[39;49m[43maverage_shape[49m[43m([49m
[2024-03-07T16:36:33.252Z] [1;32m     45[0m [43m                    [49m[43mxr[49m[38;5;241;43m.[39;49m[43mopen_zarr[49m[43m([49m[43mmapper[49m[43m,[49m[43m [49m[43mconsolidated[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[2024-03-07T16:36:33.252Z] [1;32m     46[0m [43m                    [49m[38;5;241;43m.[39;49m[43msel[49m[43m([49m[43mtime[49m[38;5;241;43m=[39;49m[38;5;28;43mslice[39;49m[43m([49m[43mperiod_start[49m[43m,[49m[43m [49m[43mperiod_end[49m[43m)[49m[43m)[49m
[2024-03-07T16:36:33.252Z] [1;32m     47[0m [43m                    [49m[38;5;241;43m.[39;49m[43mreset_coords[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mheight[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mdrop[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m[43m[[49m[43mvariable[49m[43m][49m[43m,[49m
[2024-03-07T16:36:33.252Z] [1;32m     48[0m [43m                    [49m[43mbasin_contour[49m[43m,[49m
[2024-03-07T16:36:33.252Z] [1;32m     49[0m [43m                [49m[43m)[49m[38;5;241m.[39mchunk([38;5;241m-[39m[38;5;241m1[39m)
[2024-03-07T16:36:33.252Z] [1;32m     51[0m [38;5;66;03m# We can now extract the variables that we will need later:[39;00m
[2024-03-07T16:36:33.252Z] [1;32m     52[0m historical_tasmax [38;5;241m=[39m out[[38;5;124m"[39m[38;5;124mhistorical[39m[38;5;124m"[39m][[38;5;124m"[39m[38;5;124mtasmax[39m[38;5;124m"[39m]
[2024-03-07T16:36:33.252Z] 
[2024-03-07T16:36:33.252Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/clisops/core/average.py:104[0m, in [0;36maverage_shape[0;34m(ds, shape, variable)[0m
[2024-03-07T16:36:33.252Z] [1;32m    101[0m ds_sub [38;5;241m=[39m ds_copy[38;5;241m.[39misel(indexer)
[2024-03-07T16:36:33.252Z] [1;32m    103[0m [38;5;66;03m# Compute the weights[39;00m
[2024-03-07T16:36:33.252Z] [0;32m--> 104[0m savger [38;5;241m=[39m [43mSpatialAverager[49m[43m([49m[43mds_sub[49m[43m,[49m[43m [49m[43mpoly[49m[38;5;241;43m.[39;49m[43mgeometry[49m[43m)[49m
[2024-03-07T16:36:33.252Z] [1;32m    106[0m [38;5;66;03m# Check that some weights are not null. Handle both sparse and scipy weights.[39;00m
[2024-03-07T16:36:33.252Z] [1;32m    107[0m nonnull [38;5;241m=[39m (
[2024-03-07T16:36:33.252Z] [1;32m    108[0m     savger[38;5;241m.[39mweights[38;5;241m.[39mdata[38;5;241m.[39mnnz
[2024-03-07T16:36:33.252Z] [1;32m    109[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(savger[38;5;241m.[39mweights, xr[38;5;241m.[39mDataArray)
[2024-03-07T16:36:33.252Z] [1;32m    110[0m     [38;5;28;01melse[39;00m savger[38;5;241m.[39mweights[38;5;241m.[39mnnz
[2024-03-07T16:36:33.252Z] [1;32m    111[0m )
[2024-03-07T16:36:33.252Z] 
[2024-03-07T16:36:33.252Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xesmf/frontend.py:1180[0m, in [0;36mSpatialAverager.__init__[0;34m(self, ds_in, polys, ignore_holes, periodic, filename, reuse_weights, weights, ignore_degenerate, geom_dim_name)[0m
[2024-03-07T16:36:33.252Z] [1;32m   1177[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(ds_in, xr[38;5;241m.[39mDataArray):
[2024-03-07T16:36:33.252Z] [1;32m   1178[0m     ds_in [38;5;241m=[39m ds_in[38;5;241m.[39m_to_temp_dataset()
[2024-03-07T16:36:33.253Z] [0;32m-> 1180[0m grid_in, shape_in, input_dims [38;5;241m=[39m [43mds_to_ESMFgrid[49m[43m([49m[43mds_in[49m[43m,[49m[43m [49m[43mneed_bounds[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43mperiodic[49m[38;5;241;43m=[39;49m[43mperiodic[49m[43m)[49m
[2024-03-07T16:36:33.253Z] [1;32m   1182[0m [38;5;66;03m# Create an output locstream so that the regridder knows the output shape and coords.[39;00m
[2024-03-07T16:36:33.253Z] [1;32m   1183[0m [38;5;66;03m# Latitude and longitude coordinates are the polygon centroid.[39;00m
[2024-03-07T16:36:33.253Z] [1;32m   1184[0m lon_out, lat_out [38;5;241m=[39m _get_lon_lat(ds_in)
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xesmf/frontend.py:167[0m, in [0;36mds_to_ESMFgrid[0;34m(ds, need_bounds, periodic, append)[0m
[2024-03-07T16:36:33.253Z] [1;32m    164[0m     grid [38;5;241m=[39m Grid[38;5;241m.[39mfrom_xarray(lon[38;5;241m.[39mT, lat[38;5;241m.[39mT, periodic[38;5;241m=[39mperiodic, mask[38;5;241m=[39m[38;5;28;01mNone[39;00m)
[2024-03-07T16:36:33.253Z] [1;32m    166[0m [38;5;28;01mif[39;00m need_bounds:
[2024-03-07T16:36:33.253Z] [0;32m--> 167[0m     lon_b, lat_b [38;5;241m=[39m [43m_get_lon_lat_bounds[49m[43m([49m[43mds[49m[43m)[49m
[2024-03-07T16:36:33.253Z] [1;32m    168[0m     lon_b, lat_b [38;5;241m=[39m as_2d_mesh(np[38;5;241m.[39masarray(lon_b), np[38;5;241m.[39masarray(lat_b))
[2024-03-07T16:36:33.253Z] [1;32m    169[0m     add_corner(grid, lon_b[38;5;241m.[39mT, lat_b[38;5;241m.[39mT)
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xesmf/frontend.py:109[0m, in [0;36m_get_lon_lat_bounds[0;34m(ds)[0m
[2024-03-07T16:36:33.253Z] [1;32m    105[0m     lat_bnds [38;5;241m=[39m ds[38;5;241m.[39mcf[38;5;241m.[39mget_bounds([38;5;124m'[39m[38;5;124mlatitude[39m[38;5;124m'[39m)
[2024-03-07T16:36:33.253Z] [1;32m    107[0m [38;5;66;03m# Convert from CF bounds to xESMF bounds.[39;00m
[2024-03-07T16:36:33.253Z] [1;32m    108[0m [38;5;66;03m# order=None is because we don't want to assume the dimension order for 2D bounds.[39;00m
[2024-03-07T16:36:33.253Z] [0;32m--> 109[0m lon_b [38;5;241m=[39m cfxr[38;5;241m.[39mbounds_to_vertices(lon_bnds, [43mds[49m[38;5;241;43m.[39;49m[43mcf[49m[38;5;241;43m.[39;49m[43mget_bounds_dim_name[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mlongitude[39;49m[38;5;124;43m'[39;49m[43m)[49m, order[38;5;241m=[39m[38;5;28;01mNone[39;00m)
[2024-03-07T16:36:33.253Z] [1;32m    110[0m lat_b [38;5;241m=[39m cfxr[38;5;241m.[39mbounds_to_vertices(lat_bnds, ds[38;5;241m.[39mcf[38;5;241m.[39mget_bounds_dim_name([38;5;124m'[39m[38;5;124mlatitude[39m[38;5;124m'[39m), order[38;5;241m=[39m[38;5;28;01mNone[39;00m)
[2024-03-07T16:36:33.253Z] [1;32m    111[0m [38;5;28;01mreturn[39;00m lon_b, lat_b
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/cf_xarray/accessor.py:2308[0m, in [0;36mCFDatasetAccessor.get_bounds_dim_name[0;34m(self, key)[0m
[2024-03-07T16:36:33.253Z] [1;32m   2304[0m filtered [38;5;241m=[39m [
[2024-03-07T16:36:33.253Z] [1;32m   2305[0m     crd_name [38;5;28;01mfor[39;00m crd_name [38;5;129;01min[39;00m crd_names [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mbounds[39m[38;5;124m"[39m [38;5;129;01min[39;00m variables[crd_name][38;5;241m.[39mattrs
[2024-03-07T16:36:33.253Z] [1;32m   2306[0m ]
[2024-03-07T16:36:33.253Z] [1;32m   2307[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(filtered) [38;5;241m>[39m [38;5;241m1[39m:
[2024-03-07T16:36:33.253Z] [0;32m-> 2308[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(
[2024-03-07T16:36:33.253Z] [1;32m   2309[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mReceived multiple matches for [39m[38;5;132;01m{[39;00mkey[38;5;132;01m!r}[39;00m[38;5;124m that have a bounds attribute: [39m[38;5;132;01m{[39;00mfiltered[38;5;132;01m!r}[39;00m[38;5;124m [39m[38;5;124m"[39m
[2024-03-07T16:36:33.253Z] [1;32m   2310[0m     )
[2024-03-07T16:36:33.253Z] [1;32m   2312[0m (crd_name,) [38;5;241m=[39m filtered
[2024-03-07T16:36:33.253Z] [1;32m   2313[0m crd [38;5;241m=[39m variables[crd_name]
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] [0;31mKeyError[0m: "Received multiple matches for 'longitude' that have a bounds attribute: ['lon_bounds', 'lon'] "
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 12 _
[2024-03-07T16:36:33.253Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.253Z] [94mCell 12: Cell execution caused an exception
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] Input:
[2024-03-07T16:36:33.253Z] [0m# Here we need to make sure that our units are all in the correct format. You can play around with the tools we've seen thus far to explore the units
[2024-03-07T16:36:33.253Z] # and make sure everything is consistent.
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] # Let's start with precipitation:
[2024-03-07T16:36:33.253Z] # The CMIP data is a rate rather than an absolute value, so let's get the absolute values:
[2024-03-07T16:36:33.253Z] historical_pr = xclim.core.units.rate2amount(historical_pr)
[2024-03-07T16:36:33.253Z] future_pr = xclim.core.units.rate2amount(future_pr)
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] # Now we can actually convert units in absolute terms.
[2024-03-07T16:36:33.253Z] historical_pr = xclim.core.units.convert_units_to(historical_pr, "mm", context="hydro")
[2024-03-07T16:36:33.253Z] future_pr = xclim.core.units.convert_units_to(future_pr, "mm", context="hydro")
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] # Now let's do temperature:
[2024-03-07T16:36:33.253Z] historical_tasmin = xclim.core.units.convert_units_to(historical_tasmin, "degC")
[2024-03-07T16:36:33.253Z] historical_tasmax = xclim.core.units.convert_units_to(historical_tasmax, "degC")
[2024-03-07T16:36:33.253Z] future_tasmin = xclim.core.units.convert_units_to(future_tasmin, "degC")
[2024-03-07T16:36:33.253Z] future_tasmax = xclim.core.units.convert_units_to(future_tasmax, "degC")
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] [94mTraceback:[0m
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.253Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.253Z] Cell [0;32mIn[1], line 6[0m
[2024-03-07T16:36:33.253Z] [1;32m      1[0m [38;5;66;03m# Here we need to make sure that our units are all in the correct format. You can play around with the tools we've seen thus far to explore the units[39;00m
[2024-03-07T16:36:33.253Z] [1;32m      2[0m [38;5;66;03m# and make sure everything is consistent.[39;00m
[2024-03-07T16:36:33.253Z] [1;32m      3[0m 
[2024-03-07T16:36:33.253Z] [1;32m      4[0m [38;5;66;03m# Let's start with precipitation:[39;00m
[2024-03-07T16:36:33.253Z] [1;32m      5[0m [38;5;66;03m# The CMIP data is a rate rather than an absolute value, so let's get the absolute values:[39;00m
[2024-03-07T16:36:33.253Z] [0;32m----> 6[0m historical_pr [38;5;241m=[39m xclim[38;5;241m.[39mcore[38;5;241m.[39munits[38;5;241m.[39mrate2amount([43mhistorical_pr[49m)
[2024-03-07T16:36:33.253Z] [1;32m      7[0m future_pr [38;5;241m=[39m xclim[38;5;241m.[39mcore[38;5;241m.[39munits[38;5;241m.[39mrate2amount(future_pr)
[2024-03-07T16:36:33.253Z] [1;32m      9[0m [38;5;66;03m# Now we can actually convert units in absolute terms.[39;00m
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] [0;31mNameError[0m: name 'historical_pr' is not defined
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 13 _
[2024-03-07T16:36:33.253Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.253Z] [94mCell 13: Cell execution caused an exception
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] Input:
[2024-03-07T16:36:33.253Z] [0m# Use xclim utilities (sbda) to give information on the type of window used for the bias correction.
[2024-03-07T16:36:33.253Z] group_month_window = sdba.utils.Grouper("time.dayofyear", window=15)
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] # This is an adjusting function. It builds the tool that will perform the corrections.
[2024-03-07T16:36:33.253Z] Adjustment = sdba.DetrendedQuantileMapping.train(
[2024-03-07T16:36:33.253Z]     ref=ERA5_weather.pr,
[2024-03-07T16:36:33.253Z]     hist=historical_pr,
[2024-03-07T16:36:33.253Z]     nquantiles=50,
[2024-03-07T16:36:33.253Z]     kind="+",
[2024-03-07T16:36:33.253Z]     group=group_month_window,
[2024-03-07T16:36:33.253Z] )
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] # Apply the correction factors on the reference period
[2024-03-07T16:36:33.253Z] corrected_ref_precip = Adjustment.adjust(historical_pr, interp="linear")
[2024-03-07T16:36:33.253Z] 
[2024-03-07T16:36:33.253Z] # Apply the correction factors on the future period
[2024-03-07T16:36:33.254Z] corrected_fut_precip = Adjustment.adjust(future_pr, interp="linear")
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Ensure that the precipitation is non-negative, which can happen with some climate models
[2024-03-07T16:36:33.254Z] corrected_ref_precip = corrected_ref_precip.where(corrected_ref_precip > 0, 0)
[2024-03-07T16:36:33.254Z] corrected_fut_precip = corrected_fut_precip.where(corrected_fut_precip > 0, 0)
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Train the model to find the correction factors for the maximum temperature (tasmax) data
[2024-03-07T16:36:33.254Z] Adjustment = sdba.DetrendedQuantileMapping.train(
[2024-03-07T16:36:33.254Z]     ref=ERA5_weather.tmax,
[2024-03-07T16:36:33.254Z]     hist=historical_tasmax,
[2024-03-07T16:36:33.254Z]     nquantiles=50,
[2024-03-07T16:36:33.254Z]     kind="+",
[2024-03-07T16:36:33.254Z]     group=group_month_window,
[2024-03-07T16:36:33.254Z] )
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Apply the correction factors on the reference period
[2024-03-07T16:36:33.254Z] corrected_ref_tasmax = Adjustment.adjust(historical_tasmax, interp="linear")
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Apply the correction factors on the future period
[2024-03-07T16:36:33.254Z] corrected_fut_tasmax = Adjustment.adjust(future_tasmax, interp="linear")
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Train the model to find the correction factors for the minimum temperature (tasmin) data
[2024-03-07T16:36:33.254Z] Adjustment = sdba.DetrendedQuantileMapping.train(
[2024-03-07T16:36:33.254Z]     ref=ERA5_weather.tmin,
[2024-03-07T16:36:33.254Z]     hist=historical_tasmin,
[2024-03-07T16:36:33.254Z]     nquantiles=50,
[2024-03-07T16:36:33.254Z]     kind="+",
[2024-03-07T16:36:33.254Z]     group=group_month_window,
[2024-03-07T16:36:33.254Z] )
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Apply the correction factors on the reference period
[2024-03-07T16:36:33.254Z] corrected_ref_tasmin = Adjustment.adjust(historical_tasmin, interp="linear")
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Apply the correction factors on the future period
[2024-03-07T16:36:33.254Z] corrected_fut_tasmin = Adjustment.adjust(future_tasmin, interp="linear")
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] [94mTraceback:[0m
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.254Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.254Z] Cell [0;32mIn[1], line 6[0m
[2024-03-07T16:36:33.254Z] [1;32m      2[0m group_month_window [38;5;241m=[39m sdba[38;5;241m.[39mutils[38;5;241m.[39mGrouper([38;5;124m"[39m[38;5;124mtime.dayofyear[39m[38;5;124m"[39m, window[38;5;241m=[39m[38;5;241m15[39m)
[2024-03-07T16:36:33.254Z] [1;32m      4[0m [38;5;66;03m# This is an adjusting function. It builds the tool that will perform the corrections.[39;00m
[2024-03-07T16:36:33.254Z] [1;32m      5[0m Adjustment [38;5;241m=[39m sdba[38;5;241m.[39mDetrendedQuantileMapping[38;5;241m.[39mtrain(
[2024-03-07T16:36:33.254Z] [0;32m----> 6[0m     ref[38;5;241m=[39m[43mERA5_weather[49m[38;5;241m.[39mpr,
[2024-03-07T16:36:33.254Z] [1;32m      7[0m     hist[38;5;241m=[39mhistorical_pr,
[2024-03-07T16:36:33.254Z] [1;32m      8[0m     nquantiles[38;5;241m=[39m[38;5;241m50[39m,
[2024-03-07T16:36:33.254Z] [1;32m      9[0m     kind[38;5;241m=[39m[38;5;124m"[39m[38;5;124m+[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.254Z] [1;32m     10[0m     group[38;5;241m=[39mgroup_month_window,
[2024-03-07T16:36:33.254Z] [1;32m     11[0m )
[2024-03-07T16:36:33.254Z] [1;32m     13[0m [38;5;66;03m# Apply the correction factors on the reference period[39;00m
[2024-03-07T16:36:33.254Z] [1;32m     14[0m corrected_ref_precip [38;5;241m=[39m Adjustment[38;5;241m.[39madjust(historical_pr, interp[38;5;241m=[39m[38;5;124m"[39m[38;5;124mlinear[39m[38;5;124m"[39m)
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] [0;31mNameError[0m: name 'ERA5_weather' is not defined
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 14 _
[2024-03-07T16:36:33.254Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.254Z] [94mCell 14: Cell execution caused an exception
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] Input:
[2024-03-07T16:36:33.254Z] [0m# Convert the reference corrected data into netCDF file. We will then apply a special code to remove a dimension in the dataset to make it applicable to the RAVEN models.
[2024-03-07T16:36:33.254Z] ref_dataset = xr.merge(
[2024-03-07T16:36:33.254Z]     [
[2024-03-07T16:36:33.254Z]         corrected_ref_precip.to_dataset(name="pr"),
[2024-03-07T16:36:33.254Z]         corrected_ref_tasmax.to_dataset(name="tasmax"),
[2024-03-07T16:36:33.254Z]         corrected_ref_tasmin.to_dataset(name="tasmin"),
[2024-03-07T16:36:33.254Z]     ]
[2024-03-07T16:36:33.254Z] )
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Write to temporary folder
[2024-03-07T16:36:33.254Z] fn_tmp_ref = tmp / "reference_dataset_tmp.nc"
[2024-03-07T16:36:33.254Z] ref_dataset.to_netcdf(fn_tmp_ref)
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Convert the future corrected data into netCDF file
[2024-03-07T16:36:33.254Z] fut_dataset = xr.merge(
[2024-03-07T16:36:33.254Z]     [
[2024-03-07T16:36:33.254Z]         corrected_fut_precip.to_dataset(name="pr"),
[2024-03-07T16:36:33.254Z]         corrected_fut_tasmax.to_dataset(name="tasmax"),
[2024-03-07T16:36:33.254Z]         corrected_fut_tasmin.to_dataset(name="tasmin"),
[2024-03-07T16:36:33.254Z]     ]
[2024-03-07T16:36:33.254Z] )
[2024-03-07T16:36:33.254Z] # Write to temporary folder
[2024-03-07T16:36:33.254Z] fn_tmp_fut = tmp / "future_dataset_tmp.nc"
[2024-03-07T16:36:33.254Z] fut_dataset.to_netcdf(fn_tmp_fut)
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Write the data to disk to a temporary location for future use.
[2024-03-07T16:36:33.254Z] ref_dataset = xr.open_dataset(fn_tmp_ref)
[2024-03-07T16:36:33.254Z] ref_dataset.isel(geom=0).squeeze().to_netcdf(tmp / "reference_dataset.nc")
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] fut_dataset = xr.open_dataset(fn_tmp_fut)
[2024-03-07T16:36:33.254Z] fut_dataset.isel(geom=0).squeeze().to_netcdf(tmp / "future_dataset.nc")
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] [94mTraceback:[0m
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.254Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.254Z] Cell [0;32mIn[1], line 4[0m
[2024-03-07T16:36:33.254Z] [1;32m      1[0m [38;5;66;03m# Convert the reference corrected data into netCDF file. We will then apply a special code to remove a dimension in the dataset to make it applicable to the RAVEN models.[39;00m
[2024-03-07T16:36:33.254Z] [1;32m      2[0m ref_dataset [38;5;241m=[39m xr[38;5;241m.[39mmerge(
[2024-03-07T16:36:33.254Z] [1;32m      3[0m     [
[2024-03-07T16:36:33.254Z] [0;32m----> 4[0m         [43mcorrected_ref_precip[49m[38;5;241m.[39mto_dataset(name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mpr[39m[38;5;124m"[39m),
[2024-03-07T16:36:33.254Z] [1;32m      5[0m         corrected_ref_tasmax[38;5;241m.[39mto_dataset(name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtasmax[39m[38;5;124m"[39m),
[2024-03-07T16:36:33.254Z] [1;32m      6[0m         corrected_ref_tasmin[38;5;241m.[39mto_dataset(name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtasmin[39m[38;5;124m"[39m),
[2024-03-07T16:36:33.254Z] [1;32m      7[0m     ]
[2024-03-07T16:36:33.254Z] [1;32m      8[0m )
[2024-03-07T16:36:33.254Z] [1;32m     10[0m [38;5;66;03m# Write to temporary folder[39;00m
[2024-03-07T16:36:33.254Z] [1;32m     11[0m fn_tmp_ref [38;5;241m=[39m tmp [38;5;241m/[39m [38;5;124m"[39m[38;5;124mreference_dataset_tmp.nc[39m[38;5;124m"[39m
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] [0;31mNameError[0m: name 'corrected_ref_precip' is not defined
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 15 _
[2024-03-07T16:36:33.254Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.254Z] [94mCell 15: Cell execution caused an exception
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] Input:
[2024-03-07T16:36:33.254Z] [0m# Define the hydrological response unit. We can use the geographic information we gathered previously to
[2024-03-07T16:36:33.254Z] # populate the fields for the HRU.
[2024-03-07T16:36:33.254Z] hru = {}
[2024-03-07T16:36:33.254Z] hru = dict(
[2024-03-07T16:36:33.254Z]     area=all_properties["area"],
[2024-03-07T16:36:33.254Z]     elevation=all_properties["elevation"],
[2024-03-07T16:36:33.254Z]     latitude=all_properties["latitude"],
[2024-03-07T16:36:33.254Z]     longitude=all_properties["longitude"],
[2024-03-07T16:36:33.254Z]     hru_type="land",
[2024-03-07T16:36:33.254Z] )
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Establish the start date for the calibration. This is set in the model configuration, so the calibrator
[2024-03-07T16:36:33.254Z] # will simply execute the model which has been pre-configured to run on this period.
[2024-03-07T16:36:33.254Z] start_date = dt.datetime(1981, 1, 1)
[2024-03-07T16:36:33.254Z] end_date = dt.datetime(1985, 12, 31)
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # The data types available in the forcing netcdf file from ERA5, as per the tutorials.
[2024-03-07T16:36:33.254Z] data_type = ["TEMP_MAX", "TEMP_MIN", "PRECIP"]
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # Alternative variable names as described in the tutorial.
[2024-03-07T16:36:33.254Z] alt_names = {
[2024-03-07T16:36:33.254Z]     "TEMP_MIN": "tmin",
[2024-03-07T16:36:33.254Z]     "TEMP_MAX": "tmax",
[2024-03-07T16:36:33.254Z]     "PRECIP": "pr",
[2024-03-07T16:36:33.254Z] }
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.254Z] # The data keywords necessary to indicate the elevation, latitude and longitude of the ERA5 forcing data. Here
[2024-03-07T16:36:33.254Z] # we use the information for the basin average as the ERA5 data is averaged on the watershed.
[2024-03-07T16:36:33.254Z] data_kwds = {
[2024-03-07T16:36:33.254Z]     "ALL": {
[2024-03-07T16:36:33.254Z]         "elevation": hru["elevation"],
[2024-03-07T16:36:33.254Z]         "latitude": hru["latitude"],
[2024-03-07T16:36:33.254Z]         "longitude": hru["longitude"],
[2024-03-07T16:36:33.254Z]     }
[2024-03-07T16:36:33.254Z] }
[2024-03-07T16:36:33.254Z] 
[2024-03-07T16:36:33.255Z] # Give a name to the simulation
[2024-03-07T16:36:33.255Z] run_name = "Paper_example_simulation"
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Setup the gauge object that includes meteorological data from ERA5
[2024-03-07T16:36:33.255Z] gauge = [
[2024-03-07T16:36:33.255Z]     rc.Gauge.from_nc(
[2024-03-07T16:36:33.255Z]         tmp
[2024-03-07T16:36:33.255Z]         / "ERA5_meteo_data.nc",  # Path to the ERA5 file containing all three meteorological variables
[2024-03-07T16:36:33.255Z]         data_type=data_type,  # Note that this is the list of all the variables
[2024-03-07T16:36:33.255Z]         alt_names=alt_names,  # Note that all variables here are mapped to their names in the netcdf file.
[2024-03-07T16:36:33.255Z]         data_kwds=data_kwds,
[2024-03-07T16:36:33.255Z]     )
[2024-03-07T16:36:33.255Z] ]
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Read the streamflow from the HYSETS catchment data for this basin
[2024-03-07T16:36:33.255Z] discharge_data = [rc.ObservationData.from_nc(streamflow_file, alt_names="discharge")]
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Which evaluation metric do we want to use for calibration. Raven will return this by default after each run,
[2024-03-07T16:36:33.255Z] # and the optimizer will read it directly to calibrate.
[2024-03-07T16:36:33.255Z] eval_metrics = ("NASH_SUTCLIFFE",)
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Build the model configuration according to user preferences and inputs
[2024-03-07T16:36:33.255Z] model_config = GR4JCN(
[2024-03-07T16:36:33.255Z]     ObservationData=discharge_data,
[2024-03-07T16:36:33.255Z]     Gauge=gauge,
[2024-03-07T16:36:33.255Z]     HRUs=[hru],
[2024-03-07T16:36:33.255Z]     StartDate=start_date,
[2024-03-07T16:36:33.255Z]     EndDate=end_date,
[2024-03-07T16:36:33.255Z]     RunName=run_name,
[2024-03-07T16:36:33.255Z]     EvaluationMetrics=eval_metrics,  # We add this code to tell Raven which objective function we want to pass.
[2024-03-07T16:36:33.255Z]     SuppressOutput=True,  # This stops Raven from generating the output .nc files at each iteration.
[2024-03-07T16:36:33.255Z] )
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] [94mTraceback:[0m
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.255Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.255Z] Cell [0;32mIn[1], line 5[0m
[2024-03-07T16:36:33.255Z] [1;32m      1[0m [38;5;66;03m# Define the hydrological response unit. We can use the geographic information we gathered previously to[39;00m
[2024-03-07T16:36:33.255Z] [1;32m      2[0m [38;5;66;03m# populate the fields for the HRU.[39;00m
[2024-03-07T16:36:33.255Z] [1;32m      3[0m hru [38;5;241m=[39m {}
[2024-03-07T16:36:33.255Z] [1;32m      4[0m hru [38;5;241m=[39m [38;5;28mdict[39m(
[2024-03-07T16:36:33.255Z] [0;32m----> 5[0m     area[38;5;241m=[39m[43mall_properties[49m[[38;5;124m"[39m[38;5;124marea[39m[38;5;124m"[39m],
[2024-03-07T16:36:33.255Z] [1;32m      6[0m     elevation[38;5;241m=[39mall_properties[[38;5;124m"[39m[38;5;124melevation[39m[38;5;124m"[39m],
[2024-03-07T16:36:33.255Z] [1;32m      7[0m     latitude[38;5;241m=[39mall_properties[[38;5;124m"[39m[38;5;124mlatitude[39m[38;5;124m"[39m],
[2024-03-07T16:36:33.255Z] [1;32m      8[0m     longitude[38;5;241m=[39mall_properties[[38;5;124m"[39m[38;5;124mlongitude[39m[38;5;124m"[39m],
[2024-03-07T16:36:33.255Z] [1;32m      9[0m     hru_type[38;5;241m=[39m[38;5;124m"[39m[38;5;124mland[39m[38;5;124m"[39m,
[2024-03-07T16:36:33.255Z] [1;32m     10[0m )
[2024-03-07T16:36:33.255Z] [1;32m     12[0m [38;5;66;03m# Establish the start date for the calibration. This is set in the model configuration, so the calibrator[39;00m
[2024-03-07T16:36:33.255Z] [1;32m     13[0m [38;5;66;03m# will simply execute the model which has been pre-configured to run on this period.[39;00m
[2024-03-07T16:36:33.255Z] [1;32m     14[0m start_date [38;5;241m=[39m dt[38;5;241m.[39mdatetime([38;5;241m1981[39m, [38;5;241m1[39m, [38;5;241m1[39m)
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] [0;31mNameError[0m: name 'all_properties' is not defined
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 16 _
[2024-03-07T16:36:33.255Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.255Z] [94mCell 16: Cell execution caused an exception
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] Input:
[2024-03-07T16:36:33.255Z] [0m# In order to calibrate your model, you need to give the lower and higher bounds of the model. In this case,
[2024-03-07T16:36:33.255Z] # we are passing the boundaries for a GR4JCN, but it's important to change them, if you are using another model.
[2024-03-07T16:36:33.255Z] low = (0.01, -15.0, 10.0, 0.0, 1.0, 0.0)
[2024-03-07T16:36:33.255Z] high = (2.5, 10.0, 700.0, 7.0, 30.0, 1.0)
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Random seed. We will provide one for consistency purposes, but operationnaly this should not be provided.
[2024-03-07T16:36:33.255Z] random_seed = 42
[2024-03-07T16:36:33.255Z] np.random.seed(random_seed)
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Build the optimizer object
[2024-03-07T16:36:33.255Z] spot_setup = SpotSetup(
[2024-03-07T16:36:33.255Z]     config=model_config,
[2024-03-07T16:36:33.255Z]     low=low,
[2024-03-07T16:36:33.255Z]     high=high,
[2024-03-07T16:36:33.255Z] )
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Maximum number of model evaluations. We only use 200 here to keep the computation time as low as possible,
[2024-03-07T16:36:33.255Z] # but you will want to increase this for operational use, perhaps to 2000-5000 depending on the model.
[2024-03-07T16:36:33.255Z] max_iterations = 200
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Setup the spotpy sampler with the method, the setup configuration, a run name and other options. Please refer
[2024-03-07T16:36:33.255Z] # to the spotpy documentation for more options. We recommend sticking to this format for efficiency of most
[2024-03-07T16:36:33.255Z] # applications. Here we use DDS as the optimization algorithm. More are available: see the Spotpy documentation
[2024-03-07T16:36:33.255Z] # for more information. Here, DDS is used as it is powerful and particularly useful for optimizations with small
[2024-03-07T16:36:33.255Z] # evaluation budgets. For more details on DDS, see:
[2024-03-07T16:36:33.255Z] #
[2024-03-07T16:36:33.255Z] # Tolson, B.A. and Shoemaker, C.A., 2007. Dynamically dimensioned search algorithm for computationally efficient watershed model calibration. Water
[2024-03-07T16:36:33.255Z] # Resources Research, 43(1)
[2024-03-07T16:36:33.255Z] sampler = spotpy.algorithms.dds(
[2024-03-07T16:36:33.255Z]     spot_setup, dbname="RAVEN_model_run", dbformat="ram", save_sim=False
[2024-03-07T16:36:33.255Z] )
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Launch the actual optimization. Multiple trials can be launched, where the entire process is repeated and
[2024-03-07T16:36:33.255Z] # the best overall value from all trials is returned.
[2024-03-07T16:36:33.255Z] sampler.sample(max_iterations, trials=1)
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Get the model diagnostics
[2024-03-07T16:36:33.255Z] diag = spot_setup.diagnostics
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Get all the values of each iteration
[2024-03-07T16:36:33.255Z] results = sampler.getdata()
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Get the raw resutlts directly in an array
[2024-03-07T16:36:33.255Z] bestindex, bestobjfun = spotpy.analyser.get_maxlikeindex(
[2024-03-07T16:36:33.255Z]     results
[2024-03-07T16:36:33.255Z] )  # Want to get the MAX NSE (change for min for RMSE)
[2024-03-07T16:36:33.255Z] best_model_run = list(
[2024-03-07T16:36:33.255Z]     results[bestindex][0]
[2024-03-07T16:36:33.255Z] )  # Get the parameter set returning the best NSE
[2024-03-07T16:36:33.255Z] optimized_parameters = best_model_run[
[2024-03-07T16:36:33.255Z]     1:-1
[2024-03-07T16:36:33.255Z] ]  # Remove the NSE value (position 0) and the ID at the last position to get the actual parameter set.
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] # Display the parameter set ready to use in a future run:
[2024-03-07T16:36:33.255Z] print(optimized_parameters)
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] [94mTraceback:[0m
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.255Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.255Z] Cell [0;32mIn[1], line 12[0m
[2024-03-07T16:36:33.255Z] [1;32m      8[0m np[38;5;241m.[39mrandom[38;5;241m.[39mseed(random_seed)
[2024-03-07T16:36:33.255Z] [1;32m     10[0m [38;5;66;03m# Build the optimizer object[39;00m
[2024-03-07T16:36:33.255Z] [1;32m     11[0m spot_setup [38;5;241m=[39m SpotSetup(
[2024-03-07T16:36:33.255Z] [0;32m---> 12[0m     config[38;5;241m=[39m[43mmodel_config[49m,
[2024-03-07T16:36:33.255Z] [1;32m     13[0m     low[38;5;241m=[39mlow,
[2024-03-07T16:36:33.255Z] [1;32m     14[0m     high[38;5;241m=[39mhigh,
[2024-03-07T16:36:33.255Z] [1;32m     15[0m )
[2024-03-07T16:36:33.255Z] [1;32m     17[0m [38;5;66;03m# Maximum number of model evaluations. We only use 200 here to keep the computation time as low as possible,[39;00m
[2024-03-07T16:36:33.255Z] [1;32m     18[0m [38;5;66;03m# but you will want to increase this for operational use, perhaps to 2000-5000 depending on the model.[39;00m
[2024-03-07T16:36:33.255Z] [1;32m     19[0m max_iterations [38;5;241m=[39m [38;5;241m200[39m
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] [0;31mNameError[0m: name 'model_config' is not defined
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 17 _
[2024-03-07T16:36:33.255Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.255Z] [94mCell 17: Cell execution caused an exception
[2024-03-07T16:36:33.255Z] 
[2024-03-07T16:36:33.255Z] Input:
[2024-03-07T16:36:33.256Z] [0m# Copy the configuration of the previous model that we will modify for our validation:
[2024-03-07T16:36:33.256Z] model_validation = model_config.duplicate(
[2024-03-07T16:36:33.256Z]     params=optimized_parameters,
[2024-03-07T16:36:33.256Z]     StartDate=dt.datetime(1986, 1, 1),
[2024-03-07T16:36:33.256Z]     EndDate=dt.datetime(1990, 12, 31),
[2024-03-07T16:36:33.256Z]     SuppressOutput=False,
[2024-03-07T16:36:33.256Z] )
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] sim_output = Emulator(config=model_validation).run()
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] # Get validation NSE (note we are counting the first year without warm-up)
[2024-03-07T16:36:33.256Z] NSE = sim_output.diagnostics["DIAG_NASH_SUTCLIFFE"]
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] # Plot the model output
[2024-03-07T16:36:33.256Z] sim_output.hydrograph.q_sim.plot(color="blue", label="Simulation")
[2024-03-07T16:36:33.256Z] sim_output.hydrograph.q_obs.plot(color="black", label="Observation")
[2024-03-07T16:36:33.256Z] plt.legend()
[2024-03-07T16:36:33.256Z] plt.title("Validation period - NSE=" + str(NSE[0]))
[2024-03-07T16:36:33.256Z] plt.ylabel("Streamflow (m��/s)")
[2024-03-07T16:36:33.256Z] plt.grid()
[2024-03-07T16:36:33.256Z] plt.show()
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] [94mTraceback:[0m
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.256Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.256Z] Cell [0;32mIn[1], line 2[0m
[2024-03-07T16:36:33.256Z] [1;32m      1[0m [38;5;66;03m# Copy the configuration of the previous model that we will modify for our validation:[39;00m
[2024-03-07T16:36:33.256Z] [0;32m----> 2[0m model_validation [38;5;241m=[39m [43mmodel_config[49m[38;5;241m.[39mduplicate(
[2024-03-07T16:36:33.256Z] [1;32m      3[0m     params[38;5;241m=[39moptimized_parameters,
[2024-03-07T16:36:33.256Z] [1;32m      4[0m     StartDate[38;5;241m=[39mdt[38;5;241m.[39mdatetime([38;5;241m1986[39m, [38;5;241m1[39m, [38;5;241m1[39m),
[2024-03-07T16:36:33.256Z] [1;32m      5[0m     EndDate[38;5;241m=[39mdt[38;5;241m.[39mdatetime([38;5;241m1990[39m, [38;5;241m12[39m, [38;5;241m31[39m),
[2024-03-07T16:36:33.256Z] [1;32m      6[0m     SuppressOutput[38;5;241m=[39m[38;5;28;01mFalse[39;00m,
[2024-03-07T16:36:33.256Z] [1;32m      7[0m )
[2024-03-07T16:36:33.256Z] [1;32m      9[0m sim_output [38;5;241m=[39m Emulator(config[38;5;241m=[39mmodel_validation)[38;5;241m.[39mrun()
[2024-03-07T16:36:33.256Z] [1;32m     11[0m [38;5;66;03m# Get validation NSE (note we are counting the first year without warm-up)[39;00m
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] [0;31mNameError[0m: name 'model_config' is not defined
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 18 _
[2024-03-07T16:36:33.256Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.256Z] [94mCell 18: Cell execution caused an exception
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] Input:
[2024-03-07T16:36:33.256Z] [0m# Setup a gauge for Raven to read-in the reference climate data, just like for ERA5
[2024-03-07T16:36:33.256Z] gauge_ref = [
[2024-03-07T16:36:33.256Z]     rc.Gauge.from_nc(
[2024-03-07T16:36:33.256Z]         tmp
[2024-03-07T16:36:33.256Z]         / "reference_dataset.nc",  # Path to the CMIP6 model reference data netcdf file
[2024-03-07T16:36:33.256Z]         data_type=data_type,
[2024-03-07T16:36:33.256Z]         alt_names=alt_names,
[2024-03-07T16:36:33.256Z]         data_kwds=data_kwds,
[2024-03-07T16:36:33.256Z]     )
[2024-03-07T16:36:33.256Z] ]
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] # Copy the configuration of the previous model that we will modify for our simulation on the reference period.
[2024-03-07T16:36:33.256Z] model_config_reference = model_validation.duplicate(
[2024-03-07T16:36:33.256Z]     Gauge=gauge_ref,
[2024-03-07T16:36:33.256Z]     StartDate=reference_start_day
[2024-03-07T16:36:33.256Z]     + dt.timedelta(days=1),  # Add a day here to account for the UTC lag in ERA5
[2024-03-07T16:36:33.256Z]     EndDate=reference_end_day,
[2024-03-07T16:36:33.256Z] )
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] # Run the model from the configuration and get the outputs.
[2024-03-07T16:36:33.256Z] ref_output = Emulator(config=model_config_reference).run()
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] # Plot the model output. Note that both simulations should have similar hydrological
[2024-03-07T16:36:33.256Z] # regime but day-to-day variability is not expected to match.
[2024-03-07T16:36:33.256Z] ref_output.hydrograph.q_sim.plot(color="blue", label="Reference period simulation")
[2024-03-07T16:36:33.256Z] ref_output.hydrograph.q_obs.plot(color="black", label="Observation")
[2024-03-07T16:36:33.256Z] plt.legend()
[2024-03-07T16:36:33.256Z] plt.title("Reference period")
[2024-03-07T16:36:33.256Z] plt.ylabel("Streamflow (m��/s)")
[2024-03-07T16:36:33.256Z] plt.grid()
[2024-03-07T16:36:33.256Z] plt.show()
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] [94mTraceback:[0m
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.256Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.256Z] Cell [0;32mIn[1], line 6[0m
[2024-03-07T16:36:33.256Z] [1;32m      1[0m [38;5;66;03m# Setup a gauge for Raven to read-in the reference climate data, just like for ERA5[39;00m
[2024-03-07T16:36:33.256Z] [1;32m      2[0m gauge_ref [38;5;241m=[39m [
[2024-03-07T16:36:33.256Z] [1;32m      3[0m     rc[38;5;241m.[39mGauge[38;5;241m.[39mfrom_nc(
[2024-03-07T16:36:33.256Z] [1;32m      4[0m         tmp
[2024-03-07T16:36:33.256Z] [1;32m      5[0m         [38;5;241m/[39m [38;5;124m"[39m[38;5;124mreference_dataset.nc[39m[38;5;124m"[39m,  [38;5;66;03m# Path to the CMIP6 model reference data netcdf file[39;00m
[2024-03-07T16:36:33.256Z] [0;32m----> 6[0m         data_type[38;5;241m=[39m[43mdata_type[49m,
[2024-03-07T16:36:33.256Z] [1;32m      7[0m         alt_names[38;5;241m=[39malt_names,
[2024-03-07T16:36:33.256Z] [1;32m      8[0m         data_kwds[38;5;241m=[39mdata_kwds,
[2024-03-07T16:36:33.256Z] [1;32m      9[0m     )
[2024-03-07T16:36:33.256Z] [1;32m     10[0m ]
[2024-03-07T16:36:33.256Z] [1;32m     12[0m [38;5;66;03m# Copy the configuration of the previous model that we will modify for our simulation on the reference period.[39;00m
[2024-03-07T16:36:33.256Z] [1;32m     13[0m model_config_reference [38;5;241m=[39m model_validation[38;5;241m.[39mduplicate(
[2024-03-07T16:36:33.256Z] [1;32m     14[0m     Gauge[38;5;241m=[39mgauge_ref,
[2024-03-07T16:36:33.256Z] [1;32m     15[0m     StartDate[38;5;241m=[39mreference_start_day
[2024-03-07T16:36:33.256Z] [1;32m     16[0m     [38;5;241m+[39m dt[38;5;241m.[39mtimedelta(days[38;5;241m=[39m[38;5;241m1[39m),  [38;5;66;03m# Add a day here to account for the UTC lag in ERA5[39;00m
[2024-03-07T16:36:33.256Z] [1;32m     17[0m     EndDate[38;5;241m=[39mreference_end_day,
[2024-03-07T16:36:33.256Z] [1;32m     18[0m )
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] [0;31mNameError[0m: name 'data_type' is not defined
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 19 _
[2024-03-07T16:36:33.256Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.256Z] [94mCell 19: Cell execution caused an exception
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] Input:
[2024-03-07T16:36:33.256Z] [0m# Setup a gauge for Raven to read-in the future climate data, just like for the reference data
[2024-03-07T16:36:33.256Z] gauge_fut = [
[2024-03-07T16:36:33.256Z]     rc.Gauge.from_nc(
[2024-03-07T16:36:33.256Z]         tmp / "future_dataset.nc",  # Path to the CMIP6 model reference data netcdf file
[2024-03-07T16:36:33.256Z]         data_type=data_type,
[2024-03-07T16:36:33.256Z]         alt_names=alt_names,
[2024-03-07T16:36:33.256Z]         data_kwds=data_kwds,
[2024-03-07T16:36:33.256Z]     )
[2024-03-07T16:36:33.256Z] ]
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] # Copy the configuration of the previous model that we will modify for our simulation on the reference period.
[2024-03-07T16:36:33.256Z] model_config_future = model_validation.duplicate(
[2024-03-07T16:36:33.256Z]     Gauge=gauge_fut,
[2024-03-07T16:36:33.256Z]     StartDate=future_start_day + dt.timedelta(days=1),
[2024-03-07T16:36:33.256Z]     EndDate=future_end_day,
[2024-03-07T16:36:33.256Z]     ObservationData=None,  # There are no observations for the future period.
[2024-03-07T16:36:33.256Z] )
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] # Run the model and get the outputs and hydrographs.
[2024-03-07T16:36:33.256Z] fut_output = Emulator(config=model_config_future).run()
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] # Plot the model output
[2024-03-07T16:36:33.256Z] fut_output.hydrograph.q_sim.plot(color="blue", label="Future simulation")
[2024-03-07T16:36:33.256Z] plt.legend()
[2024-03-07T16:36:33.256Z] plt.title("Future period")
[2024-03-07T16:36:33.256Z] plt.ylabel("Streamflow (m��/s)")
[2024-03-07T16:36:33.256Z] plt.grid()
[2024-03-07T16:36:33.256Z] plt.show()
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] [94mTraceback:[0m
[2024-03-07T16:36:33.256Z] 
[2024-03-07T16:36:33.256Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.256Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.256Z] Cell [0;32mIn[1], line 5[0m
[2024-03-07T16:36:33.256Z] [1;32m      1[0m [38;5;66;03m# Setup a gauge for Raven to read-in the future climate data, just like for the reference data[39;00m
[2024-03-07T16:36:33.256Z] [1;32m      2[0m gauge_fut [38;5;241m=[39m [
[2024-03-07T16:36:33.256Z] [1;32m      3[0m     rc[38;5;241m.[39mGauge[38;5;241m.[39mfrom_nc(
[2024-03-07T16:36:33.256Z] [1;32m      4[0m         tmp [38;5;241m/[39m [38;5;124m"[39m[38;5;124mfuture_dataset.nc[39m[38;5;124m"[39m,  [38;5;66;03m# Path to the CMIP6 model reference data netcdf file[39;00m
[2024-03-07T16:36:33.256Z] [0;32m----> 5[0m         data_type[38;5;241m=[39m[43mdata_type[49m,
[2024-03-07T16:36:33.257Z] [1;32m      6[0m         alt_names[38;5;241m=[39malt_names,
[2024-03-07T16:36:33.257Z] [1;32m      7[0m         data_kwds[38;5;241m=[39mdata_kwds,
[2024-03-07T16:36:33.257Z] [1;32m      8[0m     )
[2024-03-07T16:36:33.257Z] [1;32m      9[0m ]
[2024-03-07T16:36:33.257Z] [1;32m     11[0m [38;5;66;03m# Copy the configuration of the previous model that we will modify for our simulation on the reference period.[39;00m
[2024-03-07T16:36:33.257Z] [1;32m     12[0m model_config_future [38;5;241m=[39m model_validation[38;5;241m.[39mduplicate(
[2024-03-07T16:36:33.257Z] [1;32m     13[0m     Gauge[38;5;241m=[39mgauge_fut,
[2024-03-07T16:36:33.257Z] [1;32m     14[0m     StartDate[38;5;241m=[39mfuture_start_day [38;5;241m+[39m dt[38;5;241m.[39mtimedelta(days[38;5;241m=[39m[38;5;241m1[39m),
[2024-03-07T16:36:33.257Z] [1;32m     15[0m     EndDate[38;5;241m=[39mfuture_end_day,
[2024-03-07T16:36:33.257Z] [1;32m     16[0m     ObservationData[38;5;241m=[39m[38;5;28;01mNone[39;00m,  [38;5;66;03m# There are no observations for the future period.[39;00m
[2024-03-07T16:36:33.257Z] [1;32m     17[0m )
[2024-03-07T16:36:33.257Z] 
[2024-03-07T16:36:33.257Z] [0;31mNameError[0m: name 'data_type' is not defined
[2024-03-07T16:36:33.257Z] 
[2024-03-07T16:36:33.257Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 20 _
[2024-03-07T16:36:33.257Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:36:33.257Z] [94mCell 20: Cell execution caused an exception
[2024-03-07T16:36:33.257Z] 
[2024-03-07T16:36:33.257Z] Input:
[2024-03-07T16:36:33.257Z] [0m# Extract the mean annual hydrograph for each simulation.
[2024-03-07T16:36:33.257Z] observed_flows = ref_output.hydrograph.q_obs.groupby("time.dayofyear").mean()
[2024-03-07T16:36:33.257Z] simulated_flows = sim_output.hydrograph.q_obs.groupby("time.dayofyear").mean()
[2024-03-07T16:36:33.257Z] reference_flows = ref_output.hydrograph.q_sim.groupby("time.dayofyear").mean()
[2024-03-07T16:36:33.257Z] future_flows = fut_output.hydrograph.q_sim.groupby("time.dayofyear").mean()
[2024-03-07T16:36:33.257Z] 
[2024-03-07T16:36:33.257Z] # Plot the model output
[2024-03-07T16:36:33.257Z] observed_flows.plot(color="black", label="Observation", x="dayofyear")
[2024-03-07T16:36:33.257Z] simulated_flows.plot(color="green", label="Simulation", x="dayofyear")
[2024-03-07T16:36:33.257Z] reference_flows.plot(color="blue", label="Reference", x="dayofyear")
[2024-03-07T16:36:33.257Z] future_flows.plot(color="red", label="Future", x="dayofyear")
[2024-03-07T16:36:33.257Z] plt.legend()
[2024-03-07T16:36:33.257Z] plt.ylabel("Streamflow (m��/s)")
[2024-03-07T16:36:33.257Z] plt.xlabel("Day of year")
[2024-03-07T16:36:33.257Z] plt.xlim([0, 365])
[2024-03-07T16:36:33.257Z] plt.title("Comparison of mean annual hydrographs")
[2024-03-07T16:36:33.257Z] plt.grid()
[2024-03-07T16:36:33.257Z] plt.show()
[2024-03-07T16:36:33.257Z] 
[2024-03-07T16:36:33.257Z] [94mTraceback:[0m
[2024-03-07T16:36:33.257Z] 
[2024-03-07T16:36:33.257Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:36:33.257Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:36:33.257Z] Cell [0;32mIn[1], line 2[0m
[2024-03-07T16:36:33.257Z] [1;32m      1[0m [38;5;66;03m# Extract the mean annual hydrograph for each simulation.[39;00m
[2024-03-07T16:36:33.257Z] [0;32m----> 2[0m observed_flows [38;5;241m=[39m [43mref_output[49m[38;5;241m.[39mhydrograph[38;5;241m.[39mq_obs[38;5;241m.[39mgroupby([38;5;124m"[39m[38;5;124mtime.dayofyear[39m[38;5;124m"[39m)[38;5;241m.[39mmean()
[2024-03-07T16:36:33.257Z] [1;32m      3[0m simulated_flows [38;5;241m=[39m sim_output[38;5;241m.[39mhydrograph[38;5;241m.[39mq_obs[38;5;241m.[39mgroupby([38;5;124m"[39m[38;5;124mtime.dayofyear[39m[38;5;124m"[39m)[38;5;241m.[39mmean()
[2024-03-07T16:36:33.257Z] [1;32m      4[0m reference_flows [38;5;241m=[39m ref_output[38;5;241m.[39mhydrograph[38;5;241m.[39mq_sim[38;5;241m.[39mgroupby([38;5;124m"[39m[38;5;124mtime.dayofyear[39m[38;5;124m"[39m)[38;5;241m.[39mmean()
[2024-03-07T16:36:33.257Z] 
[2024-03-07T16:36:33.257Z] [0;31mNameError[0m: name 'ref_output' is not defined
[2024-03-07T16:36:33.257Z] 
[2024-03-07T16:36:33.257Z] =========================== short test summary info ============================
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 5
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 6
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 7
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 8
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 10
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 11
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 13
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 7
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 8
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 10
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 5
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 6
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 7
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 8
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 9
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 10
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 11
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 12
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 0
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 1
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 2
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 3
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 7
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 8
[2024-03-07T16:36:33.257Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 9
[2024-03-07T16:36:33.258Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 10
[2024-03-07T16:36:33.258Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 11
[2024-03-07T16:36:33.258Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 12
[2024-03-07T16:36:33.258Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 13
[2024-03-07T16:36:33.258Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 14
[2024-03-07T16:36:33.258Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 15
[2024-03-07T16:36:33.258Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 16
[2024-03-07T16:36:33.258Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 17
[2024-03-07T16:36:33.258Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 18
[2024-03-07T16:36:33.258Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 19
[2024-03-07T16:36:33.258Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 20
[2024-03-07T16:36:33.258Z] ================= 36 failed, 224 passed in 1068.88s (0:17:48) ==================
[2024-03-07T16:36:33.258Z] + EXIT_CODE=1
[2024-03-07T16:36:33.258Z] + echo true
[2024-03-07T16:36:33.258Z] + tr [:upper:] [:lower:]
[2024-03-07T16:36:33.258Z] + SAVE_RESULTING_NOTEBOOK=true
[2024-03-07T16:36:33.258Z] + [ xtrue = xtrue ]
[2024-03-07T16:36:33.258Z] + mkdir -p buildout
[2024-03-07T16:36:33.258Z] + basename raven-main/docs/source/notebooks/Region_selection.ipynb
[2024-03-07T16:36:33.258Z] + filename=Region_selection.ipynb
[2024-03-07T16:36:33.258Z] + echo Region_selection.ipynb
[2024-03-07T16:36:33.258Z] + sed s/.ipynb$//
[2024-03-07T16:36:33.258Z] + filename=Region_selection
[2024-03-07T16:36:33.258Z] + [ -e buildout/Region_selection.output.ipynb ]
[2024-03-07T16:36:33.258Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Region_selection.output.ipynb raven-main/docs/source/notebooks/Region_selection.ipynb
[2024-03-07T16:36:33.258Z] [NbConvertApp] Converting notebook raven-main/docs/source/notebooks/Region_selection.ipynb to notebook
[2024-03-07T16:36:45.482Z] [NbConvertApp] Writing 107224 bytes to buildout/Region_selection.output.ipynb
[2024-03-07T16:36:45.482Z] + basename raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb
[2024-03-07T16:36:45.482Z] + filename=Subset_climate_data_over_watershed.ipynb
[2024-03-07T16:36:45.482Z] + echo Subset_climate_data_over_watershed.ipynb
[2024-03-07T16:36:45.482Z] + sed s/.ipynb$//
[2024-03-07T16:36:45.482Z] + filename=Subset_climate_data_over_watershed
[2024-03-07T16:36:45.482Z] + [ -e buildout/Subset_climate_data_over_watershed.output.ipynb ]
[2024-03-07T16:36:45.482Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Subset_climate_data_over_watershed.output.ipynb raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb
[2024-03-07T16:36:45.482Z] [NbConvertApp] Converting notebook raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb to notebook
[2024-03-07T16:37:00.367Z] [NbConvertApp] Writing 97070 bytes to buildout/Subset_climate_data_over_watershed.output.ipynb
[2024-03-07T16:37:00.367Z] + basename RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb
[2024-03-07T16:37:00.367Z] + filename=00_Introduction_to_JupyterLab.ipynb
[2024-03-07T16:37:00.367Z] + echo 00_Introduction_to_JupyterLab.ipynb
[2024-03-07T16:37:00.367Z] + sed s/.ipynb$//
[2024-03-07T16:37:00.367Z] + filename=00_Introduction_to_JupyterLab
[2024-03-07T16:37:00.367Z] + [ -e buildout/00_Introduction_to_JupyterLab.output.ipynb ]
[2024-03-07T16:37:00.367Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 00_Introduction_to_JupyterLab.output.ipynb RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb
[2024-03-07T16:37:01.314Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb to notebook
[2024-03-07T16:37:03.923Z] [NbConvertApp] Writing 13179 bytes to buildout/00_Introduction_to_JupyterLab.output.ipynb
[2024-03-07T16:37:04.184Z] + basename RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb
[2024-03-07T16:37:04.184Z] + filename=01_Getting_watershed_boundaries.ipynb
[2024-03-07T16:37:04.184Z] + echo 01_Getting_watershed_boundaries.ipynb
[2024-03-07T16:37:04.184Z] + sed s/.ipynb$//
[2024-03-07T16:37:04.184Z] + filename=01_Getting_watershed_boundaries
[2024-03-07T16:37:04.184Z] + [ -e buildout/01_Getting_watershed_boundaries.output.ipynb ]
[2024-03-07T16:37:04.184Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 01_Getting_watershed_boundaries.output.ipynb RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb
[2024-03-07T16:37:06.089Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb to notebook
[2024-03-07T16:37:18.289Z] [NbConvertApp] Writing 109427 bytes to buildout/01_Getting_watershed_boundaries.output.ipynb
[2024-03-07T16:37:18.289Z] + basename RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb
[2024-03-07T16:37:18.289Z] + filename=02_Extract_geographical_watershed_properties.ipynb
[2024-03-07T16:37:18.289Z] + sed s/.ipynb$//
[2024-03-07T16:37:18.289Z] + echo 02_Extract_geographical_watershed_properties.ipynb
[2024-03-07T16:37:18.289Z] + filename=02_Extract_geographical_watershed_properties
[2024-03-07T16:37:18.289Z] + [ -e buildout/02_Extract_geographical_watershed_properties.output.ipynb ]
[2024-03-07T16:37:18.289Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 02_Extract_geographical_watershed_properties.output.ipynb RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb
[2024-03-07T16:37:18.290Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb to notebook
[2024-03-07T16:37:36.377Z] [NbConvertApp] Writing 95487 bytes to buildout/02_Extract_geographical_watershed_properties.output.ipynb
[2024-03-07T16:37:36.377Z] + basename RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb
[2024-03-07T16:37:36.377Z] + filename=03_Extracting_forcing_data.ipynb
[2024-03-07T16:37:36.377Z] + + sed s/.ipynb$//
[2024-03-07T16:37:36.377Z] echo 03_Extracting_forcing_data.ipynb
[2024-03-07T16:37:36.377Z] + filename=03_Extracting_forcing_data
[2024-03-07T16:37:36.377Z] + [ -e buildout/03_Extracting_forcing_data.output.ipynb ]
[2024-03-07T16:37:36.377Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 03_Extracting_forcing_data.output.ipynb RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb
[2024-03-07T16:37:36.377Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb to notebook
[2024-03-07T16:39:27.956Z] [NbConvertApp] Writing 63069 bytes to buildout/03_Extracting_forcing_data.output.ipynb
[2024-03-07T16:39:27.956Z] + basename RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb
[2024-03-07T16:39:27.956Z] + filename=04_Emulating_hydrological_models.ipynb
[2024-03-07T16:39:27.956Z] + + sed s/.ipynb$//
[2024-03-07T16:39:27.956Z] echo 04_Emulating_hydrological_models.ipynb
[2024-03-07T16:39:27.956Z] + filename=04_Emulating_hydrological_models
[2024-03-07T16:39:27.957Z] + [ -e buildout/04_Emulating_hydrological_models.output.ipynb ]
[2024-03-07T16:39:27.957Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 04_Emulating_hydrological_models.output.ipynb RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb
[2024-03-07T16:39:29.867Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb to notebook
[2024-03-07T16:39:47.956Z] [NbConvertApp] Writing 159319 bytes to buildout/04_Emulating_hydrological_models.output.ipynb
[2024-03-07T16:39:47.956Z] + basename RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb
[2024-03-07T16:39:47.956Z] + filename=05_Advanced_RavenPy_configuration.ipynb
[2024-03-07T16:39:47.956Z] + echo 05_Advanced_RavenPy_configuration.ipynb
[2024-03-07T16:39:47.956Z] + sed s/.ipynb$//
[2024-03-07T16:39:47.956Z] + filename=05_Advanced_RavenPy_configuration
[2024-03-07T16:39:47.956Z] + [ -e buildout/05_Advanced_RavenPy_configuration.output.ipynb ]
[2024-03-07T16:39:47.956Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 05_Advanced_RavenPy_configuration.output.ipynb RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb
[2024-03-07T16:39:47.956Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb to notebook
[2024-03-07T16:40:06.115Z] [NbConvertApp] Writing 340428 bytes to buildout/05_Advanced_RavenPy_configuration.output.ipynb
[2024-03-07T16:40:06.115Z] + basename RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb
[2024-03-07T16:40:06.115Z] + filename=06_Raven_calibration.ipynb
[2024-03-07T16:40:06.115Z] + echo 06_Raven_calibration.ipynb
[2024-03-07T16:40:06.115Z] + sed s/.ipynb$//
[2024-03-07T16:40:06.115Z] + filename=06_Raven_calibration
[2024-03-07T16:40:06.115Z] + [ -e buildout/06_Raven_calibration.output.ipynb ]
[2024-03-07T16:40:06.115Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 06_Raven_calibration.output.ipynb RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb
[2024-03-07T16:40:07.485Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb to notebook
[2024-03-07T16:40:22.341Z] [NbConvertApp] Writing 24180 bytes to buildout/06_Raven_calibration.output.ipynb
[2024-03-07T16:40:22.342Z] + basename RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb
[2024-03-07T16:40:22.342Z] + filename=07_Making_and_using_hotstart_files.ipynb
[2024-03-07T16:40:22.342Z] + echo 07_Making_and_using_hotstart_files.ipynb
[2024-03-07T16:40:22.342Z] + sed s/.ipynb$//
[2024-03-07T16:40:22.342Z] + filename=07_Making_and_using_hotstart_files
[2024-03-07T16:40:22.342Z] + [ -e buildout/07_Making_and_using_hotstart_files.output.ipynb ]
[2024-03-07T16:40:22.342Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 07_Making_and_using_hotstart_files.output.ipynb RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb
[2024-03-07T16:40:22.342Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb to notebook
[2024-03-07T16:40:34.540Z] [NbConvertApp] Writing 226139 bytes to buildout/07_Making_and_using_hotstart_files.output.ipynb
[2024-03-07T16:40:34.540Z] + basename RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb
[2024-03-07T16:40:34.540Z] + filename=08_Getting_and_bias_correcting_CMIP6_data.ipynb
[2024-03-07T16:40:34.540Z] + echo 08_Getting_and_bias_correcting_CMIP6_data.ipynb
[2024-03-07T16:40:34.540Z] + sed s/.ipynb$//
[2024-03-07T16:40:34.540Z] + filename=08_Getting_and_bias_correcting_CMIP6_data
[2024-03-07T16:40:34.540Z] + [ -e buildout/08_Getting_and_bias_correcting_CMIP6_data.output.ipynb ]
[2024-03-07T16:40:34.540Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 08_Getting_and_bias_correcting_CMIP6_data.output.ipynb RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb
[2024-03-07T16:40:36.430Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb to notebook
[2024-03-07T16:44:27.906Z] [NbConvertApp] Writing 248648 bytes to buildout/08_Getting_and_bias_correcting_CMIP6_data.output.ipynb
[2024-03-07T16:44:27.906Z] + basename RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb
[2024-03-07T16:44:27.906Z] + filename=09_Hydrological_impacts_of_climate_change.ipynb
[2024-03-07T16:44:27.906Z] + echo 09_Hydrological_impacts_of_climate_change.ipynb
[2024-03-07T16:44:27.906Z] + sed s/.ipynb$//
[2024-03-07T16:44:27.906Z] + filename=09_Hydrological_impacts_of_climate_change
[2024-03-07T16:44:27.906Z] + [ -e buildout/09_Hydrological_impacts_of_climate_change.output.ipynb ]
[2024-03-07T16:44:27.906Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 09_Hydrological_impacts_of_climate_change.output.ipynb RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb
[2024-03-07T16:44:27.906Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb to notebook
[2024-03-07T16:44:37.906Z] [NbConvertApp] Writing 128175 bytes to buildout/09_Hydrological_impacts_of_climate_change.output.ipynb
[2024-03-07T16:44:37.906Z] + basename RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb
[2024-03-07T16:44:37.906Z] + filename=10_Data_assimilation.ipynb
[2024-03-07T16:44:37.906Z] + + echo 10_Data_assimilation.ipynbsed
[2024-03-07T16:44:37.906Z]  s/.ipynb$//
[2024-03-07T16:44:37.906Z] + filename=10_Data_assimilation
[2024-03-07T16:44:37.906Z] + [ -e buildout/10_Data_assimilation.output.ipynb ]
[2024-03-07T16:44:37.906Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 10_Data_assimilation.output.ipynb RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb
[2024-03-07T16:44:39.821Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb to notebook
[2024-03-07T16:46:01.307Z] [NbConvertApp] Writing 687320 bytes to buildout/10_Data_assimilation.output.ipynb
[2024-03-07T16:46:01.307Z] + basename RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb
[2024-03-07T16:46:01.307Z] + filename=11_Climatological_ESP_forecasting.ipynb
[2024-03-07T16:46:01.307Z] + sed s/.ipynb$//
[2024-03-07T16:46:01.307Z] + echo 11_Climatological_ESP_forecasting.ipynb
[2024-03-07T16:46:01.307Z] + filename=11_Climatological_ESP_forecasting
[2024-03-07T16:46:01.307Z] + [ -e buildout/11_Climatological_ESP_forecasting.output.ipynb ]
[2024-03-07T16:46:01.307Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 11_Climatological_ESP_forecasting.output.ipynb RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb
[2024-03-07T16:46:01.307Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb to notebook
[2024-03-07T16:46:40.030Z] [NbConvertApp] Writing 552432 bytes to buildout/11_Climatological_ESP_forecasting.output.ipynb
[2024-03-07T16:46:40.030Z] + basename RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb
[2024-03-07T16:46:40.030Z] + filename=12_Performing_hindcasting_experiments.ipynb
[2024-03-07T16:46:40.030Z] + + echo 12_Performing_hindcasting_experiments.ipynb
[2024-03-07T16:46:40.030Z] sed s/.ipynb$//
[2024-03-07T16:46:40.030Z] + filename=12_Performing_hindcasting_experiments
[2024-03-07T16:46:40.030Z] + [ -e buildout/12_Performing_hindcasting_experiments.output.ipynb ]
[2024-03-07T16:46:40.030Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 12_Performing_hindcasting_experiments.output.ipynb RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb
[2024-03-07T16:46:40.030Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb to notebook
[2024-03-07T16:46:58.273Z] [NbConvertApp] Writing 297532 bytes to buildout/12_Performing_hindcasting_experiments.output.ipynb
[2024-03-07T16:46:58.273Z] + basename RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb
[2024-03-07T16:46:58.273Z] + filename=Assess_probabilistic_flood_risk.ipynb
[2024-03-07T16:46:58.273Z] + sed s/.ipynb$//
[2024-03-07T16:46:58.273Z] + echo Assess_probabilistic_flood_risk.ipynb
[2024-03-07T16:46:58.273Z] + filename=Assess_probabilistic_flood_risk
[2024-03-07T16:46:58.273Z] + [ -e buildout/Assess_probabilistic_flood_risk.output.ipynb ]
[2024-03-07T16:46:58.273Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Assess_probabilistic_flood_risk.output.ipynb RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb
[2024-03-07T16:46:58.273Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb to notebook
[2024-03-07T16:47:30.417Z] [NbConvertApp] Writing 546467 bytes to buildout/Assess_probabilistic_flood_risk.output.ipynb
[2024-03-07T16:47:30.417Z] + basename RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb
[2024-03-07T16:47:30.417Z] + filename=Comparing_hindcasts_and_ESP_forecasts.ipynb
[2024-03-07T16:47:30.417Z] + echo Comparing_hindcasts_and_ESP_forecasts.ipynb
[2024-03-07T16:47:30.417Z] + sed s/.ipynb$//
[2024-03-07T16:47:30.417Z] + filename=Comparing_hindcasts_and_ESP_forecasts
[2024-03-07T16:47:30.418Z] + [ -e buildout/Comparing_hindcasts_and_ESP_forecasts.output.ipynb ]
[2024-03-07T16:47:30.418Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Comparing_hindcasts_and_ESP_forecasts.output.ipynb RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb
[2024-03-07T16:47:31.356Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb to notebook
[2024-03-07T16:48:03.446Z] [NbConvertApp] Writing 745147 bytes to buildout/Comparing_hindcasts_and_ESP_forecasts.output.ipynb
[2024-03-07T16:48:03.446Z] + basename RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb
[2024-03-07T16:48:03.446Z] + filename=Distributed_hydrological_modelling.ipynb
[2024-03-07T16:48:03.446Z] + sed s/.ipynb$//
[2024-03-07T16:48:03.446Z] + echo Distributed_hydrological_modelling.ipynb
[2024-03-07T16:48:03.446Z] + filename=Distributed_hydrological_modelling
[2024-03-07T16:48:03.446Z] + [ -e buildout/Distributed_hydrological_modelling.output.ipynb ]
[2024-03-07T16:48:03.446Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Distributed_hydrological_modelling.output.ipynb RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb
[2024-03-07T16:48:04.390Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb to notebook
[2024-03-07T16:48:43.101Z] [NbConvertApp] Writing 111408 bytes to buildout/Distributed_hydrological_modelling.output.ipynb
[2024-03-07T16:48:43.101Z] + basename RavenPy-master/docs/notebooks/HydroShare_integration.ipynb
[2024-03-07T16:48:43.101Z] + filename=HydroShare_integration.ipynb
[2024-03-07T16:48:43.101Z] + echo HydroShare_integration.ipynb
[2024-03-07T16:48:43.101Z] + sed s/.ipynb$//
[2024-03-07T16:48:43.101Z] + filename=HydroShare_integration
[2024-03-07T16:48:43.101Z] + [ -e buildout/HydroShare_integration.output.ipynb ]
[2024-03-07T16:48:43.101Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output HydroShare_integration.output.ipynb RavenPy-master/docs/notebooks/HydroShare_integration.ipynb
[2024-03-07T16:48:43.101Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/HydroShare_integration.ipynb to notebook
[2024-03-07T16:48:43.101Z] [NbConvertApp] Writing 23262 bytes to buildout/HydroShare_integration.output.ipynb
[2024-03-07T16:48:43.101Z] + basename RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb
[2024-03-07T16:48:43.101Z] + filename=Hydrological_realtime_forecasting.ipynb
[2024-03-07T16:48:43.101Z] + echo Hydrological_realtime_forecasting.ipynb
[2024-03-07T16:48:43.101Z] + sed s/.ipynb$//
[2024-03-07T16:48:43.101Z] + filename=Hydrological_realtime_forecasting
[2024-03-07T16:48:43.101Z] + [ -e buildout/Hydrological_realtime_forecasting.output.ipynb ]
[2024-03-07T16:48:43.101Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Hydrological_realtime_forecasting.output.ipynb RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb
[2024-03-07T16:48:45.005Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb to notebook
[2024-03-07T16:49:07.028Z] [NbConvertApp] Writing 311830 bytes to buildout/Hydrological_realtime_forecasting.output.ipynb
[2024-03-07T16:49:07.028Z] + basename RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb
[2024-03-07T16:49:07.028Z] + filename=Managing_Jupyter_Environments.ipynb
[2024-03-07T16:49:07.028Z] + sed s/.ipynb$//
[2024-03-07T16:49:07.028Z] + echo Managing_Jupyter_Environments.ipynb
[2024-03-07T16:49:07.028Z] + filename=Managing_Jupyter_Environments
[2024-03-07T16:49:07.028Z] + [ -e buildout/Managing_Jupyter_Environments.output.ipynb ]
[2024-03-07T16:49:07.028Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Managing_Jupyter_Environments.output.ipynb RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb
[2024-03-07T16:49:08.408Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb to notebook
[2024-03-07T16:49:20.616Z] [NbConvertApp] Writing 7561 bytes to buildout/Managing_Jupyter_Environments.output.ipynb
[2024-03-07T16:49:20.616Z] + basename RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb
[2024-03-07T16:49:20.616Z] + filename=Perform_Regionalization.ipynb
[2024-03-07T16:49:20.616Z] + echo Perform_Regionalization.ipynb
[2024-03-07T16:49:20.616Z] + sed s/.ipynb$//
[2024-03-07T16:49:20.616Z] + filename=Perform_Regionalization
[2024-03-07T16:49:20.616Z] + [ -e buildout/Perform_Regionalization.output.ipynb ]
[2024-03-07T16:49:20.616Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Perform_Regionalization.output.ipynb RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb
[2024-03-07T16:49:21.182Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb to notebook
[2024-03-07T16:49:59.960Z] [NbConvertApp] Writing 127609 bytes to buildout/Perform_Regionalization.output.ipynb
[2024-03-07T16:49:59.960Z] + basename RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb
[2024-03-07T16:49:59.960Z] + filename=Running_HMETS_with_CANOPEX_dataset.ipynb
[2024-03-07T16:49:59.960Z] + echo Running_HMETS_with_CANOPEX_dataset.ipynb
[2024-03-07T16:49:59.960Z] + sed s/.ipynb$//
[2024-03-07T16:49:59.960Z] + filename=Running_HMETS_with_CANOPEX_dataset
[2024-03-07T16:49:59.960Z] + [ -e buildout/Running_HMETS_with_CANOPEX_dataset.output.ipynb ]
[2024-03-07T16:49:59.960Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Running_HMETS_with_CANOPEX_dataset.output.ipynb RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb
[2024-03-07T16:49:59.960Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb to notebook
[2024-03-07T16:50:18.094Z] [NbConvertApp] Writing 118113 bytes to buildout/Running_HMETS_with_CANOPEX_dataset.output.ipynb
[2024-03-07T16:50:18.367Z] + basename RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb
[2024-03-07T16:50:18.367Z] + filename=Sensitivity_analysis.ipynb
[2024-03-07T16:50:18.367Z] + echo Sensitivity_analysis.ipynb
[2024-03-07T16:50:18.367Z] + sed s/.ipynb$//
[2024-03-07T16:50:18.367Z] + filename=Sensitivity_analysis
[2024-03-07T16:50:18.367Z] + [ -e buildout/Sensitivity_analysis.output.ipynb ]
[2024-03-07T16:50:18.367Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Sensitivity_analysis.output.ipynb RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb
[2024-03-07T16:50:20.279Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb to notebook
[2024-03-07T16:50:42.266Z] [NbConvertApp] Writing 35352 bytes to buildout/Sensitivity_analysis.output.ipynb
[2024-03-07T16:50:42.266Z] + basename RavenPy-master/docs/notebooks/time_series_analysis.ipynb
[2024-03-07T16:50:42.266Z] + filename=time_series_analysis.ipynb
[2024-03-07T16:50:42.266Z] + echo time_series_analysis.ipynb
[2024-03-07T16:50:42.266Z] + sed s/.ipynb$//
[2024-03-07T16:50:42.266Z] + filename=time_series_analysis
[2024-03-07T16:50:42.266Z] + [ -e buildout/time_series_analysis.output.ipynb ]
[2024-03-07T16:50:42.266Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output time_series_analysis.output.ipynb RavenPy-master/docs/notebooks/time_series_analysis.ipynb
[2024-03-07T16:50:43.217Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/time_series_analysis.ipynb to notebook
[2024-03-07T16:50:58.197Z] [NbConvertApp] Writing 190847 bytes to buildout/time_series_analysis.output.ipynb
[2024-03-07T16:50:58.458Z] + basename RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb
[2024-03-07T16:50:58.458Z] + filename=Perform_a_climate_change_impact_study_on_a_watershed.ipynb
[2024-03-07T16:50:58.458Z] + echo Perform_a_climate_change_impact_study_on_a_watershed.ipynb
[2024-03-07T16:50:58.458Z] + sed s/.ipynb$//
[2024-03-07T16:50:58.458Z] + filename=Perform_a_climate_change_impact_study_on_a_watershed
[2024-03-07T16:50:58.458Z] + [ -e buildout/Perform_a_climate_change_impact_study_on_a_watershed.output.ipynb ]
[2024-03-07T16:50:58.459Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Perform_a_climate_change_impact_study_on_a_watershed.output.ipynb RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb
[2024-03-07T16:51:00.366Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb to notebook
[2024-03-07T16:52:21.822Z] [NbConvertApp] Writing 131058 bytes to buildout/Perform_a_climate_change_impact_study_on_a_watershed.output.ipynb
[2024-03-07T16:52:21.822Z] + basename notebooks/hummingbird.ipynb
[2024-03-07T16:52:21.822Z] + filename=hummingbird.ipynb
[2024-03-07T16:52:21.822Z] + echo hummingbird.ipynb
[2024-03-07T16:52:21.822Z] + sed s/.ipynb$//
[2024-03-07T16:52:21.822Z] + filename=hummingbird
[2024-03-07T16:52:21.822Z] + [ -e buildout/hummingbird.output.ipynb ]
[2024-03-07T16:52:21.822Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output hummingbird.output.ipynb notebooks/hummingbird.ipynb
[2024-03-07T16:52:23.196Z] [NbConvertApp] Converting notebook notebooks/hummingbird.ipynb to notebook
[2024-03-07T16:52:27.400Z] [NbConvertApp] Writing 15864 bytes to buildout/hummingbird.output.ipynb
[2024-03-07T16:52:27.400Z] + basename notebooks/stress-tests.ipynb
[2024-03-07T16:52:27.400Z] + filename=stress-tests.ipynb
[2024-03-07T16:52:27.400Z] + + echo stress-tests.ipynb
[2024-03-07T16:52:27.400Z] sed s/.ipynb$//
[2024-03-07T16:52:27.400Z] + filename=stress-tests
[2024-03-07T16:52:27.400Z] + [ -e buildout/stress-tests.output.ipynb ]
[2024-03-07T16:52:27.400Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output stress-tests.output.ipynb notebooks/stress-tests.ipynb
[2024-03-07T16:52:28.343Z] [NbConvertApp] Converting notebook notebooks/stress-tests.ipynb to notebook
[2024-03-07T16:54:19.834Z] [NbConvertApp] Writing 424213 bytes to buildout/stress-tests.output.ipynb
[2024-03-07T16:54:19.834Z] + exit 1
[2024-03-07T16:54:19.834Z] + EXIT_CODE=1
[2024-03-07T16:54:19.834Z] + ENV_DUMP_DIR=buildout/env-dump
[2024-03-07T16:54:19.834Z] + mkdir -p buildout/env-dump
[2024-03-07T16:54:19.834Z] + ENV_EXPORT_FILE=buildout/env-dump/environment-export-birdy.yml
[2024-03-07T16:54:19.834Z] + rm -fv buildout/env-dump/environment-export-birdy.yml
[2024-03-07T16:54:19.834Z] + conda env export -n birdy
[2024-03-07T16:54:37.912Z] + LIST_EXPLICIT_FILE=buildout/env-dump/conda-list-explicit-birdy.txt
[2024-03-07T16:54:37.912Z] + rm -fv buildout/env-dump/conda-list-explicit-birdy.txt
[2024-03-07T16:54:37.912Z] + conda list -n birdy --explicit
[2024-03-07T16:54:44.483Z] + PIP_FREEZE_FILE=buildout/env-dump/pip-freeze-birdy-requirements.txt
[2024-03-07T16:54:44.483Z] + rm -fv buildout/env-dump/pip-freeze-birdy-requirements.txt
[2024-03-07T16:54:44.483Z] + pip freeze
[2024-03-07T16:54:46.399Z] + exit 1
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] archiveArtifacts
[2024-03-07T16:54:48.791Z] Archiving artifacts
[2024-03-07T16:54:48.809Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:54:49.284Z] Archiving artifacts
[2024-03-07T16:54:51.523Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:54:52.994Z] Archiving artifacts
[2024-03-07T16:54:53.027Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:54:53.382Z] Archiving artifacts
[2024-03-07T16:54:53.417Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:54:53.452Z] Archiving artifacts
[2024-03-07T16:54:53.484Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:54:53.526Z] Archiving artifacts
[2024-03-07T16:54:53.566Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:54:54.580Z] Archiving artifacts
[2024-03-07T16:54:54.725Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:54:54.820Z] Archiving artifacts
[2024-03-07T16:54:54.947Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:54:55.066Z] Archiving artifacts
[2024-03-07T16:54:55.449Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:54:55.729Z] Archiving artifacts
[2024-03-07T16:54:56.262Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:54:58.640Z] Archiving artifacts
[2024-03-07T16:54:58.740Z] Recording fingerprints
[Pipeline] emailextrecipients
[Pipeline] step
[2024-03-07T16:54:59.544Z] Sending e-mails to: vu.long@ouranos.ca
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // timeout
[Pipeline] }
[Pipeline] // timestamps
[Pipeline] }
[Pipeline] // ansiColor
[Pipeline] }
$ docker stop --time=1 afee8048e2b4deaf0609277fd962ea28b5c30bfa175abfd9c040c3676602ff2d
$ docker rm -f afee8048e2b4deaf0609277fd962ea28b5c30bfa175abfd9c040c3676602ff2d
[Pipeline] // withDockerContainer
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
ERROR: script returned exit code 1
Finished: FAILURE
