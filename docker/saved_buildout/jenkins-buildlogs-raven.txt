Started by user Long Vu
 > git rev-parse --is-inside-work-tree # timeout=10
Setting origin to https://github.com/Ouranosinc/PAVICS-e2e-workflow-tests.git
 > git config remote.origin.url https://github.com/Ouranosinc/PAVICS-e2e-workflow-tests.git # timeout=10
Fetching origin...
Fetching upstream changes from origin
 > git --version # timeout=10
 > git config --get remote.origin.url # timeout=10
 > git fetch --tags --progress -- origin +refs/heads/*:refs/remotes/origin/* # timeout=10
Seen branch in repository origin/current-production-version
Seen branch in repository origin/devel-new-extensions
Seen branch in repository origin/extended_tests
Seen branch in repository origin/master
Seen branch in repository origin/new-docker-build
Seen branch in repository origin/test-dockerhub-build
Seen branch in repository origin/twitcher_perf_test_notebook
Seen 7 remote branches
Obtained Jenkinsfile from daaa4896c7358eff3a7bd6434617b4af06c89e42
Running in Durability level: MAX_SURVIVABILITY
[Pipeline] Start of Pipeline
[Pipeline] node
Running on linux1 in /home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
No credentials specified
Fetching changes from the remote Git repository
Fetching without tags
 > git rev-parse --is-inside-work-tree # timeout=10
 > git config remote.origin.url https://github.com/Ouranosinc/PAVICS-e2e-workflow-tests.git # timeout=10
Fetching upstream changes from https://github.com/Ouranosinc/PAVICS-e2e-workflow-tests.git
 > git --version # timeout=10
 > git fetch --no-tags --progress -- https://github.com/Ouranosinc/PAVICS-e2e-workflow-tests.git +refs/heads/*:refs/remotes/origin/* # timeout=10
Checking out Revision daaa4896c7358eff3a7bd6434617b4af06c89e42 (new-docker-build)
Commit message: "docker: attempt to fix "Plugin 'jupyterlab_dash' is already registered.""
 > git config core.sparsecheckout # timeout=10
 > git checkout -f daaa4896c7358eff3a7bd6434617b4af06c89e42 # timeout=10
 > git rev-list --no-walk 4f2c0995711f5b6db82991065a652ea056778a2a # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] isUnix
[Pipeline] sh
+ docker inspect -f . pavics/workflow-tests:py310-240306
.
[Pipeline] withDockerContainer
linux1 seems to be running inside container c7b47b12d037a55684325ed6aba8c5cdbf14095a9ef2302738499cdd57ccd08b
$ docker run -t -d -u 1000:1000 -w /home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2 --volumes-from c7b47b12d037a55684325ed6aba8c5cdbf14095a9ef2302738499cdd57ccd08b -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** pavics/workflow-tests:py310-240306 cat
$ docker top b411d488c542a4bdbdc744f27a68a543433da316133264e74a522e46b73d9a9b -eo pid,comm
[Pipeline] {
[Pipeline] ansiColor
[Pipeline] {
[Pipeline] timestamps
[Pipeline] {
[Pipeline] timeout
[2024-03-07T16:13:25.647Z] Timeout set to expire in 2 hr 0 min
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Run tests)
[Pipeline] script
[Pipeline] {
[Pipeline] withCredentials
[2024-03-07T16:13:26.356Z] Masking supported pattern matches of $ESGF_AUTH_USERNAME or $ESGF_AUTH_PASSWORD or $ESGF_AUTH_TOKEN or $COMPUTE_TOKEN
[Pipeline] {
[Pipeline] sh
[2024-03-07T16:13:26.938Z] + VERIFY_SSL=true SAVE_RESULTING_NOTEBOOK=true ./testall
[2024-03-07T16:13:26.938Z] TEST_PAVICS_SDI_REPO has been set to 'false'
[2024-03-07T16:13:26.938Z] PAVICS_SDI_BRANCH has been set to 'master'
[2024-03-07T16:13:26.938Z] PAVICS_SDI_REPO has been set to 'Ouranosinc/pavics-sdi'
[2024-03-07T16:13:26.938Z] TEST_FINCH_REPO has been set to 'false'
[2024-03-07T16:13:26.938Z] FINCH_BRANCH has been set to 'master'
[2024-03-07T16:13:26.938Z] FINCH_REPO has been set to 'bird-house/finch'
[2024-03-07T16:13:26.938Z] TEST_PAVICS_LANDING_REPO has been set to 'false'
[2024-03-07T16:13:26.938Z] PAVICS_LANDING_BRANCH has been set to 'master'
[2024-03-07T16:13:26.938Z] PAVICS_LANDING_REPO has been set to 'Ouranosinc/PAVICS-landing'
[2024-03-07T16:13:26.938Z] TEST_RAVEN_REPO has been set to 'true'
[2024-03-07T16:13:26.938Z] RAVEN_BRANCH has been set to 'main'
[2024-03-07T16:13:26.938Z] RAVEN_REPO has been set to 'Ouranosinc/raven'
[2024-03-07T16:13:26.938Z] TEST_RAVENPY_REPO has been set to 'true'
[2024-03-07T16:13:26.938Z] RAVENPY_BRANCH has been set to 'master'
[2024-03-07T16:13:26.938Z] RAVENPY_REPO has been set to 'CSHS-CWRA/RavenPy'
[2024-03-07T16:13:26.938Z] TEST_ESGF_COMPUTE_API_REPO has been set to 'false'
[2024-03-07T16:13:26.938Z] ESGF_COMPUTE_API_BRANCH has been set to 'devel'
[2024-03-07T16:13:26.938Z] ESGF_COMPUTE_API_REPO has been set to 'ESGF/esgf-compute-api'
[2024-03-07T16:13:26.938Z] TEST_LOCAL_NOTEBOOKS has been set to 'true'
[2024-03-07T16:13:26.938Z] + git clean -fdx
[2024-03-07T16:13:27.874Z] Removing .pytest_cache/
[2024-03-07T16:13:27.874Z] Removing PAVICS-landing-master/
[2024-03-07T16:13:27.874Z] Removing RavenPy-master/
[2024-03-07T16:13:27.874Z] Removing __pycache__/
[2024-03-07T16:13:27.874Z] Removing buildout/
[2024-03-07T16:13:27.874Z] Removing esgf-compute-api-devel/
[2024-03-07T16:13:27.874Z] Removing finch-master/
[2024-03-07T16:13:27.874Z] Removing pavics-sdi-master/
[2024-03-07T16:13:27.874Z] Removing raven-master/
[2024-03-07T16:13:27.874Z] + ./downloadrepos
[2024-03-07T16:13:28.135Z] TEST_PAVICS_SDI_REPO has been set to 'false'
[2024-03-07T16:13:28.135Z] PAVICS_SDI_BRANCH has been set to 'master'
[2024-03-07T16:13:28.135Z] PAVICS_SDI_REPO has been set to 'Ouranosinc/pavics-sdi'
[2024-03-07T16:13:28.135Z] TEST_FINCH_REPO has been set to 'false'
[2024-03-07T16:13:28.135Z] FINCH_BRANCH has been set to 'master'
[2024-03-07T16:13:28.135Z] FINCH_REPO has been set to 'bird-house/finch'
[2024-03-07T16:13:28.135Z] TEST_PAVICS_LANDING_REPO has been set to 'false'
[2024-03-07T16:13:28.135Z] PAVICS_LANDING_BRANCH has been set to 'master'
[2024-03-07T16:13:28.135Z] PAVICS_LANDING_REPO has been set to 'Ouranosinc/PAVICS-landing'
[2024-03-07T16:13:28.135Z] TEST_RAVEN_REPO has been set to 'true'
[2024-03-07T16:13:28.135Z] RAVEN_BRANCH has been set to 'main'
[2024-03-07T16:13:28.135Z] RAVEN_REPO has been set to 'Ouranosinc/raven'
[2024-03-07T16:13:28.135Z] TEST_RAVENPY_REPO has been set to 'true'
[2024-03-07T16:13:28.135Z] RAVENPY_BRANCH has been set to 'master'
[2024-03-07T16:13:28.135Z] RAVENPY_REPO has been set to 'CSHS-CWRA/RavenPy'
[2024-03-07T16:13:28.135Z] TEST_ESGF_COMPUTE_API_REPO has been set to 'false'
[2024-03-07T16:13:28.135Z] ESGF_COMPUTE_API_BRANCH has been set to 'devel'
[2024-03-07T16:13:28.135Z] ESGF_COMPUTE_API_REPO has been set to 'ESGF/esgf-compute-api'
[2024-03-07T16:13:28.135Z] TEST_LOCAL_NOTEBOOKS has been set to 'true'
[2024-03-07T16:13:28.135Z] + rm -rf pavics-sdi-*
[2024-03-07T16:13:28.135Z] + ls
[2024-03-07T16:13:28.135Z] + grep pavics-sdi
[2024-03-07T16:13:28.135Z] + downloadrepos https://github.com/Ouranosinc/pavics-sdi master
[2024-03-07T16:13:28.135Z] + github_repo=https://github.com/Ouranosinc/pavics-sdi
[2024-03-07T16:13:28.135Z] + shift
[2024-03-07T16:13:28.135Z] + branch=master
[2024-03-07T16:13:28.135Z] + shift
[2024-03-07T16:13:28.135Z] + wget --quiet --output-document - https://github.com/Ouranosinc/pavics-sdi/archive/master.tar.gz
[2024-03-07T16:13:28.135Z] + tar xz
[2024-03-07T16:13:32.315Z] + ls
[2024-03-07T16:13:32.315Z] + grep pavics-sdi
[2024-03-07T16:13:32.315Z] pavics-sdi-master
[2024-03-07T16:13:32.315Z] + set +x
[2024-03-07T16:13:32.315Z] + rm -rf finch-*
[2024-03-07T16:13:32.315Z] + ls
[2024-03-07T16:13:32.315Z] + grep finch
[2024-03-07T16:13:32.315Z] + downloadrepos https://github.com/bird-house/finch master
[2024-03-07T16:13:32.315Z] + github_repo=https://github.com/bird-house/finch
[2024-03-07T16:13:32.315Z] + shift
[2024-03-07T16:13:32.315Z] + branch=master
[2024-03-07T16:13:32.315Z] + shift
[2024-03-07T16:13:32.315Z] + wget --quiet --output-document - https://github.com/bird-house/finch/archive/master.tar.gz
[2024-03-07T16:13:32.315Z] + tar xz
[2024-03-07T16:13:34.205Z] + ls
[2024-03-07T16:13:34.205Z] + grep finch
[2024-03-07T16:13:34.205Z] finch-master
[2024-03-07T16:13:34.205Z] + set +x
[2024-03-07T16:13:34.205Z] + rm -rf PAVICS-landing-*
[2024-03-07T16:13:34.205Z] + ls
[2024-03-07T16:13:34.205Z] + grep PAVICS-landing
[2024-03-07T16:13:34.205Z] + downloadrepos https://github.com/Ouranosinc/PAVICS-landing master
[2024-03-07T16:13:34.205Z] + github_repo=https://github.com/Ouranosinc/PAVICS-landing
[2024-03-07T16:13:34.205Z] + shift
[2024-03-07T16:13:34.205Z] + branch=master
[2024-03-07T16:13:34.205Z] + shift
[2024-03-07T16:13:34.205Z] + wget --quiet --output-document - https://github.com/Ouranosinc/PAVICS-landing/archive/master.tar.gz
[2024-03-07T16:13:34.205Z] + tar xz
[2024-03-07T16:13:49.067Z] + grep PAVICS-landing
[2024-03-07T16:13:49.067Z] + ls
[2024-03-07T16:13:49.067Z] PAVICS-landing-master
[2024-03-07T16:13:49.067Z] + set +x
[2024-03-07T16:13:49.067Z] + rm -rf raven-*
[2024-03-07T16:13:49.067Z] + ls
[2024-03-07T16:13:49.067Z] + grep raven
[2024-03-07T16:13:49.067Z] + downloadrepos https://github.com/Ouranosinc/raven main
[2024-03-07T16:13:49.067Z] + github_repo=https://github.com/Ouranosinc/raven
[2024-03-07T16:13:49.067Z] + shift
[2024-03-07T16:13:49.067Z] + branch=main
[2024-03-07T16:13:49.067Z] + shift
[2024-03-07T16:13:49.067Z] + tar xz
[2024-03-07T16:13:49.067Z] + wget --quiet --output-document - https://github.com/Ouranosinc/raven/archive/main.tar.gz
[2024-03-07T16:13:49.067Z] + ls
[2024-03-07T16:13:49.067Z] + grep raven
[2024-03-07T16:13:49.067Z] raven-main
[2024-03-07T16:13:49.067Z] + set +x
[2024-03-07T16:13:49.067Z] + rm -rf RavenPy-*
[2024-03-07T16:13:49.067Z] + ls
[2024-03-07T16:13:49.067Z] + grep RavenPy
[2024-03-07T16:13:49.068Z] + downloadrepos https://github.com/CSHS-CWRA/RavenPy master
[2024-03-07T16:13:49.068Z] + github_repo=https://github.com/CSHS-CWRA/RavenPy
[2024-03-07T16:13:49.068Z] + shift
[2024-03-07T16:13:49.068Z] + branch=master
[2024-03-07T16:13:49.068Z] + shift
[2024-03-07T16:13:49.068Z] + wget --quiet --output-document - https://github.com/CSHS-CWRA/RavenPy/archive/master.tar.gz
[2024-03-07T16:13:49.068Z] + tar xz
[2024-03-07T16:13:50.994Z] + ls
[2024-03-07T16:13:50.994Z] + grep RavenPy
[2024-03-07T16:13:50.994Z] RavenPy-master
[2024-03-07T16:13:50.994Z] + set +x
[2024-03-07T16:13:50.994Z] + rm -rf esgf-compute-api-*
[2024-03-07T16:13:50.994Z] + ls
[2024-03-07T16:13:50.994Z] + grep esgf-compute-api
[2024-03-07T16:13:50.994Z] + downloadrepos https://github.com/ESGF/esgf-compute-api devel
[2024-03-07T16:13:50.994Z] + github_repo=https://github.com/ESGF/esgf-compute-api
[2024-03-07T16:13:50.994Z] + shift
[2024-03-07T16:13:50.994Z] + branch=devel
[2024-03-07T16:13:50.994Z] + shift
[2024-03-07T16:13:50.994Z] + wget --quiet --output-document - https://github.com/ESGF/esgf-compute-api/archive/devel.tar.gz
[2024-03-07T16:13:50.994Z] + tar xz
[2024-03-07T16:13:51.927Z] + ls
[2024-03-07T16:13:51.927Z] + grep esgf-compute-api
[2024-03-07T16:13:51.927Z] esgf-compute-api-devel
[2024-03-07T16:13:51.927Z] + set +x
[2024-03-07T16:13:51.927Z] + echo master
[2024-03-07T16:13:51.927Z] + sed s@/@-@g
[2024-03-07T16:13:51.927Z] + PAVICS_SDI_BRANCH=master
[2024-03-07T16:13:51.927Z] + echo Ouranosinc/pavics-sdi
[2024-03-07T16:13:51.927Z] + sed s@^.*/@@g
[2024-03-07T16:13:51.927Z] + PAVICS_SDI_REPO_NAME=pavics-sdi
[2024-03-07T16:13:51.927Z] + echo master
[2024-03-07T16:13:51.927Z] + sed s@/@-@g
[2024-03-07T16:13:51.927Z] + FINCH_BRANCH=master
[2024-03-07T16:13:51.927Z] + echo bird-house/finch
[2024-03-07T16:13:51.927Z] + sed s@^.*/@@g
[2024-03-07T16:13:51.927Z] + FINCH_REPO_NAME=finch
[2024-03-07T16:13:51.927Z] + echo master
[2024-03-07T16:13:51.927Z] + sed s@/@-@g
[2024-03-07T16:13:51.927Z] + PAVICS_LANDING_BRANCH=master
[2024-03-07T16:13:51.927Z] + echo Ouranosinc/PAVICS-landing
[2024-03-07T16:13:51.927Z] + sed s@^.*/@@g
[2024-03-07T16:13:51.927Z] + PAVICS_LANDING_REPO_NAME=PAVICS-landing
[2024-03-07T16:13:51.927Z] + echo main
[2024-03-07T16:13:51.927Z] + sed s@/@-@g
[2024-03-07T16:13:51.927Z] + RAVEN_BRANCH=main
[2024-03-07T16:13:51.927Z] + echo Ouranosinc/raven
[2024-03-07T16:13:51.927Z] + sed s@^.*/@@g
[2024-03-07T16:13:51.927Z] + RAVEN_REPO_NAME=raven
[2024-03-07T16:13:51.927Z] + echo master
[2024-03-07T16:13:51.927Z] + sed s@/@-@g
[2024-03-07T16:13:51.927Z] + RAVENPY_BRANCH=master
[2024-03-07T16:13:51.927Z] + echo CSHS-CWRA/RavenPy
[2024-03-07T16:13:51.927Z] + sed s@^.*/@@g
[2024-03-07T16:13:51.927Z] + RAVENPY_REPO_NAME=RavenPy
[2024-03-07T16:13:51.927Z] + echo devel
[2024-03-07T16:13:51.927Z] + sed s@/@-@g
[2024-03-07T16:13:51.927Z] + ESGF_COMPUTE_API_BRANCH=devel
[2024-03-07T16:13:51.927Z] + echo ESGF/esgf-compute-api
[2024-03-07T16:13:51.927Z] + sed s@^.*/@@g
[2024-03-07T16:13:51.927Z] + ESGF_COMPUTE_API_REPO_NAME=esgf-compute-api
[2024-03-07T16:13:51.927Z] + echo pavics-sdi-master
[2024-03-07T16:13:51.927Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:13:51.927Z] + PAVICS_SDI_DIR=pavics-sdi-master
[2024-03-07T16:13:51.927Z] + echo finch-master
[2024-03-07T16:13:51.927Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:13:51.927Z] + FINCH_DIR=finch-master
[2024-03-07T16:13:51.927Z] + echo PAVICS-landing-master
[2024-03-07T16:13:51.927Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:13:51.927Z] + PAVICS_LANDING_DIR=PAVICS-landing-master
[2024-03-07T16:13:51.927Z] + echo raven-main
[2024-03-07T16:13:51.927Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:13:51.927Z] + RAVEN_DIR=raven-main
[2024-03-07T16:13:51.927Z] + echo RavenPy-master
[2024-03-07T16:13:51.927Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:13:51.927Z] + RAVENPY_DIR=RavenPy-master
[2024-03-07T16:13:51.927Z] + echo esgf-compute-api-devel
[2024-03-07T16:13:51.927Z] + sed s@[^a-zA-Z0-9_\-\.]@-@g
[2024-03-07T16:13:51.927Z] + ESGF_COMPUTE_API_DIR=esgf-compute-api-devel
[2024-03-07T16:13:51.927Z] + echo true
[2024-03-07T16:13:51.928Z] + tr [:upper:] [:lower:]
[2024-03-07T16:13:51.928Z] + VERIFY_SSL=true
[2024-03-07T16:13:51.928Z] + [ xtrue = xfalse ]
[2024-03-07T16:13:51.928Z] + rm -v finch-master/setup.cfg
[2024-03-07T16:13:51.928Z] removed 'finch-master/setup.cfg'
[2024-03-07T16:13:51.928Z] + rm -v raven-main/setup.cfg
[2024-03-07T16:13:51.928Z] removed 'raven-main/setup.cfg'
[2024-03-07T16:13:51.928Z] + rm -v raven-main/pyproject.toml
[2024-03-07T16:13:51.928Z] removed 'raven-main/pyproject.toml'
[2024-03-07T16:13:51.928Z] + rm -v RavenPy-master/setup.cfg
[2024-03-07T16:13:51.928Z] removed 'RavenPy-master/setup.cfg'
[2024-03-07T16:13:51.928Z] + rm -v RavenPy-master/tox.ini
[2024-03-07T16:13:51.928Z] removed 'RavenPy-master/tox.ini'
[2024-03-07T16:13:51.928Z] + rm -v RavenPy-master/pyproject.toml
[2024-03-07T16:13:51.928Z] removed 'RavenPy-master/pyproject.toml'
[2024-03-07T16:13:51.928Z] + rm -v esgf-compute-api-devel/setup.cfg
[2024-03-07T16:13:51.928Z] rm: cannot remove 'esgf-compute-api-devel/setup.cfg': No such file or directory
[2024-03-07T16:13:51.928Z] + rm -v esgf-compute-api-devel/tox.ini
[2024-03-07T16:13:51.928Z] rm: cannot remove 'esgf-compute-api-devel/tox.ini': No such file or directory
[2024-03-07T16:13:51.928Z] + echo false
[2024-03-07T16:13:51.928Z] + tr [:upper:] [:lower:]
[2024-03-07T16:13:51.928Z] + TEST_MAGPIE_AUTH=false
[2024-03-07T16:13:51.928Z] + echo false
[2024-03-07T16:13:51.928Z] + tr [:upper:] [:lower:]
[2024-03-07T16:13:51.928Z] + TEST_PAVICS_SDI_REPO=false
[2024-03-07T16:13:51.928Z] + echo false
[2024-03-07T16:13:51.928Z] + tr [:upper:] [:lower:]
[2024-03-07T16:13:51.928Z] + TEST_PAVICS_SDI_WEAVER=false
[2024-03-07T16:13:51.928Z] + echo false
[2024-03-07T16:13:51.928Z] + tr [:upper:] [:lower:]
[2024-03-07T16:13:51.928Z] + TEST_FINCH_REPO=false
[2024-03-07T16:13:51.928Z] + echo false
[2024-03-07T16:13:51.928Z] + tr [:upper:] [:lower:]
[2024-03-07T16:13:51.928Z] + TEST_PAVICS_LANDING_REPO=false
[2024-03-07T16:13:51.928Z] + echo true
[2024-03-07T16:13:51.928Z] + tr [:upper:] [:lower:]
[2024-03-07T16:13:51.928Z] + TEST_RAVEN_REPO=true
[2024-03-07T16:13:51.928Z] + echo true
[2024-03-07T16:13:51.928Z] + tr [:upper:] [:lower:]
[2024-03-07T16:13:51.928Z] + TEST_RAVENPY_REPO=true
[2024-03-07T16:13:51.928Z] + echo false
[2024-03-07T16:13:51.928Z] + tr [:upper:] [:lower:]
[2024-03-07T16:13:51.928Z] + TEST_ESGF_COMPUTE_API_REPO=false
[2024-03-07T16:13:51.928Z] + echo true
[2024-03-07T16:13:51.928Z] + tr [:upper:] [:lower:]
[2024-03-07T16:13:51.928Z] + TEST_LOCAL_NOTEBOOKS=true
[2024-03-07T16:13:51.928Z] + NOTEBOOKS_TO_TEST=
[2024-03-07T16:13:51.928Z] + [ xfalse = xtrue ]
[2024-03-07T16:13:51.928Z] + [ xfalse = xtrue ]
[2024-03-07T16:13:51.928Z] + [ xfalse = xtrue ]
[2024-03-07T16:13:51.928Z] + [ xfalse = xtrue ]
[2024-03-07T16:13:51.928Z] + [ xtrue = xtrue ]
[2024-03-07T16:13:51.928Z] + NOTEBOOKS_TO_TEST= raven-main/docs/source/notebooks/*.ipynb
[2024-03-07T16:13:51.928Z] + [ xtrue = xtrue ]
[2024-03-07T16:13:51.928Z] + NOTEBOOKS_TO_TEST= raven-main/docs/source/notebooks/*.ipynb RavenPy-master/docs/notebooks/*.ipynb
[2024-03-07T16:13:51.928Z] + NOTEBOOKS_TO_TEST= raven-main/docs/source/notebooks/*.ipynb RavenPy-master/docs/notebooks/*.ipynb RavenPy-master/docs/notebooks/paper/*.ipynb
[2024-03-07T16:13:51.928Z] + [ xfalse = xtrue ]
[2024-03-07T16:13:51.928Z] + [ xtrue = xtrue ]
[2024-03-07T16:13:51.928Z] + NOTEBOOKS_TO_TEST= raven-main/docs/source/notebooks/*.ipynb RavenPy-master/docs/notebooks/*.ipynb RavenPy-master/docs/notebooks/paper/*.ipynb notebooks/*.ipynb
[2024-03-07T16:13:51.929Z] + ./runtest  raven-main/docs/source/notebooks/*.ipynb RavenPy-master/docs/notebooks/*.ipynb RavenPy-master/docs/notebooks/paper/*.ipynb notebooks/*.ipynb
[2024-03-07T16:13:52.868Z] + [ -n  ]
[2024-03-07T16:13:52.869Z] + [ ! -z pavics.ouranos.ca ]
[2024-03-07T16:13:52.869Z] + echo Will run notebooks against pavics.ouranos.ca
[2024-03-07T16:13:52.869Z] Will run notebooks against pavics.ouranos.ca
[2024-03-07T16:13:52.869Z] + [ -z  ]
[2024-03-07T16:13:52.869Z] + sed -i /\(\.ncml\|TEST_USE_PROD_DATA\)/!s/pavics.ouranos.ca/pavics.ouranos.ca/g raven-main/docs/source/notebooks/Region_selection.ipynb raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb RavenPy-master/docs/notebooks/HydroShare_integration.ipynb RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb RavenPy-master/docs/notebooks/time_series_analysis.ipynb RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb notebooks/hummingbird.ipynb notebooks/stress-tests.ipynb
[2024-03-07T16:13:52.869Z] + git diff
[2024-03-07T16:13:52.869Z] + export PYTHONWARNINGS=ignore:Unverified HTTPS request
[2024-03-07T16:13:52.869Z] + py.test --nbval raven-main/docs/source/notebooks/Region_selection.ipynb raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb RavenPy-master/docs/notebooks/HydroShare_integration.ipynb RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb RavenPy-master/docs/notebooks/time_series_analysis.ipynb RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb notebooks/hummingbird.ipynb notebooks/stress-tests.ipynb --sanitize-with notebooks/output-sanitize.cfg --dist=loadscope --numprocesses=0 --nbval-lax
[2024-03-07T16:13:55.397Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/plugin.py:122: DeprecationWarning: --sanitize-with has been renamed to --nbval-sanitize-with
[2024-03-07T16:13:55.397Z]   warnings.warn("--sanitize-with has been renamed to --nbval-sanitize-with", DeprecationWarning)
[2024-03-07T16:13:55.657Z] ============================= test session starts ==============================
[2024-03-07T16:13:55.657Z] platform linux -- Python 3.10.13, pytest-8.0.2, pluggy-1.4.0
[2024-03-07T16:13:55.658Z] rootdir: /home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2
[2024-03-07T16:13:55.658Z] plugins: anyio-4.3.0, dash-2.16.0, nbval-0.11.0, tornasync-0.6.0.post2, xdist-3.5.0
[2024-03-07T16:13:55.658Z] collected 260 items
[2024-03-07T16:13:55.658Z] 
[2024-03-07T16:14:08.222Z] raven-main/docs/source/notebooks/Region_selection.ipynb .........        [  3%]
[2024-03-07T16:14:08.787Z] raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb . [  3%]
[2024-03-07T16:14:25.264Z] ......                                                                   [  6%]
[2024-03-07T16:14:27.176Z] RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb ...... [  8%]
[2024-03-07T16:14:27.176Z]                                                                          [  8%]
[2024-03-07T16:14:29.340Z] RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb .... [ 10%]
[2024-03-07T16:14:37.490Z] ....                                                                     [ 11%]
[2024-03-07T16:14:42.769Z] RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb . [ 11%]
[2024-03-07T16:15:02.732Z] ....FFFF.FF.F                                                            [ 16%]
[2024-03-07T16:15:44.192Z] RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb .......FF [ 20%]
[2024-03-07T16:16:53.095Z] .F                                                                       [ 21%]
[2024-03-07T16:16:57.313Z] RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb ... [ 22%]
[2024-03-07T16:17:06.117Z] ..FFFFFFFF.......                                                        [ 28%]
[2024-03-07T16:17:12.852Z] RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb .. [ 29%]
[2024-03-07T16:17:23.593Z] ...........                                                              [ 33%]
[2024-03-07T16:18:31.320Z] RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb EEEEEE          [ 36%]
[2024-03-07T16:18:33.849Z] RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb . [ 36%]
[2024-03-07T16:18:39.401Z] .....                                                                    [ 38%]
[2024-03-07T16:18:40.792Z] RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb . [ 38%]
[2024-03-07T16:23:23.421Z] .................                                                        [ 45%]
[2024-03-07T16:23:28.684Z] RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb . [ 45%]
[2024-03-07T16:23:36.774Z] ....                                                                     [ 47%]
[2024-03-07T16:24:43.383Z] RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb ........        [ 50%]
[2024-03-07T16:24:53.347Z] RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb .. [ 51%]
[2024-03-07T16:25:25.528Z] ......                                                                   [ 53%]
[2024-03-07T16:25:33.698Z] RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb . [ 53%]
[2024-03-07T16:25:42.619Z] .......                                                                  [ 56%]
[2024-03-07T16:25:50.216Z] RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb .... [ 58%]
[2024-03-07T16:26:10.180Z] ....                                                                     [ 59%]
[2024-03-07T16:26:18.296Z] RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb . [ 60%]
[2024-03-07T16:26:37.635Z] .......                                                                  [ 62%]
[2024-03-07T16:26:40.917Z] RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb . [ 63%]
[2024-03-07T16:27:07.198Z] .......                                                                  [ 65%]
[2024-03-07T16:27:11.406Z] RavenPy-master/docs/notebooks/HydroShare_integration.ipynb FFFF          [ 67%]
[2024-03-07T16:27:22.067Z] RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb .. [ 68%]
[2024-03-07T16:27:29.300Z] ....                                                                     [ 69%]
[2024-03-07T16:28:22.345Z] RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb ...    [ 70%]
[2024-03-07T16:28:52.833Z] RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb .......      [ 73%]
[2024-03-07T16:28:52.833Z] RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb . [ 73%]
[2024-03-07T16:29:06.683Z] .............                                                            [ 78%]
[2024-03-07T16:29:26.895Z] RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb .....           [ 80%]
[2024-03-07T16:29:33.984Z] RavenPy-master/docs/notebooks/time_series_analysis.ipynb ...........     [ 85%]
[2024-03-07T16:29:43.961Z] RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb . [ 85%]
[2024-03-07T16:31:04.765Z] ......FFFFFFFFFFFFFF                                                     [ 93%]
[2024-03-07T16:31:07.197Z] notebooks/hummingbird.ipynb ............                                 [ 97%]
[2024-03-07T16:33:08.625Z] notebooks/stress-tests.ipynb ......                                      [100%]
[2024-03-07T16:33:08.625Z] 
[2024-03-07T16:33:08.625Z] ==================================== ERRORS ====================================
[2024-03-07T16:33:08.625Z] _ ERROR at setup of RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 0 _
[2024-03-07T16:33:08.625Z] 
[2024-03-07T16:33:08.625Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.625Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abbb0b520>
[2024-03-07T16:33:08.625Z] when = 'setup'
[2024-03-07T16:33:08.625Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.625Z] 
[2024-03-07T16:33:08.625Z]     @classmethod
[2024-03-07T16:33:08.625Z]     def from_call(
[2024-03-07T16:33:08.625Z]         cls,
[2024-03-07T16:33:08.625Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.625Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.625Z]         reraise: Optional[
[2024-03-07T16:33:08.625Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.625Z]         ] = None,
[2024-03-07T16:33:08.625Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.625Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.625Z]     
[2024-03-07T16:33:08.625Z]         :param func:
[2024-03-07T16:33:08.625Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.625Z]         :param when:
[2024-03-07T16:33:08.625Z]             The phase in which the function is called.
[2024-03-07T16:33:08.625Z]         :param reraise:
[2024-03-07T16:33:08.625Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.625Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.625Z]         """
[2024-03-07T16:33:08.625Z]         excinfo = None
[2024-03-07T16:33:08.625Z]         start = timing.time()
[2024-03-07T16:33:08.625Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.625Z]         try:
[2024-03-07T16:33:08.625Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.625Z] 
[2024-03-07T16:33:08.625Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.625Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.625Z] 
[2024-03-07T16:33:08.625Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.625Z]     )
[2024-03-07T16:33:08.625Z] 
[2024-03-07T16:33:08.625Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.625Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.625Z] 
[2024-03-07T16:33:08.625Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.625Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.625Z] 
[2024-03-07T16:33:08.625Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.625Z]         """Call the hook.
[2024-03-07T16:33:08.625Z]     
[2024-03-07T16:33:08.625Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.625Z]         specification.
[2024-03-07T16:33:08.625Z]     
[2024-03-07T16:33:08.625Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.625Z]         :ref:`calling`.
[2024-03-07T16:33:08.625Z]         """
[2024-03-07T16:33:08.625Z]         assert (
[2024-03-07T16:33:08.626Z]             not self.is_historic()
[2024-03-07T16:33:08.626Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.626Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.626Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.626Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.626Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.626Z] 
[2024-03-07T16:33:08.626Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.626Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.626Z] 
[2024-03-07T16:33:08.626Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.626Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.626Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.626Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.626Z] 
[2024-03-07T16:33:08.626Z]     def _hookexec(
[2024-03-07T16:33:08.626Z]         self,
[2024-03-07T16:33:08.626Z]         hook_name: str,
[2024-03-07T16:33:08.626Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.626Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.626Z]         firstresult: bool,
[2024-03-07T16:33:08.626Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.626Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.626Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.626Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.626Z] 
[2024-03-07T16:33:08.626Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.626Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.626Z] 
[2024-03-07T16:33:08.626Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.626Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.626Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.626Z] 
[2024-03-07T16:33:08.626Z]     def _multicall(
[2024-03-07T16:33:08.626Z]         hook_name: str,
[2024-03-07T16:33:08.626Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.626Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.626Z]         firstresult: bool,
[2024-03-07T16:33:08.626Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.626Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.626Z]         result(s).
[2024-03-07T16:33:08.626Z]     
[2024-03-07T16:33:08.626Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.626Z]         """
[2024-03-07T16:33:08.626Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.626Z]         results: list[object] = []
[2024-03-07T16:33:08.626Z]         exception = None
[2024-03-07T16:33:08.626Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.626Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.626Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.626Z]             try:
[2024-03-07T16:33:08.626Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.626Z]                     try:
[2024-03-07T16:33:08.626Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.626Z]                     except KeyError:
[2024-03-07T16:33:08.626Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.626Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.626Z]                                 raise HookCallError(
[2024-03-07T16:33:08.626Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.626Z]                                 )
[2024-03-07T16:33:08.626Z]     
[2024-03-07T16:33:08.626Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.626Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.626Z]                         try:
[2024-03-07T16:33:08.626Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.626Z]                             # which is the desired response.
[2024-03-07T16:33:08.626Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.626Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.626Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.626Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.626Z]                         except StopIteration:
[2024-03-07T16:33:08.626Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.626Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.626Z]                         try:
[2024-03-07T16:33:08.626Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.626Z]                             # which is the desired response.
[2024-03-07T16:33:08.626Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.626Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.626Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.626Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.626Z]                         except StopIteration:
[2024-03-07T16:33:08.626Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.626Z]                     else:
[2024-03-07T16:33:08.626Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.626Z]                         if res is not None:
[2024-03-07T16:33:08.626Z]                             results.append(res)
[2024-03-07T16:33:08.626Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.626Z]                                 break
[2024-03-07T16:33:08.626Z]             except BaseException as exc:
[2024-03-07T16:33:08.626Z]                 exception = exc
[2024-03-07T16:33:08.626Z]         finally:
[2024-03-07T16:33:08.626Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.626Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.626Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.626Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.626Z]                 else:
[2024-03-07T16:33:08.626Z]                     result = results
[2024-03-07T16:33:08.626Z]     
[2024-03-07T16:33:08.626Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.626Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.626Z]                     try:
[2024-03-07T16:33:08.626Z]                         if exception is not None:
[2024-03-07T16:33:08.626Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.626Z]                         else:
[2024-03-07T16:33:08.626Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.626Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.626Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.626Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.626Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.626Z]                     except StopIteration as si:
[2024-03-07T16:33:08.626Z]                         result = si.value
[2024-03-07T16:33:08.626Z]                         exception = None
[2024-03-07T16:33:08.626Z]                         continue
[2024-03-07T16:33:08.626Z]                     except BaseException as e:
[2024-03-07T16:33:08.626Z]                         exception = e
[2024-03-07T16:33:08.626Z]                         continue
[2024-03-07T16:33:08.626Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.626Z]     
[2024-03-07T16:33:08.626Z]                 if exception is not None:
[2024-03-07T16:33:08.626Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.626Z] 
[2024-03-07T16:33:08.626Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.626Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.626Z] 
[2024-03-07T16:33:08.626Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.627Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.627Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.627Z] 
[2024-03-07T16:33:08.627Z]     def _multicall(
[2024-03-07T16:33:08.627Z]         hook_name: str,
[2024-03-07T16:33:08.627Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.627Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.627Z]         firstresult: bool,
[2024-03-07T16:33:08.627Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.627Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.627Z]         result(s).
[2024-03-07T16:33:08.627Z]     
[2024-03-07T16:33:08.627Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.627Z]         """
[2024-03-07T16:33:08.627Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.627Z]         results: list[object] = []
[2024-03-07T16:33:08.627Z]         exception = None
[2024-03-07T16:33:08.627Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.627Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.627Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.627Z]             try:
[2024-03-07T16:33:08.627Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.627Z]                     try:
[2024-03-07T16:33:08.627Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.627Z]                     except KeyError:
[2024-03-07T16:33:08.627Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.627Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.627Z]                                 raise HookCallError(
[2024-03-07T16:33:08.627Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.627Z]                                 )
[2024-03-07T16:33:08.627Z]     
[2024-03-07T16:33:08.627Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.627Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.627Z]                         try:
[2024-03-07T16:33:08.627Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.627Z]                             # which is the desired response.
[2024-03-07T16:33:08.627Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.627Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.627Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.627Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.627Z]                         except StopIteration:
[2024-03-07T16:33:08.627Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.627Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.627Z]                         try:
[2024-03-07T16:33:08.627Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.627Z]                             # which is the desired response.
[2024-03-07T16:33:08.627Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.627Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.627Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.627Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.627Z]                         except StopIteration:
[2024-03-07T16:33:08.627Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.627Z]                     else:
[2024-03-07T16:33:08.627Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.627Z]                         if res is not None:
[2024-03-07T16:33:08.627Z]                             results.append(res)
[2024-03-07T16:33:08.627Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.627Z]                                 break
[2024-03-07T16:33:08.627Z]             except BaseException as exc:
[2024-03-07T16:33:08.627Z]                 exception = exc
[2024-03-07T16:33:08.627Z]         finally:
[2024-03-07T16:33:08.627Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.627Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.627Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.627Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.627Z]                 else:
[2024-03-07T16:33:08.627Z]                     result = results
[2024-03-07T16:33:08.627Z]     
[2024-03-07T16:33:08.627Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.627Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.627Z]                     try:
[2024-03-07T16:33:08.627Z]                         if exception is not None:
[2024-03-07T16:33:08.627Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.627Z] 
[2024-03-07T16:33:08.627Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.627Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.627Z] 
[2024-03-07T16:33:08.627Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.627Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.627Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.627Z] 
[2024-03-07T16:33:08.627Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.627Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.627Z] 
[2024-03-07T16:33:08.627Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.627Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.627Z]             try:
[2024-03-07T16:33:08.627Z] >               yield
[2024-03-07T16:33:08.627Z] 
[2024-03-07T16:33:08.627Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.627Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.627Z] 
[2024-03-07T16:33:08.627Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.627Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.627Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.627Z] 
[2024-03-07T16:33:08.627Z]     def _multicall(
[2024-03-07T16:33:08.627Z]         hook_name: str,
[2024-03-07T16:33:08.627Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.627Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.627Z]         firstresult: bool,
[2024-03-07T16:33:08.627Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.627Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.627Z]         result(s).
[2024-03-07T16:33:08.627Z]     
[2024-03-07T16:33:08.627Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.627Z]         """
[2024-03-07T16:33:08.627Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.627Z]         results: list[object] = []
[2024-03-07T16:33:08.627Z]         exception = None
[2024-03-07T16:33:08.627Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.627Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.627Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.627Z]             try:
[2024-03-07T16:33:08.627Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.627Z]                     try:
[2024-03-07T16:33:08.627Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.627Z]                     except KeyError:
[2024-03-07T16:33:08.627Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.627Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.627Z]                                 raise HookCallError(
[2024-03-07T16:33:08.627Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.627Z]                                 )
[2024-03-07T16:33:08.627Z]     
[2024-03-07T16:33:08.627Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.627Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.627Z]                         try:
[2024-03-07T16:33:08.627Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.627Z]                             # which is the desired response.
[2024-03-07T16:33:08.627Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.627Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.627Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.627Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.627Z]                         except StopIteration:
[2024-03-07T16:33:08.627Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.627Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.627Z]                         try:
[2024-03-07T16:33:08.628Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.628Z]                             # which is the desired response.
[2024-03-07T16:33:08.628Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.628Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.628Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.628Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.628Z]                         except StopIteration:
[2024-03-07T16:33:08.628Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.628Z]                     else:
[2024-03-07T16:33:08.628Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.628Z]                         if res is not None:
[2024-03-07T16:33:08.628Z]                             results.append(res)
[2024-03-07T16:33:08.628Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.628Z]                                 break
[2024-03-07T16:33:08.628Z]             except BaseException as exc:
[2024-03-07T16:33:08.628Z]                 exception = exc
[2024-03-07T16:33:08.628Z]         finally:
[2024-03-07T16:33:08.628Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.628Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.628Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.628Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.628Z]                 else:
[2024-03-07T16:33:08.628Z]                     result = results
[2024-03-07T16:33:08.628Z]     
[2024-03-07T16:33:08.628Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.628Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.628Z]                     try:
[2024-03-07T16:33:08.628Z]                         if exception is not None:
[2024-03-07T16:33:08.628Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.628Z] 
[2024-03-07T16:33:08.628Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.628Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.628Z] 
[2024-03-07T16:33:08.628Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.628Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.628Z] 
[2024-03-07T16:33:08.628Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.628Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.628Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.628Z]     
[2024-03-07T16:33:08.628Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.628Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.628Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.628Z] 
[2024-03-07T16:33:08.628Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.628Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.628Z] 
[2024-03-07T16:33:08.628Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.628Z] item = <IPyNbCell Cell 0>, when = 'setup'
[2024-03-07T16:33:08.628Z] 
[2024-03-07T16:33:08.628Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.628Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.628Z]         with catching_logs(
[2024-03-07T16:33:08.628Z]             self.caplog_handler,
[2024-03-07T16:33:08.628Z]             level=self.log_level,
[2024-03-07T16:33:08.628Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.628Z]             self.report_handler,
[2024-03-07T16:33:08.628Z]             level=self.log_level,
[2024-03-07T16:33:08.628Z]         ) as report_handler:
[2024-03-07T16:33:08.628Z]             caplog_handler.reset()
[2024-03-07T16:33:08.628Z]             report_handler.reset()
[2024-03-07T16:33:08.628Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.628Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.628Z]     
[2024-03-07T16:33:08.628Z]             try:
[2024-03-07T16:33:08.628Z] >               yield
[2024-03-07T16:33:08.628Z] 
[2024-03-07T16:33:08.628Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.628Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.628Z] 
[2024-03-07T16:33:08.628Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.628Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.628Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.628Z] 
[2024-03-07T16:33:08.628Z]     def _multicall(
[2024-03-07T16:33:08.628Z]         hook_name: str,
[2024-03-07T16:33:08.628Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.628Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.628Z]         firstresult: bool,
[2024-03-07T16:33:08.628Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.628Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.628Z]         result(s).
[2024-03-07T16:33:08.628Z]     
[2024-03-07T16:33:08.628Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.628Z]         """
[2024-03-07T16:33:08.628Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.628Z]         results: list[object] = []
[2024-03-07T16:33:08.628Z]         exception = None
[2024-03-07T16:33:08.628Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.628Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.628Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.628Z]             try:
[2024-03-07T16:33:08.628Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.628Z]                     try:
[2024-03-07T16:33:08.628Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.628Z]                     except KeyError:
[2024-03-07T16:33:08.628Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.628Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.628Z]                                 raise HookCallError(
[2024-03-07T16:33:08.628Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.628Z]                                 )
[2024-03-07T16:33:08.628Z]     
[2024-03-07T16:33:08.628Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.628Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.628Z]                         try:
[2024-03-07T16:33:08.628Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.628Z]                             # which is the desired response.
[2024-03-07T16:33:08.628Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.628Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.628Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.628Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.628Z]                         except StopIteration:
[2024-03-07T16:33:08.628Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.628Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.628Z]                         try:
[2024-03-07T16:33:08.628Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.628Z]                             # which is the desired response.
[2024-03-07T16:33:08.628Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.628Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.628Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.628Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.628Z]                         except StopIteration:
[2024-03-07T16:33:08.628Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.628Z]                     else:
[2024-03-07T16:33:08.628Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.628Z]                         if res is not None:
[2024-03-07T16:33:08.628Z]                             results.append(res)
[2024-03-07T16:33:08.628Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.628Z]                                 break
[2024-03-07T16:33:08.628Z]             except BaseException as exc:
[2024-03-07T16:33:08.628Z]                 exception = exc
[2024-03-07T16:33:08.628Z]         finally:
[2024-03-07T16:33:08.628Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.628Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.628Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.628Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.628Z]                 else:
[2024-03-07T16:33:08.629Z]                     result = results
[2024-03-07T16:33:08.629Z]     
[2024-03-07T16:33:08.629Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.629Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.629Z]                     try:
[2024-03-07T16:33:08.629Z]                         if exception is not None:
[2024-03-07T16:33:08.629Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.629Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.629Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.629Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.629Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.629Z] >           return (yield)
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.629Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.629Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.629Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z]     def _multicall(
[2024-03-07T16:33:08.629Z]         hook_name: str,
[2024-03-07T16:33:08.629Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.629Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.629Z]         firstresult: bool,
[2024-03-07T16:33:08.629Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.629Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.629Z]         result(s).
[2024-03-07T16:33:08.629Z]     
[2024-03-07T16:33:08.629Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.629Z]         """
[2024-03-07T16:33:08.629Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.629Z]         results: list[object] = []
[2024-03-07T16:33:08.629Z]         exception = None
[2024-03-07T16:33:08.629Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.629Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.629Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.629Z]             try:
[2024-03-07T16:33:08.629Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.629Z]                     try:
[2024-03-07T16:33:08.629Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.629Z]                     except KeyError:
[2024-03-07T16:33:08.629Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.629Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.629Z]                                 raise HookCallError(
[2024-03-07T16:33:08.629Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.629Z]                                 )
[2024-03-07T16:33:08.629Z]     
[2024-03-07T16:33:08.629Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.629Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.629Z]                         try:
[2024-03-07T16:33:08.629Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.629Z]                             # which is the desired response.
[2024-03-07T16:33:08.629Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.629Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.629Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.629Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.629Z]                         except StopIteration:
[2024-03-07T16:33:08.629Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.629Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.629Z]                         try:
[2024-03-07T16:33:08.629Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.629Z]                             # which is the desired response.
[2024-03-07T16:33:08.629Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.629Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.629Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.629Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.629Z]                         except StopIteration:
[2024-03-07T16:33:08.629Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.629Z]                     else:
[2024-03-07T16:33:08.629Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.629Z]                         if res is not None:
[2024-03-07T16:33:08.629Z]                             results.append(res)
[2024-03-07T16:33:08.629Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.629Z]                                 break
[2024-03-07T16:33:08.629Z]             except BaseException as exc:
[2024-03-07T16:33:08.629Z]                 exception = exc
[2024-03-07T16:33:08.629Z]         finally:
[2024-03-07T16:33:08.629Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.629Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.629Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.629Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.629Z]                 else:
[2024-03-07T16:33:08.629Z]                     result = results
[2024-03-07T16:33:08.629Z]     
[2024-03-07T16:33:08.629Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.629Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.629Z]                     try:
[2024-03-07T16:33:08.629Z]                         if exception is not None:
[2024-03-07T16:33:08.629Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.629Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.629Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.629Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.629Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.629Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.629Z]             try:
[2024-03-07T16:33:08.629Z] >               yield
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.629Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.629Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.629Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.629Z] 
[2024-03-07T16:33:08.629Z]     def _multicall(
[2024-03-07T16:33:08.629Z]         hook_name: str,
[2024-03-07T16:33:08.629Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.629Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.629Z]         firstresult: bool,
[2024-03-07T16:33:08.629Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.629Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.629Z]         result(s).
[2024-03-07T16:33:08.629Z]     
[2024-03-07T16:33:08.629Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.629Z]         """
[2024-03-07T16:33:08.629Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.629Z]         results: list[object] = []
[2024-03-07T16:33:08.630Z]         exception = None
[2024-03-07T16:33:08.630Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.630Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.630Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.630Z]             try:
[2024-03-07T16:33:08.630Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.630Z]                     try:
[2024-03-07T16:33:08.630Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.630Z]                     except KeyError:
[2024-03-07T16:33:08.630Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.630Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.630Z]                                 raise HookCallError(
[2024-03-07T16:33:08.630Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.630Z]                                 )
[2024-03-07T16:33:08.630Z]     
[2024-03-07T16:33:08.630Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.630Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.630Z]                         try:
[2024-03-07T16:33:08.630Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.630Z]                             # which is the desired response.
[2024-03-07T16:33:08.630Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.630Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.630Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.630Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.630Z]                         except StopIteration:
[2024-03-07T16:33:08.630Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.630Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.630Z]                         try:
[2024-03-07T16:33:08.630Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.630Z]                             # which is the desired response.
[2024-03-07T16:33:08.630Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.630Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.630Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.630Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.630Z]                         except StopIteration:
[2024-03-07T16:33:08.630Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.630Z]                     else:
[2024-03-07T16:33:08.630Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.630Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.630Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.630Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.630Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.630Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.630Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.630Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.630Z]     
[2024-03-07T16:33:08.630Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.630Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.630Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.630Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.630Z]             if exc:
[2024-03-07T16:33:08.630Z]                 raise exc
[2024-03-07T16:33:08.630Z]     
[2024-03-07T16:33:08.630Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.630Z]             assert col not in self.stack
[2024-03-07T16:33:08.630Z]             # Push onto the stack.
[2024-03-07T16:33:08.630Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.630Z]             try:
[2024-03-07T16:33:08.630Z]                 col.setup()
[2024-03-07T16:33:08.630Z]             except TEST_OUTCOME as exc:
[2024-03-07T16:33:08.630Z]                 self.stack[col] = (self.stack[col][0], exc)
[2024-03-07T16:33:08.630Z] >               raise exc
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:514: 
[2024-03-07T16:33:08.630Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.630Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.630Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.630Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.630Z]     
[2024-03-07T16:33:08.630Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.630Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.630Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.630Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.630Z]             if exc:
[2024-03-07T16:33:08.630Z]                 raise exc
[2024-03-07T16:33:08.630Z]     
[2024-03-07T16:33:08.630Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.630Z]             assert col not in self.stack
[2024-03-07T16:33:08.630Z]             # Push onto the stack.
[2024-03-07T16:33:08.630Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.630Z]             try:
[2024-03-07T16:33:08.630Z] >               col.setup()
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:511: 
[2024-03-07T16:33:08.630Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z] self = <IPyNbFile 06_Raven_calibration.ipynb>
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z]     def setup(self):
[2024-03-07T16:33:08.630Z]         """
[2024-03-07T16:33:08.630Z]         Called by pytest to setup the collector cells in .
[2024-03-07T16:33:08.630Z]         Here we start a kernel and setup the sanitize patterns.
[2024-03-07T16:33:08.630Z]         """
[2024-03-07T16:33:08.630Z]         # we've already checked that --nbval-current-env and
[2024-03-07T16:33:08.630Z]         # --nbval-kernel-name were not both supplied
[2024-03-07T16:33:08.630Z]         if self.parent.config.option.nbval_current_env:
[2024-03-07T16:33:08.630Z]             kernel_name = CURRENT_ENV_KERNEL_NAME
[2024-03-07T16:33:08.630Z]         elif self.parent.config.option.nbval_kernel_name:
[2024-03-07T16:33:08.630Z]             kernel_name = self.parent.config.option.nbval_kernel_name
[2024-03-07T16:33:08.630Z]         else:
[2024-03-07T16:33:08.630Z]             kernel_name = self.nb.metadata.get(
[2024-03-07T16:33:08.630Z]                 'kernelspec', {}).get('name', 'python')
[2024-03-07T16:33:08.630Z] >       self.kernel = RunningKernel(
[2024-03-07T16:33:08.630Z]             kernel_name,
[2024-03-07T16:33:08.630Z]             cwd=str(self.fspath.dirname),
[2024-03-07T16:33:08.630Z]             startup_timeout=self.config.option.nbval_kernel_startup_timeout,
[2024-03-07T16:33:08.630Z]         )
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/plugin.py:264: 
[2024-03-07T16:33:08.630Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z] self = <nbval.kernel.RunningKernel object at 0x7f0abb8c4d60>
[2024-03-07T16:33:08.630Z] kernel_name = 'python'
[2024-03-07T16:33:08.630Z] cwd = '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks'
[2024-03-07T16:33:08.630Z] startup_timeout = 60
[2024-03-07T16:33:08.630Z] 
[2024-03-07T16:33:08.630Z]     def __init__(self, kernel_name, cwd=None, startup_timeout=60):
[2024-03-07T16:33:08.630Z]         """
[2024-03-07T16:33:08.630Z]         Initialise a new kernel
[2024-03-07T16:33:08.630Z]         specify that matplotlib is inline and connect the stderr.
[2024-03-07T16:33:08.630Z]         Stores the active kernel process and its manager.
[2024-03-07T16:33:08.631Z]         """
[2024-03-07T16:33:08.631Z]     
[2024-03-07T16:33:08.631Z] >       self.km, self.kc = start_new_kernel(
[2024-03-07T16:33:08.631Z]             startup_timeout=startup_timeout,
[2024-03-07T16:33:08.631Z]             kernel_name=kernel_name,
[2024-03-07T16:33:08.631Z]             stderr=open(os.devnull, 'w'),
[2024-03-07T16:33:08.631Z]             cwd=cwd,
[2024-03-07T16:33:08.631Z]         )
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:85: 
[2024-03-07T16:33:08.631Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] startup_timeout = 60, kernel_name = 'python'
[2024-03-07T16:33:08.631Z] kwargs = {'cwd': '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks', 'stderr': <_io.TextIOWrapper name='/dev/null' mode='w' encoding='UTF-8'>}
[2024-03-07T16:33:08.631Z] km = <jupyter_client.manager.KernelManager object at 0x7f0abb8c7580>
[2024-03-07T16:33:08.631Z] kc = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z]     def start_new_kernel(startup_timeout=60, kernel_name='python', **kwargs):
[2024-03-07T16:33:08.631Z]         """Start a new kernel, and return its Manager and Client"""
[2024-03-07T16:33:08.631Z]         logger.debug('Starting new kernel: "%s"' % kernel_name)
[2024-03-07T16:33:08.631Z]         km = KernelManager(kernel_name=kernel_name,
[2024-03-07T16:33:08.631Z]                            kernel_spec_manager=NbvalKernelspecManager())
[2024-03-07T16:33:08.631Z]         km.start_kernel(**kwargs)
[2024-03-07T16:33:08.631Z]         kc = km.client()
[2024-03-07T16:33:08.631Z]         kc.start_channels()
[2024-03-07T16:33:08.631Z]         try:
[2024-03-07T16:33:08.631Z] >           kc.wait_for_ready(timeout=startup_timeout)
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:57: 
[2024-03-07T16:33:08.631Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.631Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.631Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.631Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.631Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.631Z]         try:
[2024-03-07T16:33:08.631Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.631Z]         except RuntimeError:
[2024-03-07T16:33:08.631Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.631Z]             try:
[2024-03-07T16:33:08.631Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.631Z]             except RuntimeError:
[2024-03-07T16:33:08.631Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.631Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.631Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.631Z]     
[2024-03-07T16:33:08.631Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.631Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.631Z]         try:
[2024-03-07T16:33:08.631Z]             return loop.run_until_complete(future)
[2024-03-07T16:33:08.631Z]         except BaseException as e:
[2024-03-07T16:33:08.631Z]             future.cancel()
[2024-03-07T16:33:08.631Z] >           raise e
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:30: 
[2024-03-07T16:33:08.631Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.631Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.631Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.631Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.631Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.631Z]         try:
[2024-03-07T16:33:08.631Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.631Z]         except RuntimeError:
[2024-03-07T16:33:08.631Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.631Z]             try:
[2024-03-07T16:33:08.631Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.631Z]             except RuntimeError:
[2024-03-07T16:33:08.631Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.631Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.631Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.631Z]     
[2024-03-07T16:33:08.631Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.631Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.631Z]         try:
[2024-03-07T16:33:08.631Z] >           return loop.run_until_complete(future)
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:27: 
[2024-03-07T16:33:08.631Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] self = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.631Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z]     def run_until_complete(self, future):
[2024-03-07T16:33:08.631Z]         with manage_run(self):
[2024-03-07T16:33:08.631Z]             f = asyncio.ensure_future(future, loop=self)
[2024-03-07T16:33:08.631Z]             if f is not future:
[2024-03-07T16:33:08.631Z]                 f._log_destroy_pending = False
[2024-03-07T16:33:08.631Z]             while not f.done():
[2024-03-07T16:33:08.631Z]                 self._run_once()
[2024-03-07T16:33:08.631Z]                 if self._stopping:
[2024-03-07T16:33:08.631Z]                     break
[2024-03-07T16:33:08.631Z]             if not f.done():
[2024-03-07T16:33:08.631Z]                 raise RuntimeError(
[2024-03-07T16:33:08.631Z]                     'Event loop stopped before Future completed.')
[2024-03-07T16:33:08.631Z] >           return f.result()
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py:98: 
[2024-03-07T16:33:08.631Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] self = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z]     def result(self):
[2024-03-07T16:33:08.631Z]         """Return the result this future represents.
[2024-03-07T16:33:08.631Z]     
[2024-03-07T16:33:08.631Z]         If the future has been cancelled, raises CancelledError.  If the
[2024-03-07T16:33:08.631Z]         future's result isn't yet available, raises InvalidStateError.  If
[2024-03-07T16:33:08.631Z]         the future is done and has an exception set, this exception is raised.
[2024-03-07T16:33:08.631Z]         """
[2024-03-07T16:33:08.631Z]         if self._state == _CANCELLED:
[2024-03-07T16:33:08.631Z]             exc = self._make_cancelled_error()
[2024-03-07T16:33:08.631Z]             raise exc
[2024-03-07T16:33:08.631Z]         if self._state != _FINISHED:
[2024-03-07T16:33:08.631Z]             raise exceptions.InvalidStateError('Result is not ready.')
[2024-03-07T16:33:08.631Z]         self.__log_traceback = False
[2024-03-07T16:33:08.631Z]         if self._exception is not None:
[2024-03-07T16:33:08.631Z] >           raise self._exception.with_traceback(self._exception_tb)
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/futures.py:201: 
[2024-03-07T16:33:08.631Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z] self = None
[2024-03-07T16:33:08.631Z] 
[2024-03-07T16:33:08.631Z]     def __step(self, exc=None):
[2024-03-07T16:33:08.631Z]         if self.done():
[2024-03-07T16:33:08.631Z]             raise exceptions.InvalidStateError(
[2024-03-07T16:33:08.631Z]                 f'_step(): already done: {self!r}, {exc!r}')
[2024-03-07T16:33:08.631Z]         if self._must_cancel:
[2024-03-07T16:33:08.631Z]             if not isinstance(exc, exceptions.CancelledError):
[2024-03-07T16:33:08.631Z]                 exc = self._make_cancelled_error()
[2024-03-07T16:33:08.631Z]             self._must_cancel = False
[2024-03-07T16:33:08.631Z]         coro = self._coro
[2024-03-07T16:33:08.631Z]         self._fut_waiter = None
[2024-03-07T16:33:08.631Z]     
[2024-03-07T16:33:08.631Z]         _enter_task(self._loop, self)
[2024-03-07T16:33:08.631Z]         # Call either coro.throw(exc) or coro.send(None).
[2024-03-07T16:33:08.631Z]         try:
[2024-03-07T16:33:08.631Z]             if exc is None:
[2024-03-07T16:33:08.632Z]                 # We use the `send` method directly, because coroutines
[2024-03-07T16:33:08.632Z]                 # don't have `__iter__` and `__next__` methods.
[2024-03-07T16:33:08.632Z] >               result = coro.send(None)
[2024-03-07T16:33:08.632Z] 
[2024-03-07T16:33:08.632Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/tasks.py:232: 
[2024-03-07T16:33:08.632Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.632Z] 
[2024-03-07T16:33:08.632Z] self = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.632Z] timeout = 60
[2024-03-07T16:33:08.632Z] 
[2024-03-07T16:33:08.632Z]     async def _async_wait_for_ready(self, timeout: t.Optional[float] = None) -> None:
[2024-03-07T16:33:08.632Z]         """Waits for a response when a client is blocked
[2024-03-07T16:33:08.632Z]     
[2024-03-07T16:33:08.632Z]         - Sets future time for timeout
[2024-03-07T16:33:08.632Z]         - Blocks on shell channel until a message is received
[2024-03-07T16:33:08.632Z]         - Exit if the kernel has died
[2024-03-07T16:33:08.632Z]         - If client times out before receiving a message from the kernel, send RuntimeError
[2024-03-07T16:33:08.632Z]         - Flush the IOPub channel
[2024-03-07T16:33:08.632Z]         """
[2024-03-07T16:33:08.632Z]         if timeout is None:
[2024-03-07T16:33:08.632Z]             timeout = float("inf")
[2024-03-07T16:33:08.632Z]         abs_timeout = time.time() + timeout
[2024-03-07T16:33:08.632Z]     
[2024-03-07T16:33:08.632Z]         from .manager import KernelManager
[2024-03-07T16:33:08.632Z]     
[2024-03-07T16:33:08.632Z]         if not isinstance(self.parent, KernelManager):
[2024-03-07T16:33:08.632Z]             # This Client was not created by a KernelManager,
[2024-03-07T16:33:08.632Z]             # so wait for kernel to become responsive to heartbeats
[2024-03-07T16:33:08.632Z]             # before checking for kernel_info reply
[2024-03-07T16:33:08.632Z]             while not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.632Z]                 if time.time() > abs_timeout:
[2024-03-07T16:33:08.632Z]                     raise RuntimeError(
[2024-03-07T16:33:08.632Z]                         "Kernel didn't respond to heartbeats in %d seconds and timed out" % timeout
[2024-03-07T16:33:08.632Z]                     )
[2024-03-07T16:33:08.632Z]                 await asyncio.sleep(0.2)
[2024-03-07T16:33:08.632Z]     
[2024-03-07T16:33:08.632Z]         # Wait for kernel info reply on shell channel
[2024-03-07T16:33:08.632Z]         while True:
[2024-03-07T16:33:08.632Z]             self.kernel_info()
[2024-03-07T16:33:08.632Z]             try:
[2024-03-07T16:33:08.632Z]                 msg = await self.shell_channel.get_msg(timeout=1)
[2024-03-07T16:33:08.632Z]             except Empty:
[2024-03-07T16:33:08.632Z]                 pass
[2024-03-07T16:33:08.632Z]             else:
[2024-03-07T16:33:08.632Z]                 if msg["msg_type"] == "kernel_info_reply":
[2024-03-07T16:33:08.632Z]                     # Checking that IOPub is connected. If it is not connected, start over.
[2024-03-07T16:33:08.632Z]                     try:
[2024-03-07T16:33:08.632Z]                         await self.iopub_channel.get_msg(timeout=0.2)
[2024-03-07T16:33:08.632Z]                     except Empty:
[2024-03-07T16:33:08.632Z]                         pass
[2024-03-07T16:33:08.632Z]                     else:
[2024-03-07T16:33:08.632Z]                         self._handle_kernel_info_reply(msg)
[2024-03-07T16:33:08.632Z]                         break
[2024-03-07T16:33:08.632Z]     
[2024-03-07T16:33:08.632Z]             if not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.632Z]                 raise RuntimeError("Kernel died before replying to kernel_info")
[2024-03-07T16:33:08.632Z]     
[2024-03-07T16:33:08.632Z]             # Check if current time is ready check time plus timeout
[2024-03-07T16:33:08.632Z]             if time.time() > abs_timeout:
[2024-03-07T16:33:08.632Z] >               raise RuntimeError("Kernel didn't respond in %d seconds" % timeout)
[2024-03-07T16:33:08.632Z] E               RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.632Z] 
[2024-03-07T16:33:08.632Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:206: RuntimeError
[2024-03-07T16:33:08.632Z] ------------------------------ Captured log setup ------------------------------
[2024-03-07T16:33:08.632Z] ERROR    nbval:kernel.py:59 Failure starting kernel "python"
[2024-03-07T16:33:08.632Z] Traceback (most recent call last):
[2024-03-07T16:33:08.632Z]   File "/opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py", line 57, in start_new_kernel
[2024-03-07T16:33:08.632Z]     kc.wait_for_ready(timeout=startup_timeout)
[2024-03-07T16:33:08.632Z]   File "/opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py", line 30, in wrapped
[2024-03-07T16:33:08.632Z]     raise e
[2024-03-07T16:33:08.632Z]   File "/opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py", line 27, in wrapped
[2024-03-07T16:33:08.632Z]     return loop.run_until_complete(future)
[2024-03-07T16:33:08.632Z]   File "/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py", line 98, in run_until_complete
[2024-03-07T16:33:08.632Z]     return f.result()
[2024-03-07T16:33:08.632Z]   File "/opt/conda/envs/birdy/lib/python3.10/asyncio/futures.py", line 201, in result
[2024-03-07T16:33:08.632Z]     raise self._exception.with_traceback(self._exception_tb)
[2024-03-07T16:33:08.632Z]   File "/opt/conda/envs/birdy/lib/python3.10/asyncio/tasks.py", line 232, in __step
[2024-03-07T16:33:08.632Z]     result = coro.send(None)
[2024-03-07T16:33:08.632Z]   File "/opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py", line 206, in _async_wait_for_ready
[2024-03-07T16:33:08.632Z]     raise RuntimeError("Kernel didn't respond in %d seconds" % timeout)
[2024-03-07T16:33:08.632Z] RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.632Z] _ ERROR at setup of RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 1 _
[2024-03-07T16:33:08.632Z] 
[2024-03-07T16:33:08.632Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.632Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abc051900>
[2024-03-07T16:33:08.632Z] when = 'setup'
[2024-03-07T16:33:08.632Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.632Z] 
[2024-03-07T16:33:08.632Z]     @classmethod
[2024-03-07T16:33:08.632Z]     def from_call(
[2024-03-07T16:33:08.632Z]         cls,
[2024-03-07T16:33:08.632Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.632Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.633Z]         reraise: Optional[
[2024-03-07T16:33:08.633Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.633Z]         ] = None,
[2024-03-07T16:33:08.633Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.633Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.633Z]     
[2024-03-07T16:33:08.633Z]         :param func:
[2024-03-07T16:33:08.633Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.633Z]         :param when:
[2024-03-07T16:33:08.633Z]             The phase in which the function is called.
[2024-03-07T16:33:08.633Z]         :param reraise:
[2024-03-07T16:33:08.633Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.633Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.633Z]         """
[2024-03-07T16:33:08.633Z]         excinfo = None
[2024-03-07T16:33:08.633Z]         start = timing.time()
[2024-03-07T16:33:08.633Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.633Z]         try:
[2024-03-07T16:33:08.633Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.633Z] 
[2024-03-07T16:33:08.633Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.633Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.633Z] 
[2024-03-07T16:33:08.633Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.633Z]     )
[2024-03-07T16:33:08.633Z] 
[2024-03-07T16:33:08.633Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.633Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.633Z] 
[2024-03-07T16:33:08.633Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.633Z] kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.633Z] 
[2024-03-07T16:33:08.633Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.633Z]         """Call the hook.
[2024-03-07T16:33:08.633Z]     
[2024-03-07T16:33:08.633Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.633Z]         specification.
[2024-03-07T16:33:08.633Z]     
[2024-03-07T16:33:08.633Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.633Z]         :ref:`calling`.
[2024-03-07T16:33:08.633Z]         """
[2024-03-07T16:33:08.633Z]         assert (
[2024-03-07T16:33:08.633Z]             not self.is_historic()
[2024-03-07T16:33:08.633Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.633Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.633Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.633Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.633Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.633Z] 
[2024-03-07T16:33:08.633Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.633Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.633Z] 
[2024-03-07T16:33:08.633Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.633Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.633Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.633Z] kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.633Z] 
[2024-03-07T16:33:08.633Z]     def _hookexec(
[2024-03-07T16:33:08.633Z]         self,
[2024-03-07T16:33:08.633Z]         hook_name: str,
[2024-03-07T16:33:08.633Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.633Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.633Z]         firstresult: bool,
[2024-03-07T16:33:08.633Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.633Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.634Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.634Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.634Z] 
[2024-03-07T16:33:08.634Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.634Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.634Z] 
[2024-03-07T16:33:08.634Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.634Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.634Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.634Z] 
[2024-03-07T16:33:08.634Z]     def _multicall(
[2024-03-07T16:33:08.634Z]         hook_name: str,
[2024-03-07T16:33:08.634Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.634Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.634Z]         firstresult: bool,
[2024-03-07T16:33:08.634Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.634Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.634Z]         result(s).
[2024-03-07T16:33:08.634Z]     
[2024-03-07T16:33:08.634Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.634Z]         """
[2024-03-07T16:33:08.634Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.634Z]         results: list[object] = []
[2024-03-07T16:33:08.634Z]         exception = None
[2024-03-07T16:33:08.634Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.634Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.634Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.634Z]             try:
[2024-03-07T16:33:08.634Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.634Z]                     try:
[2024-03-07T16:33:08.634Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.634Z]                     except KeyError:
[2024-03-07T16:33:08.634Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.634Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.634Z]                                 raise HookCallError(
[2024-03-07T16:33:08.634Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.634Z]                                 )
[2024-03-07T16:33:08.634Z]     
[2024-03-07T16:33:08.634Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.634Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.634Z]                         try:
[2024-03-07T16:33:08.634Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.634Z]                             # which is the desired response.
[2024-03-07T16:33:08.634Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.634Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.634Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.634Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.634Z]                         except StopIteration:
[2024-03-07T16:33:08.634Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.634Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.634Z]                         try:
[2024-03-07T16:33:08.634Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.634Z]                             # which is the desired response.
[2024-03-07T16:33:08.634Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.634Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.634Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.634Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.634Z]                         except StopIteration:
[2024-03-07T16:33:08.634Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.634Z]                     else:
[2024-03-07T16:33:08.634Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.634Z]                         if res is not None:
[2024-03-07T16:33:08.634Z]                             results.append(res)
[2024-03-07T16:33:08.634Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.634Z]                                 break
[2024-03-07T16:33:08.634Z]             except BaseException as exc:
[2024-03-07T16:33:08.634Z]                 exception = exc
[2024-03-07T16:33:08.634Z]         finally:
[2024-03-07T16:33:08.634Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.634Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.634Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.634Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.634Z]                 else:
[2024-03-07T16:33:08.634Z]                     result = results
[2024-03-07T16:33:08.634Z]     
[2024-03-07T16:33:08.634Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.634Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.634Z]                     try:
[2024-03-07T16:33:08.634Z]                         if exception is not None:
[2024-03-07T16:33:08.634Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.634Z]                         else:
[2024-03-07T16:33:08.634Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.634Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.634Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.634Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.634Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.634Z]                     except StopIteration as si:
[2024-03-07T16:33:08.634Z]                         result = si.value
[2024-03-07T16:33:08.634Z]                         exception = None
[2024-03-07T16:33:08.634Z]                         continue
[2024-03-07T16:33:08.634Z]                     except BaseException as e:
[2024-03-07T16:33:08.634Z]                         exception = e
[2024-03-07T16:33:08.634Z]                         continue
[2024-03-07T16:33:08.634Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.634Z]     
[2024-03-07T16:33:08.634Z]                 if exception is not None:
[2024-03-07T16:33:08.634Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.634Z] 
[2024-03-07T16:33:08.634Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.634Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.634Z] 
[2024-03-07T16:33:08.634Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.634Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.634Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.634Z] 
[2024-03-07T16:33:08.634Z]     def _multicall(
[2024-03-07T16:33:08.634Z]         hook_name: str,
[2024-03-07T16:33:08.634Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.634Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.634Z]         firstresult: bool,
[2024-03-07T16:33:08.634Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.634Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.634Z]         result(s).
[2024-03-07T16:33:08.634Z]     
[2024-03-07T16:33:08.634Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.634Z]         """
[2024-03-07T16:33:08.634Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.634Z]         results: list[object] = []
[2024-03-07T16:33:08.634Z]         exception = None
[2024-03-07T16:33:08.634Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.634Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.634Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.634Z]             try:
[2024-03-07T16:33:08.635Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.635Z]                     try:
[2024-03-07T16:33:08.635Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.635Z]                     except KeyError:
[2024-03-07T16:33:08.635Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.635Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.635Z]                                 raise HookCallError(
[2024-03-07T16:33:08.635Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.635Z]                                 )
[2024-03-07T16:33:08.635Z]     
[2024-03-07T16:33:08.635Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.635Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.635Z]                         try:
[2024-03-07T16:33:08.635Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.635Z]                             # which is the desired response.
[2024-03-07T16:33:08.635Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.635Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.635Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.635Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.635Z]                         except StopIteration:
[2024-03-07T16:33:08.635Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.635Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.635Z]                         try:
[2024-03-07T16:33:08.635Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.635Z]                             # which is the desired response.
[2024-03-07T16:33:08.635Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.635Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.635Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.635Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.635Z]                         except StopIteration:
[2024-03-07T16:33:08.635Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.635Z]                     else:
[2024-03-07T16:33:08.635Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.635Z]                         if res is not None:
[2024-03-07T16:33:08.635Z]                             results.append(res)
[2024-03-07T16:33:08.635Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.635Z]                                 break
[2024-03-07T16:33:08.635Z]             except BaseException as exc:
[2024-03-07T16:33:08.635Z]                 exception = exc
[2024-03-07T16:33:08.635Z]         finally:
[2024-03-07T16:33:08.635Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.635Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.635Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.635Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.635Z]                 else:
[2024-03-07T16:33:08.635Z]                     result = results
[2024-03-07T16:33:08.635Z]     
[2024-03-07T16:33:08.635Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.635Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.635Z]                     try:
[2024-03-07T16:33:08.635Z]                         if exception is not None:
[2024-03-07T16:33:08.635Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.635Z] 
[2024-03-07T16:33:08.635Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.635Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.635Z] 
[2024-03-07T16:33:08.635Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.635Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.635Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.635Z] 
[2024-03-07T16:33:08.635Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.635Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.635Z] 
[2024-03-07T16:33:08.635Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.635Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.635Z]             try:
[2024-03-07T16:33:08.635Z] >               yield
[2024-03-07T16:33:08.635Z] 
[2024-03-07T16:33:08.635Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.635Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.635Z] 
[2024-03-07T16:33:08.635Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.635Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.635Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.635Z] 
[2024-03-07T16:33:08.635Z]     def _multicall(
[2024-03-07T16:33:08.635Z]         hook_name: str,
[2024-03-07T16:33:08.635Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.635Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.635Z]         firstresult: bool,
[2024-03-07T16:33:08.635Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.635Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.635Z]         result(s).
[2024-03-07T16:33:08.635Z]     
[2024-03-07T16:33:08.635Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.635Z]         """
[2024-03-07T16:33:08.635Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.635Z]         results: list[object] = []
[2024-03-07T16:33:08.635Z]         exception = None
[2024-03-07T16:33:08.635Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.635Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.635Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.635Z]             try:
[2024-03-07T16:33:08.635Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.635Z]                     try:
[2024-03-07T16:33:08.635Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.635Z]                     except KeyError:
[2024-03-07T16:33:08.635Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.635Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.635Z]                                 raise HookCallError(
[2024-03-07T16:33:08.635Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.635Z]                                 )
[2024-03-07T16:33:08.635Z]     
[2024-03-07T16:33:08.635Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.635Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.635Z]                         try:
[2024-03-07T16:33:08.635Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.635Z]                             # which is the desired response.
[2024-03-07T16:33:08.635Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.635Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.635Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.635Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.635Z]                         except StopIteration:
[2024-03-07T16:33:08.635Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.635Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.635Z]                         try:
[2024-03-07T16:33:08.635Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.635Z]                             # which is the desired response.
[2024-03-07T16:33:08.635Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.635Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.635Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.635Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.635Z]                         except StopIteration:
[2024-03-07T16:33:08.635Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.635Z]                     else:
[2024-03-07T16:33:08.635Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.635Z]                         if res is not None:
[2024-03-07T16:33:08.635Z]                             results.append(res)
[2024-03-07T16:33:08.635Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.636Z]                                 break
[2024-03-07T16:33:08.636Z]             except BaseException as exc:
[2024-03-07T16:33:08.636Z]                 exception = exc
[2024-03-07T16:33:08.636Z]         finally:
[2024-03-07T16:33:08.636Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.636Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.636Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.636Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.636Z]                 else:
[2024-03-07T16:33:08.636Z]                     result = results
[2024-03-07T16:33:08.636Z]     
[2024-03-07T16:33:08.636Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.636Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.636Z]                     try:
[2024-03-07T16:33:08.636Z]                         if exception is not None:
[2024-03-07T16:33:08.636Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.636Z] 
[2024-03-07T16:33:08.636Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.636Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.636Z] 
[2024-03-07T16:33:08.636Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.636Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.636Z] 
[2024-03-07T16:33:08.636Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.636Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.636Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.636Z]     
[2024-03-07T16:33:08.636Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.636Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.636Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.636Z] 
[2024-03-07T16:33:08.636Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.636Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.636Z] 
[2024-03-07T16:33:08.636Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.636Z] item = <IPyNbCell Cell 1>, when = 'setup'
[2024-03-07T16:33:08.636Z] 
[2024-03-07T16:33:08.636Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.636Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.636Z]         with catching_logs(
[2024-03-07T16:33:08.636Z]             self.caplog_handler,
[2024-03-07T16:33:08.636Z]             level=self.log_level,
[2024-03-07T16:33:08.636Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.636Z]             self.report_handler,
[2024-03-07T16:33:08.636Z]             level=self.log_level,
[2024-03-07T16:33:08.636Z]         ) as report_handler:
[2024-03-07T16:33:08.636Z]             caplog_handler.reset()
[2024-03-07T16:33:08.636Z]             report_handler.reset()
[2024-03-07T16:33:08.636Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.636Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.636Z]     
[2024-03-07T16:33:08.636Z]             try:
[2024-03-07T16:33:08.636Z] >               yield
[2024-03-07T16:33:08.636Z] 
[2024-03-07T16:33:08.636Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.636Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.636Z] 
[2024-03-07T16:33:08.636Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.636Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.636Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.636Z] 
[2024-03-07T16:33:08.636Z]     def _multicall(
[2024-03-07T16:33:08.636Z]         hook_name: str,
[2024-03-07T16:33:08.636Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.636Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.636Z]         firstresult: bool,
[2024-03-07T16:33:08.636Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.636Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.636Z]         result(s).
[2024-03-07T16:33:08.636Z]     
[2024-03-07T16:33:08.636Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.636Z]         """
[2024-03-07T16:33:08.636Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.636Z]         results: list[object] = []
[2024-03-07T16:33:08.636Z]         exception = None
[2024-03-07T16:33:08.636Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.636Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.636Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.636Z]             try:
[2024-03-07T16:33:08.636Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.636Z]                     try:
[2024-03-07T16:33:08.636Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.636Z]                     except KeyError:
[2024-03-07T16:33:08.636Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.636Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.636Z]                                 raise HookCallError(
[2024-03-07T16:33:08.636Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.636Z]                                 )
[2024-03-07T16:33:08.636Z]     
[2024-03-07T16:33:08.636Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.636Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.636Z]                         try:
[2024-03-07T16:33:08.636Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.636Z]                             # which is the desired response.
[2024-03-07T16:33:08.636Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.636Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.636Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.636Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.636Z]                         except StopIteration:
[2024-03-07T16:33:08.636Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.636Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.636Z]                         try:
[2024-03-07T16:33:08.636Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.636Z]                             # which is the desired response.
[2024-03-07T16:33:08.636Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.636Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.636Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.636Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.636Z]                         except StopIteration:
[2024-03-07T16:33:08.636Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.636Z]                     else:
[2024-03-07T16:33:08.636Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.636Z]                         if res is not None:
[2024-03-07T16:33:08.636Z]                             results.append(res)
[2024-03-07T16:33:08.636Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.636Z]                                 break
[2024-03-07T16:33:08.636Z]             except BaseException as exc:
[2024-03-07T16:33:08.636Z]                 exception = exc
[2024-03-07T16:33:08.636Z]         finally:
[2024-03-07T16:33:08.636Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.636Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.636Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.636Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.636Z]                 else:
[2024-03-07T16:33:08.636Z]                     result = results
[2024-03-07T16:33:08.636Z]     
[2024-03-07T16:33:08.636Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.636Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.636Z]                     try:
[2024-03-07T16:33:08.636Z]                         if exception is not None:
[2024-03-07T16:33:08.636Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.636Z] 
[2024-03-07T16:33:08.636Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.636Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.637Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.637Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.637Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.637Z] >           return (yield)
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.637Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.637Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.637Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z]     def _multicall(
[2024-03-07T16:33:08.637Z]         hook_name: str,
[2024-03-07T16:33:08.637Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.637Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.637Z]         firstresult: bool,
[2024-03-07T16:33:08.637Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.637Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.637Z]         result(s).
[2024-03-07T16:33:08.637Z]     
[2024-03-07T16:33:08.637Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.637Z]         """
[2024-03-07T16:33:08.637Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.637Z]         results: list[object] = []
[2024-03-07T16:33:08.637Z]         exception = None
[2024-03-07T16:33:08.637Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.637Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.637Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.637Z]             try:
[2024-03-07T16:33:08.637Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.637Z]                     try:
[2024-03-07T16:33:08.637Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.637Z]                     except KeyError:
[2024-03-07T16:33:08.637Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.637Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.637Z]                                 raise HookCallError(
[2024-03-07T16:33:08.637Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.637Z]                                 )
[2024-03-07T16:33:08.637Z]     
[2024-03-07T16:33:08.637Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.637Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.637Z]                         try:
[2024-03-07T16:33:08.637Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.637Z]                             # which is the desired response.
[2024-03-07T16:33:08.637Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.637Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.637Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.637Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.637Z]                         except StopIteration:
[2024-03-07T16:33:08.637Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.637Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.637Z]                         try:
[2024-03-07T16:33:08.637Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.637Z]                             # which is the desired response.
[2024-03-07T16:33:08.637Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.637Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.637Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.637Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.637Z]                         except StopIteration:
[2024-03-07T16:33:08.637Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.637Z]                     else:
[2024-03-07T16:33:08.637Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.637Z]                         if res is not None:
[2024-03-07T16:33:08.637Z]                             results.append(res)
[2024-03-07T16:33:08.637Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.637Z]                                 break
[2024-03-07T16:33:08.637Z]             except BaseException as exc:
[2024-03-07T16:33:08.637Z]                 exception = exc
[2024-03-07T16:33:08.637Z]         finally:
[2024-03-07T16:33:08.637Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.637Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.637Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.637Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.637Z]                 else:
[2024-03-07T16:33:08.637Z]                     result = results
[2024-03-07T16:33:08.637Z]     
[2024-03-07T16:33:08.637Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.637Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.637Z]                     try:
[2024-03-07T16:33:08.637Z]                         if exception is not None:
[2024-03-07T16:33:08.637Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.637Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.637Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.637Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.637Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.637Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.637Z]             try:
[2024-03-07T16:33:08.637Z] >               yield
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.637Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.637Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.637Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.637Z] 
[2024-03-07T16:33:08.637Z]     def _multicall(
[2024-03-07T16:33:08.637Z]         hook_name: str,
[2024-03-07T16:33:08.637Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.637Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.637Z]         firstresult: bool,
[2024-03-07T16:33:08.637Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.637Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.637Z]         result(s).
[2024-03-07T16:33:08.637Z]     
[2024-03-07T16:33:08.637Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.637Z]         """
[2024-03-07T16:33:08.637Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.637Z]         results: list[object] = []
[2024-03-07T16:33:08.637Z]         exception = None
[2024-03-07T16:33:08.637Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.637Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.637Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.637Z]             try:
[2024-03-07T16:33:08.637Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.637Z]                     try:
[2024-03-07T16:33:08.637Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.637Z]                     except KeyError:
[2024-03-07T16:33:08.637Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.637Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.637Z]                                 raise HookCallError(
[2024-03-07T16:33:08.638Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.638Z]                                 )
[2024-03-07T16:33:08.638Z]     
[2024-03-07T16:33:08.638Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.638Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.638Z]                         try:
[2024-03-07T16:33:08.638Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.638Z]                             # which is the desired response.
[2024-03-07T16:33:08.638Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.638Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.638Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.638Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.638Z]                         except StopIteration:
[2024-03-07T16:33:08.638Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.638Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.638Z]                         try:
[2024-03-07T16:33:08.638Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.638Z]                             # which is the desired response.
[2024-03-07T16:33:08.638Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.638Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.638Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.638Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.638Z]                         except StopIteration:
[2024-03-07T16:33:08.638Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.638Z]                     else:
[2024-03-07T16:33:08.638Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.638Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.638Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.638Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.638Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.638Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.638Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.638Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.638Z]     
[2024-03-07T16:33:08.638Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.638Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.638Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.638Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.638Z]             if exc:
[2024-03-07T16:33:08.638Z] >               raise exc
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.638Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.638Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abbb0b520>
[2024-03-07T16:33:08.638Z] when = 'setup'
[2024-03-07T16:33:08.638Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z]     @classmethod
[2024-03-07T16:33:08.638Z]     def from_call(
[2024-03-07T16:33:08.638Z]         cls,
[2024-03-07T16:33:08.638Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.638Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.638Z]         reraise: Optional[
[2024-03-07T16:33:08.638Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.638Z]         ] = None,
[2024-03-07T16:33:08.638Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.638Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.638Z]     
[2024-03-07T16:33:08.638Z]         :param func:
[2024-03-07T16:33:08.638Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.638Z]         :param when:
[2024-03-07T16:33:08.638Z]             The phase in which the function is called.
[2024-03-07T16:33:08.638Z]         :param reraise:
[2024-03-07T16:33:08.638Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.638Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.638Z]         """
[2024-03-07T16:33:08.638Z]         excinfo = None
[2024-03-07T16:33:08.638Z]         start = timing.time()
[2024-03-07T16:33:08.638Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.638Z]         try:
[2024-03-07T16:33:08.638Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.638Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.638Z]     )
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.638Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.638Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.638Z]         """Call the hook.
[2024-03-07T16:33:08.638Z]     
[2024-03-07T16:33:08.638Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.638Z]         specification.
[2024-03-07T16:33:08.638Z]     
[2024-03-07T16:33:08.638Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.638Z]         :ref:`calling`.
[2024-03-07T16:33:08.638Z]         """
[2024-03-07T16:33:08.638Z]         assert (
[2024-03-07T16:33:08.638Z]             not self.is_historic()
[2024-03-07T16:33:08.638Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.638Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.638Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.638Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.638Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.638Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.638Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.638Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.638Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z]     def _hookexec(
[2024-03-07T16:33:08.638Z]         self,
[2024-03-07T16:33:08.638Z]         hook_name: str,
[2024-03-07T16:33:08.638Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.638Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.638Z]         firstresult: bool,
[2024-03-07T16:33:08.638Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.638Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.638Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.638Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.638Z] 
[2024-03-07T16:33:08.638Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.639Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.639Z] 
[2024-03-07T16:33:08.639Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.639Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.639Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.639Z] 
[2024-03-07T16:33:08.639Z]     def _multicall(
[2024-03-07T16:33:08.639Z]         hook_name: str,
[2024-03-07T16:33:08.639Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.639Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.639Z]         firstresult: bool,
[2024-03-07T16:33:08.639Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.639Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.639Z]         result(s).
[2024-03-07T16:33:08.639Z]     
[2024-03-07T16:33:08.639Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.639Z]         """
[2024-03-07T16:33:08.639Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.639Z]         results: list[object] = []
[2024-03-07T16:33:08.639Z]         exception = None
[2024-03-07T16:33:08.639Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.639Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.639Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.639Z]             try:
[2024-03-07T16:33:08.639Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.639Z]                     try:
[2024-03-07T16:33:08.639Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.639Z]                     except KeyError:
[2024-03-07T16:33:08.639Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.639Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.639Z]                                 raise HookCallError(
[2024-03-07T16:33:08.639Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.639Z]                                 )
[2024-03-07T16:33:08.639Z]     
[2024-03-07T16:33:08.639Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.639Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.639Z]                         try:
[2024-03-07T16:33:08.639Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.639Z]                             # which is the desired response.
[2024-03-07T16:33:08.639Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.639Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.639Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.639Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.639Z]                         except StopIteration:
[2024-03-07T16:33:08.639Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.639Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.639Z]                         try:
[2024-03-07T16:33:08.639Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.639Z]                             # which is the desired response.
[2024-03-07T16:33:08.639Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.639Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.639Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.639Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.639Z]                         except StopIteration:
[2024-03-07T16:33:08.639Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.639Z]                     else:
[2024-03-07T16:33:08.639Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.639Z]                         if res is not None:
[2024-03-07T16:33:08.639Z]                             results.append(res)
[2024-03-07T16:33:08.639Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.639Z]                                 break
[2024-03-07T16:33:08.639Z]             except BaseException as exc:
[2024-03-07T16:33:08.639Z]                 exception = exc
[2024-03-07T16:33:08.639Z]         finally:
[2024-03-07T16:33:08.639Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.639Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.639Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.639Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.639Z]                 else:
[2024-03-07T16:33:08.639Z]                     result = results
[2024-03-07T16:33:08.639Z]     
[2024-03-07T16:33:08.639Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.639Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.639Z]                     try:
[2024-03-07T16:33:08.639Z]                         if exception is not None:
[2024-03-07T16:33:08.639Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.639Z]                         else:
[2024-03-07T16:33:08.639Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.639Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.639Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.639Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.639Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.639Z]                     except StopIteration as si:
[2024-03-07T16:33:08.639Z]                         result = si.value
[2024-03-07T16:33:08.639Z]                         exception = None
[2024-03-07T16:33:08.639Z]                         continue
[2024-03-07T16:33:08.639Z]                     except BaseException as e:
[2024-03-07T16:33:08.639Z]                         exception = e
[2024-03-07T16:33:08.639Z]                         continue
[2024-03-07T16:33:08.639Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.639Z]     
[2024-03-07T16:33:08.639Z]                 if exception is not None:
[2024-03-07T16:33:08.639Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.639Z] 
[2024-03-07T16:33:08.639Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.639Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.639Z] 
[2024-03-07T16:33:08.639Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.639Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.639Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.639Z] 
[2024-03-07T16:33:08.639Z]     def _multicall(
[2024-03-07T16:33:08.639Z]         hook_name: str,
[2024-03-07T16:33:08.639Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.639Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.639Z]         firstresult: bool,
[2024-03-07T16:33:08.639Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.639Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.639Z]         result(s).
[2024-03-07T16:33:08.639Z]     
[2024-03-07T16:33:08.639Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.639Z]         """
[2024-03-07T16:33:08.639Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.639Z]         results: list[object] = []
[2024-03-07T16:33:08.639Z]         exception = None
[2024-03-07T16:33:08.639Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.639Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.639Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.639Z]             try:
[2024-03-07T16:33:08.639Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.639Z]                     try:
[2024-03-07T16:33:08.640Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.640Z]                     except KeyError:
[2024-03-07T16:33:08.640Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.640Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.640Z]                                 raise HookCallError(
[2024-03-07T16:33:08.640Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.640Z]                                 )
[2024-03-07T16:33:08.640Z]     
[2024-03-07T16:33:08.640Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.640Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.640Z]                         try:
[2024-03-07T16:33:08.640Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.640Z]                             # which is the desired response.
[2024-03-07T16:33:08.640Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.640Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.640Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.640Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.640Z]                         except StopIteration:
[2024-03-07T16:33:08.640Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.640Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.640Z]                         try:
[2024-03-07T16:33:08.640Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.640Z]                             # which is the desired response.
[2024-03-07T16:33:08.640Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.640Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.640Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.640Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.640Z]                         except StopIteration:
[2024-03-07T16:33:08.640Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.640Z]                     else:
[2024-03-07T16:33:08.640Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.640Z]                         if res is not None:
[2024-03-07T16:33:08.640Z]                             results.append(res)
[2024-03-07T16:33:08.640Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.640Z]                                 break
[2024-03-07T16:33:08.640Z]             except BaseException as exc:
[2024-03-07T16:33:08.640Z]                 exception = exc
[2024-03-07T16:33:08.640Z]         finally:
[2024-03-07T16:33:08.640Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.640Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.640Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.640Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.640Z]                 else:
[2024-03-07T16:33:08.640Z]                     result = results
[2024-03-07T16:33:08.640Z]     
[2024-03-07T16:33:08.640Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.640Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.640Z]                     try:
[2024-03-07T16:33:08.640Z]                         if exception is not None:
[2024-03-07T16:33:08.640Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.640Z] 
[2024-03-07T16:33:08.640Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.640Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.640Z] 
[2024-03-07T16:33:08.640Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.640Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.640Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.640Z] 
[2024-03-07T16:33:08.640Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.640Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.640Z] 
[2024-03-07T16:33:08.640Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.640Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.640Z]             try:
[2024-03-07T16:33:08.640Z] >               yield
[2024-03-07T16:33:08.640Z] 
[2024-03-07T16:33:08.640Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.640Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.640Z] 
[2024-03-07T16:33:08.640Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.640Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.640Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.640Z] 
[2024-03-07T16:33:08.640Z]     def _multicall(
[2024-03-07T16:33:08.640Z]         hook_name: str,
[2024-03-07T16:33:08.640Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.640Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.640Z]         firstresult: bool,
[2024-03-07T16:33:08.640Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.640Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.640Z]         result(s).
[2024-03-07T16:33:08.640Z]     
[2024-03-07T16:33:08.640Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.640Z]         """
[2024-03-07T16:33:08.640Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.640Z]         results: list[object] = []
[2024-03-07T16:33:08.640Z]         exception = None
[2024-03-07T16:33:08.640Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.640Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.640Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.640Z]             try:
[2024-03-07T16:33:08.640Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.640Z]                     try:
[2024-03-07T16:33:08.640Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.640Z]                     except KeyError:
[2024-03-07T16:33:08.640Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.640Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.640Z]                                 raise HookCallError(
[2024-03-07T16:33:08.640Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.640Z]                                 )
[2024-03-07T16:33:08.640Z]     
[2024-03-07T16:33:08.640Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.640Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.640Z]                         try:
[2024-03-07T16:33:08.640Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.640Z]                             # which is the desired response.
[2024-03-07T16:33:08.640Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.640Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.640Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.640Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.640Z]                         except StopIteration:
[2024-03-07T16:33:08.640Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.640Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.640Z]                         try:
[2024-03-07T16:33:08.640Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.640Z]                             # which is the desired response.
[2024-03-07T16:33:08.640Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.640Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.640Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.640Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.640Z]                         except StopIteration:
[2024-03-07T16:33:08.640Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.640Z]                     else:
[2024-03-07T16:33:08.640Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.640Z]                         if res is not None:
[2024-03-07T16:33:08.640Z]                             results.append(res)
[2024-03-07T16:33:08.640Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.640Z]                                 break
[2024-03-07T16:33:08.640Z]             except BaseException as exc:
[2024-03-07T16:33:08.640Z]                 exception = exc
[2024-03-07T16:33:08.640Z]         finally:
[2024-03-07T16:33:08.640Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.640Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.641Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.641Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.641Z]                 else:
[2024-03-07T16:33:08.641Z]                     result = results
[2024-03-07T16:33:08.641Z]     
[2024-03-07T16:33:08.641Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.641Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.641Z]                     try:
[2024-03-07T16:33:08.641Z]                         if exception is not None:
[2024-03-07T16:33:08.641Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.641Z] 
[2024-03-07T16:33:08.641Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.641Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.641Z] 
[2024-03-07T16:33:08.641Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.641Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.641Z] 
[2024-03-07T16:33:08.641Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.641Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.641Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.641Z]     
[2024-03-07T16:33:08.641Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.641Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.641Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.641Z] 
[2024-03-07T16:33:08.641Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.641Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.641Z] 
[2024-03-07T16:33:08.641Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.641Z] item = <IPyNbCell Cell 0>, when = 'setup'
[2024-03-07T16:33:08.641Z] 
[2024-03-07T16:33:08.641Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.641Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.641Z]         with catching_logs(
[2024-03-07T16:33:08.641Z]             self.caplog_handler,
[2024-03-07T16:33:08.641Z]             level=self.log_level,
[2024-03-07T16:33:08.641Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.641Z]             self.report_handler,
[2024-03-07T16:33:08.641Z]             level=self.log_level,
[2024-03-07T16:33:08.641Z]         ) as report_handler:
[2024-03-07T16:33:08.641Z]             caplog_handler.reset()
[2024-03-07T16:33:08.641Z]             report_handler.reset()
[2024-03-07T16:33:08.641Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.641Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.641Z]     
[2024-03-07T16:33:08.641Z]             try:
[2024-03-07T16:33:08.641Z] >               yield
[2024-03-07T16:33:08.641Z] 
[2024-03-07T16:33:08.641Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.641Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.641Z] 
[2024-03-07T16:33:08.641Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.641Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.641Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.641Z] 
[2024-03-07T16:33:08.641Z]     def _multicall(
[2024-03-07T16:33:08.641Z]         hook_name: str,
[2024-03-07T16:33:08.641Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.641Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.641Z]         firstresult: bool,
[2024-03-07T16:33:08.641Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.641Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.641Z]         result(s).
[2024-03-07T16:33:08.641Z]     
[2024-03-07T16:33:08.641Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.641Z]         """
[2024-03-07T16:33:08.641Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.641Z]         results: list[object] = []
[2024-03-07T16:33:08.641Z]         exception = None
[2024-03-07T16:33:08.641Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.641Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.641Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.641Z]             try:
[2024-03-07T16:33:08.641Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.641Z]                     try:
[2024-03-07T16:33:08.641Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.641Z]                     except KeyError:
[2024-03-07T16:33:08.641Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.641Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.641Z]                                 raise HookCallError(
[2024-03-07T16:33:08.641Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.641Z]                                 )
[2024-03-07T16:33:08.641Z]     
[2024-03-07T16:33:08.641Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.641Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.641Z]                         try:
[2024-03-07T16:33:08.641Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.641Z]                             # which is the desired response.
[2024-03-07T16:33:08.641Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.641Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.641Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.641Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.641Z]                         except StopIteration:
[2024-03-07T16:33:08.641Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.641Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.641Z]                         try:
[2024-03-07T16:33:08.641Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.641Z]                             # which is the desired response.
[2024-03-07T16:33:08.641Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.641Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.641Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.641Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.641Z]                         except StopIteration:
[2024-03-07T16:33:08.641Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.641Z]                     else:
[2024-03-07T16:33:08.641Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.641Z]                         if res is not None:
[2024-03-07T16:33:08.641Z]                             results.append(res)
[2024-03-07T16:33:08.641Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.641Z]                                 break
[2024-03-07T16:33:08.641Z]             except BaseException as exc:
[2024-03-07T16:33:08.641Z]                 exception = exc
[2024-03-07T16:33:08.641Z]         finally:
[2024-03-07T16:33:08.641Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.641Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.641Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.641Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.641Z]                 else:
[2024-03-07T16:33:08.641Z]                     result = results
[2024-03-07T16:33:08.641Z]     
[2024-03-07T16:33:08.641Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.641Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.641Z]                     try:
[2024-03-07T16:33:08.641Z]                         if exception is not None:
[2024-03-07T16:33:08.641Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.641Z] 
[2024-03-07T16:33:08.641Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.641Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.641Z] 
[2024-03-07T16:33:08.641Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.642Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.642Z] 
[2024-03-07T16:33:08.642Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.642Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.642Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.642Z] >           return (yield)
[2024-03-07T16:33:08.642Z] 
[2024-03-07T16:33:08.642Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.642Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.642Z] 
[2024-03-07T16:33:08.642Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.642Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.642Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.642Z] 
[2024-03-07T16:33:08.642Z]     def _multicall(
[2024-03-07T16:33:08.642Z]         hook_name: str,
[2024-03-07T16:33:08.642Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.642Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.642Z]         firstresult: bool,
[2024-03-07T16:33:08.642Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.642Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.642Z]         result(s).
[2024-03-07T16:33:08.642Z]     
[2024-03-07T16:33:08.642Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.642Z]         """
[2024-03-07T16:33:08.642Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.642Z]         results: list[object] = []
[2024-03-07T16:33:08.642Z]         exception = None
[2024-03-07T16:33:08.642Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.642Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.642Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.642Z]             try:
[2024-03-07T16:33:08.642Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.642Z]                     try:
[2024-03-07T16:33:08.642Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.642Z]                     except KeyError:
[2024-03-07T16:33:08.642Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.642Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.642Z]                                 raise HookCallError(
[2024-03-07T16:33:08.642Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.642Z]                                 )
[2024-03-07T16:33:08.642Z]     
[2024-03-07T16:33:08.642Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.642Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.642Z]                         try:
[2024-03-07T16:33:08.642Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.642Z]                             # which is the desired response.
[2024-03-07T16:33:08.642Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.642Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.642Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.642Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.642Z]                         except StopIteration:
[2024-03-07T16:33:08.642Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.642Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.642Z]                         try:
[2024-03-07T16:33:08.642Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.642Z]                             # which is the desired response.
[2024-03-07T16:33:08.642Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.642Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.642Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.642Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.642Z]                         except StopIteration:
[2024-03-07T16:33:08.642Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.642Z]                     else:
[2024-03-07T16:33:08.642Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.642Z]                         if res is not None:
[2024-03-07T16:33:08.642Z]                             results.append(res)
[2024-03-07T16:33:08.642Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.642Z]                                 break
[2024-03-07T16:33:08.642Z]             except BaseException as exc:
[2024-03-07T16:33:08.642Z]                 exception = exc
[2024-03-07T16:33:08.642Z]         finally:
[2024-03-07T16:33:08.642Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.642Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.642Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.642Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.642Z]                 else:
[2024-03-07T16:33:08.642Z]                     result = results
[2024-03-07T16:33:08.642Z]     
[2024-03-07T16:33:08.642Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.642Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.642Z]                     try:
[2024-03-07T16:33:08.642Z]                         if exception is not None:
[2024-03-07T16:33:08.642Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.642Z] 
[2024-03-07T16:33:08.642Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.642Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.642Z] 
[2024-03-07T16:33:08.642Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.642Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.642Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.642Z] 
[2024-03-07T16:33:08.642Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.642Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.642Z] 
[2024-03-07T16:33:08.642Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.642Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.642Z]             try:
[2024-03-07T16:33:08.642Z] >               yield
[2024-03-07T16:33:08.642Z] 
[2024-03-07T16:33:08.642Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.642Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.642Z] 
[2024-03-07T16:33:08.642Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.642Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.642Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.642Z] 
[2024-03-07T16:33:08.642Z]     def _multicall(
[2024-03-07T16:33:08.642Z]         hook_name: str,
[2024-03-07T16:33:08.642Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.642Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.642Z]         firstresult: bool,
[2024-03-07T16:33:08.642Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.642Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.642Z]         result(s).
[2024-03-07T16:33:08.642Z]     
[2024-03-07T16:33:08.642Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.642Z]         """
[2024-03-07T16:33:08.642Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.642Z]         results: list[object] = []
[2024-03-07T16:33:08.642Z]         exception = None
[2024-03-07T16:33:08.642Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.642Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.642Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.642Z]             try:
[2024-03-07T16:33:08.642Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.642Z]                     try:
[2024-03-07T16:33:08.642Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.642Z]                     except KeyError:
[2024-03-07T16:33:08.642Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.642Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.643Z]                                 raise HookCallError(
[2024-03-07T16:33:08.643Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.643Z]                                 )
[2024-03-07T16:33:08.643Z]     
[2024-03-07T16:33:08.643Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.643Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.643Z]                         try:
[2024-03-07T16:33:08.643Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.643Z]                             # which is the desired response.
[2024-03-07T16:33:08.643Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.643Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.643Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.643Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.643Z]                         except StopIteration:
[2024-03-07T16:33:08.643Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.643Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.643Z]                         try:
[2024-03-07T16:33:08.643Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.643Z]                             # which is the desired response.
[2024-03-07T16:33:08.643Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.643Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.643Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.643Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.643Z]                         except StopIteration:
[2024-03-07T16:33:08.643Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.643Z]                     else:
[2024-03-07T16:33:08.643Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.643Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.643Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.643Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.643Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.643Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.643Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.643Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.643Z]     
[2024-03-07T16:33:08.643Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.643Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.643Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.643Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.643Z]             if exc:
[2024-03-07T16:33:08.643Z]                 raise exc
[2024-03-07T16:33:08.643Z]     
[2024-03-07T16:33:08.643Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.643Z]             assert col not in self.stack
[2024-03-07T16:33:08.643Z]             # Push onto the stack.
[2024-03-07T16:33:08.643Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.643Z]             try:
[2024-03-07T16:33:08.643Z]                 col.setup()
[2024-03-07T16:33:08.643Z]             except TEST_OUTCOME as exc:
[2024-03-07T16:33:08.643Z]                 self.stack[col] = (self.stack[col][0], exc)
[2024-03-07T16:33:08.643Z] >               raise exc
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:514: 
[2024-03-07T16:33:08.643Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.643Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.643Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.643Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.643Z]     
[2024-03-07T16:33:08.643Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.643Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.643Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.643Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.643Z]             if exc:
[2024-03-07T16:33:08.643Z]                 raise exc
[2024-03-07T16:33:08.643Z]     
[2024-03-07T16:33:08.643Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.643Z]             assert col not in self.stack
[2024-03-07T16:33:08.643Z]             # Push onto the stack.
[2024-03-07T16:33:08.643Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.643Z]             try:
[2024-03-07T16:33:08.643Z] >               col.setup()
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:511: 
[2024-03-07T16:33:08.643Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] self = <IPyNbFile 06_Raven_calibration.ipynb>
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z]     def setup(self):
[2024-03-07T16:33:08.643Z]         """
[2024-03-07T16:33:08.643Z]         Called by pytest to setup the collector cells in .
[2024-03-07T16:33:08.643Z]         Here we start a kernel and setup the sanitize patterns.
[2024-03-07T16:33:08.643Z]         """
[2024-03-07T16:33:08.643Z]         # we've already checked that --nbval-current-env and
[2024-03-07T16:33:08.643Z]         # --nbval-kernel-name were not both supplied
[2024-03-07T16:33:08.643Z]         if self.parent.config.option.nbval_current_env:
[2024-03-07T16:33:08.643Z]             kernel_name = CURRENT_ENV_KERNEL_NAME
[2024-03-07T16:33:08.643Z]         elif self.parent.config.option.nbval_kernel_name:
[2024-03-07T16:33:08.643Z]             kernel_name = self.parent.config.option.nbval_kernel_name
[2024-03-07T16:33:08.643Z]         else:
[2024-03-07T16:33:08.643Z]             kernel_name = self.nb.metadata.get(
[2024-03-07T16:33:08.643Z]                 'kernelspec', {}).get('name', 'python')
[2024-03-07T16:33:08.643Z] >       self.kernel = RunningKernel(
[2024-03-07T16:33:08.643Z]             kernel_name,
[2024-03-07T16:33:08.643Z]             cwd=str(self.fspath.dirname),
[2024-03-07T16:33:08.643Z]             startup_timeout=self.config.option.nbval_kernel_startup_timeout,
[2024-03-07T16:33:08.643Z]         )
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/plugin.py:264: 
[2024-03-07T16:33:08.643Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] self = <nbval.kernel.RunningKernel object at 0x7f0abb8c4d60>
[2024-03-07T16:33:08.643Z] kernel_name = 'python'
[2024-03-07T16:33:08.643Z] cwd = '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks'
[2024-03-07T16:33:08.643Z] startup_timeout = 60
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z]     def __init__(self, kernel_name, cwd=None, startup_timeout=60):
[2024-03-07T16:33:08.643Z]         """
[2024-03-07T16:33:08.643Z]         Initialise a new kernel
[2024-03-07T16:33:08.643Z]         specify that matplotlib is inline and connect the stderr.
[2024-03-07T16:33:08.643Z]         Stores the active kernel process and its manager.
[2024-03-07T16:33:08.643Z]         """
[2024-03-07T16:33:08.643Z]     
[2024-03-07T16:33:08.643Z] >       self.km, self.kc = start_new_kernel(
[2024-03-07T16:33:08.643Z]             startup_timeout=startup_timeout,
[2024-03-07T16:33:08.643Z]             kernel_name=kernel_name,
[2024-03-07T16:33:08.643Z]             stderr=open(os.devnull, 'w'),
[2024-03-07T16:33:08.643Z]             cwd=cwd,
[2024-03-07T16:33:08.643Z]         )
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:85: 
[2024-03-07T16:33:08.643Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z] startup_timeout = 60, kernel_name = 'python'
[2024-03-07T16:33:08.643Z] kwargs = {'cwd': '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks', 'stderr': <_io.TextIOWrapper name='/dev/null' mode='w' encoding='UTF-8'>}
[2024-03-07T16:33:08.643Z] km = <jupyter_client.manager.KernelManager object at 0x7f0abb8c7580>
[2024-03-07T16:33:08.643Z] kc = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.643Z] 
[2024-03-07T16:33:08.643Z]     def start_new_kernel(startup_timeout=60, kernel_name='python', **kwargs):
[2024-03-07T16:33:08.643Z]         """Start a new kernel, and return its Manager and Client"""
[2024-03-07T16:33:08.643Z]         logger.debug('Starting new kernel: "%s"' % kernel_name)
[2024-03-07T16:33:08.643Z]         km = KernelManager(kernel_name=kernel_name,
[2024-03-07T16:33:08.644Z]                            kernel_spec_manager=NbvalKernelspecManager())
[2024-03-07T16:33:08.644Z]         km.start_kernel(**kwargs)
[2024-03-07T16:33:08.644Z]         kc = km.client()
[2024-03-07T16:33:08.644Z]         kc.start_channels()
[2024-03-07T16:33:08.644Z]         try:
[2024-03-07T16:33:08.644Z] >           kc.wait_for_ready(timeout=startup_timeout)
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:57: 
[2024-03-07T16:33:08.644Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.644Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.644Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.644Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.644Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.644Z]         try:
[2024-03-07T16:33:08.644Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.644Z]         except RuntimeError:
[2024-03-07T16:33:08.644Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.644Z]             try:
[2024-03-07T16:33:08.644Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.644Z]             except RuntimeError:
[2024-03-07T16:33:08.644Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.644Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.644Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.644Z]     
[2024-03-07T16:33:08.644Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.644Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.644Z]         try:
[2024-03-07T16:33:08.644Z]             return loop.run_until_complete(future)
[2024-03-07T16:33:08.644Z]         except BaseException as e:
[2024-03-07T16:33:08.644Z]             future.cancel()
[2024-03-07T16:33:08.644Z] >           raise e
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:30: 
[2024-03-07T16:33:08.644Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.644Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.644Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.644Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.644Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.644Z]         try:
[2024-03-07T16:33:08.644Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.644Z]         except RuntimeError:
[2024-03-07T16:33:08.644Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.644Z]             try:
[2024-03-07T16:33:08.644Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.644Z]             except RuntimeError:
[2024-03-07T16:33:08.644Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.644Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.644Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.644Z]     
[2024-03-07T16:33:08.644Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.644Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.644Z]         try:
[2024-03-07T16:33:08.644Z] >           return loop.run_until_complete(future)
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:27: 
[2024-03-07T16:33:08.644Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] self = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.644Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z]     def run_until_complete(self, future):
[2024-03-07T16:33:08.644Z]         with manage_run(self):
[2024-03-07T16:33:08.644Z]             f = asyncio.ensure_future(future, loop=self)
[2024-03-07T16:33:08.644Z]             if f is not future:
[2024-03-07T16:33:08.644Z]                 f._log_destroy_pending = False
[2024-03-07T16:33:08.644Z]             while not f.done():
[2024-03-07T16:33:08.644Z]                 self._run_once()
[2024-03-07T16:33:08.644Z]                 if self._stopping:
[2024-03-07T16:33:08.644Z]                     break
[2024-03-07T16:33:08.644Z]             if not f.done():
[2024-03-07T16:33:08.644Z]                 raise RuntimeError(
[2024-03-07T16:33:08.644Z]                     'Event loop stopped before Future completed.')
[2024-03-07T16:33:08.644Z] >           return f.result()
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py:98: 
[2024-03-07T16:33:08.644Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] self = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z]     def result(self):
[2024-03-07T16:33:08.644Z]         """Return the result this future represents.
[2024-03-07T16:33:08.644Z]     
[2024-03-07T16:33:08.644Z]         If the future has been cancelled, raises CancelledError.  If the
[2024-03-07T16:33:08.644Z]         future's result isn't yet available, raises InvalidStateError.  If
[2024-03-07T16:33:08.644Z]         the future is done and has an exception set, this exception is raised.
[2024-03-07T16:33:08.644Z]         """
[2024-03-07T16:33:08.644Z]         if self._state == _CANCELLED:
[2024-03-07T16:33:08.644Z]             exc = self._make_cancelled_error()
[2024-03-07T16:33:08.644Z]             raise exc
[2024-03-07T16:33:08.644Z]         if self._state != _FINISHED:
[2024-03-07T16:33:08.644Z]             raise exceptions.InvalidStateError('Result is not ready.')
[2024-03-07T16:33:08.644Z]         self.__log_traceback = False
[2024-03-07T16:33:08.644Z]         if self._exception is not None:
[2024-03-07T16:33:08.644Z] >           raise self._exception.with_traceback(self._exception_tb)
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/futures.py:201: 
[2024-03-07T16:33:08.644Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] self = None
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z]     def __step(self, exc=None):
[2024-03-07T16:33:08.644Z]         if self.done():
[2024-03-07T16:33:08.644Z]             raise exceptions.InvalidStateError(
[2024-03-07T16:33:08.644Z]                 f'_step(): already done: {self!r}, {exc!r}')
[2024-03-07T16:33:08.644Z]         if self._must_cancel:
[2024-03-07T16:33:08.644Z]             if not isinstance(exc, exceptions.CancelledError):
[2024-03-07T16:33:08.644Z]                 exc = self._make_cancelled_error()
[2024-03-07T16:33:08.644Z]             self._must_cancel = False
[2024-03-07T16:33:08.644Z]         coro = self._coro
[2024-03-07T16:33:08.644Z]         self._fut_waiter = None
[2024-03-07T16:33:08.644Z]     
[2024-03-07T16:33:08.644Z]         _enter_task(self._loop, self)
[2024-03-07T16:33:08.644Z]         # Call either coro.throw(exc) or coro.send(None).
[2024-03-07T16:33:08.644Z]         try:
[2024-03-07T16:33:08.644Z]             if exc is None:
[2024-03-07T16:33:08.644Z]                 # We use the `send` method directly, because coroutines
[2024-03-07T16:33:08.644Z]                 # don't have `__iter__` and `__next__` methods.
[2024-03-07T16:33:08.644Z] >               result = coro.send(None)
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/tasks.py:232: 
[2024-03-07T16:33:08.644Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z] self = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.644Z] timeout = 60
[2024-03-07T16:33:08.644Z] 
[2024-03-07T16:33:08.644Z]     async def _async_wait_for_ready(self, timeout: t.Optional[float] = None) -> None:
[2024-03-07T16:33:08.644Z]         """Waits for a response when a client is blocked
[2024-03-07T16:33:08.644Z]     
[2024-03-07T16:33:08.644Z]         - Sets future time for timeout
[2024-03-07T16:33:08.644Z]         - Blocks on shell channel until a message is received
[2024-03-07T16:33:08.644Z]         - Exit if the kernel has died
[2024-03-07T16:33:08.644Z]         - If client times out before receiving a message from the kernel, send RuntimeError
[2024-03-07T16:33:08.644Z]         - Flush the IOPub channel
[2024-03-07T16:33:08.644Z]         """
[2024-03-07T16:33:08.644Z]         if timeout is None:
[2024-03-07T16:33:08.644Z]             timeout = float("inf")
[2024-03-07T16:33:08.644Z]         abs_timeout = time.time() + timeout
[2024-03-07T16:33:08.645Z]     
[2024-03-07T16:33:08.645Z]         from .manager import KernelManager
[2024-03-07T16:33:08.645Z]     
[2024-03-07T16:33:08.645Z]         if not isinstance(self.parent, KernelManager):
[2024-03-07T16:33:08.645Z]             # This Client was not created by a KernelManager,
[2024-03-07T16:33:08.645Z]             # so wait for kernel to become responsive to heartbeats
[2024-03-07T16:33:08.645Z]             # before checking for kernel_info reply
[2024-03-07T16:33:08.645Z]             while not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.645Z]                 if time.time() > abs_timeout:
[2024-03-07T16:33:08.645Z]                     raise RuntimeError(
[2024-03-07T16:33:08.645Z]                         "Kernel didn't respond to heartbeats in %d seconds and timed out" % timeout
[2024-03-07T16:33:08.645Z]                     )
[2024-03-07T16:33:08.645Z]                 await asyncio.sleep(0.2)
[2024-03-07T16:33:08.645Z]     
[2024-03-07T16:33:08.645Z]         # Wait for kernel info reply on shell channel
[2024-03-07T16:33:08.645Z]         while True:
[2024-03-07T16:33:08.645Z]             self.kernel_info()
[2024-03-07T16:33:08.645Z]             try:
[2024-03-07T16:33:08.645Z]                 msg = await self.shell_channel.get_msg(timeout=1)
[2024-03-07T16:33:08.645Z]             except Empty:
[2024-03-07T16:33:08.645Z]                 pass
[2024-03-07T16:33:08.645Z]             else:
[2024-03-07T16:33:08.645Z]                 if msg["msg_type"] == "kernel_info_reply":
[2024-03-07T16:33:08.645Z]                     # Checking that IOPub is connected. If it is not connected, start over.
[2024-03-07T16:33:08.645Z]                     try:
[2024-03-07T16:33:08.645Z]                         await self.iopub_channel.get_msg(timeout=0.2)
[2024-03-07T16:33:08.645Z]                     except Empty:
[2024-03-07T16:33:08.645Z]                         pass
[2024-03-07T16:33:08.645Z]                     else:
[2024-03-07T16:33:08.645Z]                         self._handle_kernel_info_reply(msg)
[2024-03-07T16:33:08.645Z]                         break
[2024-03-07T16:33:08.645Z]     
[2024-03-07T16:33:08.645Z]             if not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.645Z]                 raise RuntimeError("Kernel died before replying to kernel_info")
[2024-03-07T16:33:08.645Z]     
[2024-03-07T16:33:08.645Z]             # Check if current time is ready check time plus timeout
[2024-03-07T16:33:08.645Z]             if time.time() > abs_timeout:
[2024-03-07T16:33:08.645Z] >               raise RuntimeError("Kernel didn't respond in %d seconds" % timeout)
[2024-03-07T16:33:08.645Z] E               RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:206: RuntimeError
[2024-03-07T16:33:08.645Z] _ ERROR at setup of RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 2 _
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.645Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abbb08550>
[2024-03-07T16:33:08.645Z] when = 'setup'
[2024-03-07T16:33:08.645Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z]     @classmethod
[2024-03-07T16:33:08.645Z]     def from_call(
[2024-03-07T16:33:08.645Z]         cls,
[2024-03-07T16:33:08.645Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.645Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.645Z]         reraise: Optional[
[2024-03-07T16:33:08.645Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.645Z]         ] = None,
[2024-03-07T16:33:08.645Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.645Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.645Z]     
[2024-03-07T16:33:08.645Z]         :param func:
[2024-03-07T16:33:08.645Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.645Z]         :param when:
[2024-03-07T16:33:08.645Z]             The phase in which the function is called.
[2024-03-07T16:33:08.645Z]         :param reraise:
[2024-03-07T16:33:08.645Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.645Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.645Z]         """
[2024-03-07T16:33:08.645Z]         excinfo = None
[2024-03-07T16:33:08.645Z]         start = timing.time()
[2024-03-07T16:33:08.645Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.645Z]         try:
[2024-03-07T16:33:08.645Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.645Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.645Z]     )
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.645Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.645Z] kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.645Z]         """Call the hook.
[2024-03-07T16:33:08.645Z]     
[2024-03-07T16:33:08.645Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.645Z]         specification.
[2024-03-07T16:33:08.645Z]     
[2024-03-07T16:33:08.645Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.645Z]         :ref:`calling`.
[2024-03-07T16:33:08.645Z]         """
[2024-03-07T16:33:08.645Z]         assert (
[2024-03-07T16:33:08.645Z]             not self.is_historic()
[2024-03-07T16:33:08.645Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.645Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.645Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.645Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.645Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.645Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.645Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.645Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.645Z] kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z]     def _hookexec(
[2024-03-07T16:33:08.645Z]         self,
[2024-03-07T16:33:08.645Z]         hook_name: str,
[2024-03-07T16:33:08.645Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.645Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.645Z]         firstresult: bool,
[2024-03-07T16:33:08.645Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.645Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.645Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.645Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.645Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.645Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.645Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.645Z] 
[2024-03-07T16:33:08.645Z]     def _multicall(
[2024-03-07T16:33:08.645Z]         hook_name: str,
[2024-03-07T16:33:08.645Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.645Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.645Z]         firstresult: bool,
[2024-03-07T16:33:08.645Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.645Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.645Z]         result(s).
[2024-03-07T16:33:08.645Z]     
[2024-03-07T16:33:08.645Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.645Z]         """
[2024-03-07T16:33:08.645Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.645Z]         results: list[object] = []
[2024-03-07T16:33:08.646Z]         exception = None
[2024-03-07T16:33:08.646Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.646Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.646Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.646Z]             try:
[2024-03-07T16:33:08.646Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.646Z]                     try:
[2024-03-07T16:33:08.646Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.646Z]                     except KeyError:
[2024-03-07T16:33:08.646Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.646Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.646Z]                                 raise HookCallError(
[2024-03-07T16:33:08.646Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.646Z]                                 )
[2024-03-07T16:33:08.646Z]     
[2024-03-07T16:33:08.646Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.646Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.646Z]                         try:
[2024-03-07T16:33:08.646Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.646Z]                             # which is the desired response.
[2024-03-07T16:33:08.646Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.646Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.646Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.646Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.646Z]                         except StopIteration:
[2024-03-07T16:33:08.646Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.646Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.646Z]                         try:
[2024-03-07T16:33:08.646Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.646Z]                             # which is the desired response.
[2024-03-07T16:33:08.646Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.646Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.646Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.646Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.646Z]                         except StopIteration:
[2024-03-07T16:33:08.646Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.646Z]                     else:
[2024-03-07T16:33:08.646Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.646Z]                         if res is not None:
[2024-03-07T16:33:08.646Z]                             results.append(res)
[2024-03-07T16:33:08.646Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.646Z]                                 break
[2024-03-07T16:33:08.646Z]             except BaseException as exc:
[2024-03-07T16:33:08.646Z]                 exception = exc
[2024-03-07T16:33:08.646Z]         finally:
[2024-03-07T16:33:08.646Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.646Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.646Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.646Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.646Z]                 else:
[2024-03-07T16:33:08.646Z]                     result = results
[2024-03-07T16:33:08.646Z]     
[2024-03-07T16:33:08.646Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.646Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.646Z]                     try:
[2024-03-07T16:33:08.646Z]                         if exception is not None:
[2024-03-07T16:33:08.646Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.646Z]                         else:
[2024-03-07T16:33:08.646Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.646Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.646Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.646Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.646Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.646Z]                     except StopIteration as si:
[2024-03-07T16:33:08.646Z]                         result = si.value
[2024-03-07T16:33:08.646Z]                         exception = None
[2024-03-07T16:33:08.646Z]                         continue
[2024-03-07T16:33:08.646Z]                     except BaseException as e:
[2024-03-07T16:33:08.646Z]                         exception = e
[2024-03-07T16:33:08.646Z]                         continue
[2024-03-07T16:33:08.646Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.646Z]     
[2024-03-07T16:33:08.646Z]                 if exception is not None:
[2024-03-07T16:33:08.646Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.646Z] 
[2024-03-07T16:33:08.646Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.646Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.646Z] 
[2024-03-07T16:33:08.646Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.646Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.646Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.646Z] 
[2024-03-07T16:33:08.646Z]     def _multicall(
[2024-03-07T16:33:08.646Z]         hook_name: str,
[2024-03-07T16:33:08.646Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.646Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.646Z]         firstresult: bool,
[2024-03-07T16:33:08.646Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.646Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.646Z]         result(s).
[2024-03-07T16:33:08.646Z]     
[2024-03-07T16:33:08.646Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.646Z]         """
[2024-03-07T16:33:08.646Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.646Z]         results: list[object] = []
[2024-03-07T16:33:08.646Z]         exception = None
[2024-03-07T16:33:08.646Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.646Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.646Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.646Z]             try:
[2024-03-07T16:33:08.646Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.646Z]                     try:
[2024-03-07T16:33:08.646Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.646Z]                     except KeyError:
[2024-03-07T16:33:08.646Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.646Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.646Z]                                 raise HookCallError(
[2024-03-07T16:33:08.646Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.646Z]                                 )
[2024-03-07T16:33:08.646Z]     
[2024-03-07T16:33:08.646Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.646Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.646Z]                         try:
[2024-03-07T16:33:08.646Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.646Z]                             # which is the desired response.
[2024-03-07T16:33:08.646Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.646Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.646Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.646Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.646Z]                         except StopIteration:
[2024-03-07T16:33:08.646Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.646Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.646Z]                         try:
[2024-03-07T16:33:08.646Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.646Z]                             # which is the desired response.
[2024-03-07T16:33:08.646Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.646Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.646Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.646Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.646Z]                         except StopIteration:
[2024-03-07T16:33:08.646Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.646Z]                     else:
[2024-03-07T16:33:08.647Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.647Z]                         if res is not None:
[2024-03-07T16:33:08.647Z]                             results.append(res)
[2024-03-07T16:33:08.647Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.647Z]                                 break
[2024-03-07T16:33:08.647Z]             except BaseException as exc:
[2024-03-07T16:33:08.647Z]                 exception = exc
[2024-03-07T16:33:08.647Z]         finally:
[2024-03-07T16:33:08.647Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.647Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.647Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.647Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.647Z]                 else:
[2024-03-07T16:33:08.647Z]                     result = results
[2024-03-07T16:33:08.647Z]     
[2024-03-07T16:33:08.647Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.647Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.647Z]                     try:
[2024-03-07T16:33:08.647Z]                         if exception is not None:
[2024-03-07T16:33:08.647Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.647Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.647Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.647Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.647Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.647Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.647Z]             try:
[2024-03-07T16:33:08.647Z] >               yield
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.647Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.647Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.647Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z]     def _multicall(
[2024-03-07T16:33:08.647Z]         hook_name: str,
[2024-03-07T16:33:08.647Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.647Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.647Z]         firstresult: bool,
[2024-03-07T16:33:08.647Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.647Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.647Z]         result(s).
[2024-03-07T16:33:08.647Z]     
[2024-03-07T16:33:08.647Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.647Z]         """
[2024-03-07T16:33:08.647Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.647Z]         results: list[object] = []
[2024-03-07T16:33:08.647Z]         exception = None
[2024-03-07T16:33:08.647Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.647Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.647Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.647Z]             try:
[2024-03-07T16:33:08.647Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.647Z]                     try:
[2024-03-07T16:33:08.647Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.647Z]                     except KeyError:
[2024-03-07T16:33:08.647Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.647Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.647Z]                                 raise HookCallError(
[2024-03-07T16:33:08.647Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.647Z]                                 )
[2024-03-07T16:33:08.647Z]     
[2024-03-07T16:33:08.647Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.647Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.647Z]                         try:
[2024-03-07T16:33:08.647Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.647Z]                             # which is the desired response.
[2024-03-07T16:33:08.647Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.647Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.647Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.647Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.647Z]                         except StopIteration:
[2024-03-07T16:33:08.647Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.647Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.647Z]                         try:
[2024-03-07T16:33:08.647Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.647Z]                             # which is the desired response.
[2024-03-07T16:33:08.647Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.647Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.647Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.647Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.647Z]                         except StopIteration:
[2024-03-07T16:33:08.647Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.647Z]                     else:
[2024-03-07T16:33:08.647Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.647Z]                         if res is not None:
[2024-03-07T16:33:08.647Z]                             results.append(res)
[2024-03-07T16:33:08.647Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.647Z]                                 break
[2024-03-07T16:33:08.647Z]             except BaseException as exc:
[2024-03-07T16:33:08.647Z]                 exception = exc
[2024-03-07T16:33:08.647Z]         finally:
[2024-03-07T16:33:08.647Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.647Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.647Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.647Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.647Z]                 else:
[2024-03-07T16:33:08.647Z]                     result = results
[2024-03-07T16:33:08.647Z]     
[2024-03-07T16:33:08.647Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.647Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.647Z]                     try:
[2024-03-07T16:33:08.647Z]                         if exception is not None:
[2024-03-07T16:33:08.647Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.647Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.647Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.647Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.647Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.647Z]     
[2024-03-07T16:33:08.647Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.647Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.647Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.647Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.647Z] item = <IPyNbCell Cell 2>, when = 'setup'
[2024-03-07T16:33:08.647Z] 
[2024-03-07T16:33:08.647Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.647Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.647Z]         with catching_logs(
[2024-03-07T16:33:08.647Z]             self.caplog_handler,
[2024-03-07T16:33:08.647Z]             level=self.log_level,
[2024-03-07T16:33:08.647Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.647Z]             self.report_handler,
[2024-03-07T16:33:08.647Z]             level=self.log_level,
[2024-03-07T16:33:08.647Z]         ) as report_handler:
[2024-03-07T16:33:08.647Z]             caplog_handler.reset()
[2024-03-07T16:33:08.647Z]             report_handler.reset()
[2024-03-07T16:33:08.647Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.648Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.648Z]     
[2024-03-07T16:33:08.648Z]             try:
[2024-03-07T16:33:08.648Z] >               yield
[2024-03-07T16:33:08.648Z] 
[2024-03-07T16:33:08.648Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.648Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.648Z] 
[2024-03-07T16:33:08.648Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.648Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.648Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.648Z] 
[2024-03-07T16:33:08.648Z]     def _multicall(
[2024-03-07T16:33:08.648Z]         hook_name: str,
[2024-03-07T16:33:08.648Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.648Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.648Z]         firstresult: bool,
[2024-03-07T16:33:08.648Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.648Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.648Z]         result(s).
[2024-03-07T16:33:08.648Z]     
[2024-03-07T16:33:08.648Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.648Z]         """
[2024-03-07T16:33:08.648Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.648Z]         results: list[object] = []
[2024-03-07T16:33:08.648Z]         exception = None
[2024-03-07T16:33:08.648Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.648Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.648Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.648Z]             try:
[2024-03-07T16:33:08.648Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.648Z]                     try:
[2024-03-07T16:33:08.648Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.648Z]                     except KeyError:
[2024-03-07T16:33:08.648Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.648Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.648Z]                                 raise HookCallError(
[2024-03-07T16:33:08.648Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.648Z]                                 )
[2024-03-07T16:33:08.648Z]     
[2024-03-07T16:33:08.648Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.648Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.648Z]                         try:
[2024-03-07T16:33:08.648Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.648Z]                             # which is the desired response.
[2024-03-07T16:33:08.648Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.648Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.648Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.648Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.648Z]                         except StopIteration:
[2024-03-07T16:33:08.648Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.648Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.648Z]                         try:
[2024-03-07T16:33:08.648Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.648Z]                             # which is the desired response.
[2024-03-07T16:33:08.648Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.648Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.648Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.648Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.648Z]                         except StopIteration:
[2024-03-07T16:33:08.648Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.648Z]                     else:
[2024-03-07T16:33:08.648Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.648Z]                         if res is not None:
[2024-03-07T16:33:08.648Z]                             results.append(res)
[2024-03-07T16:33:08.648Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.648Z]                                 break
[2024-03-07T16:33:08.648Z]             except BaseException as exc:
[2024-03-07T16:33:08.648Z]                 exception = exc
[2024-03-07T16:33:08.648Z]         finally:
[2024-03-07T16:33:08.648Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.648Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.648Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.648Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.648Z]                 else:
[2024-03-07T16:33:08.648Z]                     result = results
[2024-03-07T16:33:08.648Z]     
[2024-03-07T16:33:08.648Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.648Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.648Z]                     try:
[2024-03-07T16:33:08.648Z]                         if exception is not None:
[2024-03-07T16:33:08.648Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.648Z] 
[2024-03-07T16:33:08.648Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.648Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.648Z] 
[2024-03-07T16:33:08.648Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.648Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.648Z] 
[2024-03-07T16:33:08.648Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.648Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.648Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.648Z] >           return (yield)
[2024-03-07T16:33:08.648Z] 
[2024-03-07T16:33:08.648Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.648Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.648Z] 
[2024-03-07T16:33:08.648Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.648Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.648Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.648Z] 
[2024-03-07T16:33:08.648Z]     def _multicall(
[2024-03-07T16:33:08.648Z]         hook_name: str,
[2024-03-07T16:33:08.648Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.648Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.648Z]         firstresult: bool,
[2024-03-07T16:33:08.648Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.648Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.648Z]         result(s).
[2024-03-07T16:33:08.648Z]     
[2024-03-07T16:33:08.648Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.648Z]         """
[2024-03-07T16:33:08.648Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.648Z]         results: list[object] = []
[2024-03-07T16:33:08.648Z]         exception = None
[2024-03-07T16:33:08.648Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.648Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.648Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.648Z]             try:
[2024-03-07T16:33:08.648Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.648Z]                     try:
[2024-03-07T16:33:08.648Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.648Z]                     except KeyError:
[2024-03-07T16:33:08.648Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.648Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.648Z]                                 raise HookCallError(
[2024-03-07T16:33:08.648Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.648Z]                                 )
[2024-03-07T16:33:08.648Z]     
[2024-03-07T16:33:08.648Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.648Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.648Z]                         try:
[2024-03-07T16:33:08.648Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.648Z]                             # which is the desired response.
[2024-03-07T16:33:08.648Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.648Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.648Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.648Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.648Z]                         except StopIteration:
[2024-03-07T16:33:08.648Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.648Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.648Z]                         try:
[2024-03-07T16:33:08.649Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.649Z]                             # which is the desired response.
[2024-03-07T16:33:08.649Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.649Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.649Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.649Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.649Z]                         except StopIteration:
[2024-03-07T16:33:08.649Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.649Z]                     else:
[2024-03-07T16:33:08.649Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.649Z]                         if res is not None:
[2024-03-07T16:33:08.649Z]                             results.append(res)
[2024-03-07T16:33:08.649Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.649Z]                                 break
[2024-03-07T16:33:08.649Z]             except BaseException as exc:
[2024-03-07T16:33:08.649Z]                 exception = exc
[2024-03-07T16:33:08.649Z]         finally:
[2024-03-07T16:33:08.649Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.649Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.649Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.649Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.649Z]                 else:
[2024-03-07T16:33:08.649Z]                     result = results
[2024-03-07T16:33:08.649Z]     
[2024-03-07T16:33:08.649Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.649Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.649Z]                     try:
[2024-03-07T16:33:08.649Z]                         if exception is not None:
[2024-03-07T16:33:08.649Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.649Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.649Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.649Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.649Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.649Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.649Z]             try:
[2024-03-07T16:33:08.649Z] >               yield
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.649Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.649Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.649Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z]     def _multicall(
[2024-03-07T16:33:08.649Z]         hook_name: str,
[2024-03-07T16:33:08.649Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.649Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.649Z]         firstresult: bool,
[2024-03-07T16:33:08.649Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.649Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.649Z]         result(s).
[2024-03-07T16:33:08.649Z]     
[2024-03-07T16:33:08.649Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.649Z]         """
[2024-03-07T16:33:08.649Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.649Z]         results: list[object] = []
[2024-03-07T16:33:08.649Z]         exception = None
[2024-03-07T16:33:08.649Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.649Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.649Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.649Z]             try:
[2024-03-07T16:33:08.649Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.649Z]                     try:
[2024-03-07T16:33:08.649Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.649Z]                     except KeyError:
[2024-03-07T16:33:08.649Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.649Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.649Z]                                 raise HookCallError(
[2024-03-07T16:33:08.649Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.649Z]                                 )
[2024-03-07T16:33:08.649Z]     
[2024-03-07T16:33:08.649Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.649Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.649Z]                         try:
[2024-03-07T16:33:08.649Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.649Z]                             # which is the desired response.
[2024-03-07T16:33:08.649Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.649Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.649Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.649Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.649Z]                         except StopIteration:
[2024-03-07T16:33:08.649Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.649Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.649Z]                         try:
[2024-03-07T16:33:08.649Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.649Z]                             # which is the desired response.
[2024-03-07T16:33:08.649Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.649Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.649Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.649Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.649Z]                         except StopIteration:
[2024-03-07T16:33:08.649Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.649Z]                     else:
[2024-03-07T16:33:08.649Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.649Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.649Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.649Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.649Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.649Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.649Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.649Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.649Z]     
[2024-03-07T16:33:08.649Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.649Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.649Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.649Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.649Z]             if exc:
[2024-03-07T16:33:08.649Z] >               raise exc
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.649Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.649Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abc051900>
[2024-03-07T16:33:08.649Z] when = 'setup'
[2024-03-07T16:33:08.649Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.649Z] 
[2024-03-07T16:33:08.649Z]     @classmethod
[2024-03-07T16:33:08.649Z]     def from_call(
[2024-03-07T16:33:08.649Z]         cls,
[2024-03-07T16:33:08.649Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.649Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.649Z]         reraise: Optional[
[2024-03-07T16:33:08.650Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.650Z]         ] = None,
[2024-03-07T16:33:08.650Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.650Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.650Z]     
[2024-03-07T16:33:08.650Z]         :param func:
[2024-03-07T16:33:08.650Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.650Z]         :param when:
[2024-03-07T16:33:08.650Z]             The phase in which the function is called.
[2024-03-07T16:33:08.650Z]         :param reraise:
[2024-03-07T16:33:08.650Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.650Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.650Z]         """
[2024-03-07T16:33:08.650Z]         excinfo = None
[2024-03-07T16:33:08.650Z]         start = timing.time()
[2024-03-07T16:33:08.650Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.650Z]         try:
[2024-03-07T16:33:08.650Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.650Z] 
[2024-03-07T16:33:08.650Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.650Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.650Z] 
[2024-03-07T16:33:08.650Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.650Z]     )
[2024-03-07T16:33:08.650Z] 
[2024-03-07T16:33:08.650Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.650Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.650Z] 
[2024-03-07T16:33:08.650Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.650Z] kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.650Z] 
[2024-03-07T16:33:08.650Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.650Z]         """Call the hook.
[2024-03-07T16:33:08.650Z]     
[2024-03-07T16:33:08.650Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.650Z]         specification.
[2024-03-07T16:33:08.650Z]     
[2024-03-07T16:33:08.650Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.650Z]         :ref:`calling`.
[2024-03-07T16:33:08.650Z]         """
[2024-03-07T16:33:08.650Z]         assert (
[2024-03-07T16:33:08.650Z]             not self.is_historic()
[2024-03-07T16:33:08.650Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.650Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.650Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.650Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.650Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.650Z] 
[2024-03-07T16:33:08.650Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.650Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.650Z] 
[2024-03-07T16:33:08.650Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.650Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.650Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.650Z] kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.650Z] 
[2024-03-07T16:33:08.650Z]     def _hookexec(
[2024-03-07T16:33:08.650Z]         self,
[2024-03-07T16:33:08.650Z]         hook_name: str,
[2024-03-07T16:33:08.650Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.650Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.650Z]         firstresult: bool,
[2024-03-07T16:33:08.650Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.650Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.650Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.650Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.650Z] 
[2024-03-07T16:33:08.650Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.650Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.650Z] 
[2024-03-07T16:33:08.650Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.650Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.650Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.650Z] 
[2024-03-07T16:33:08.650Z]     def _multicall(
[2024-03-07T16:33:08.650Z]         hook_name: str,
[2024-03-07T16:33:08.650Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.650Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.650Z]         firstresult: bool,
[2024-03-07T16:33:08.650Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.650Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.650Z]         result(s).
[2024-03-07T16:33:08.650Z]     
[2024-03-07T16:33:08.650Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.650Z]         """
[2024-03-07T16:33:08.650Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.650Z]         results: list[object] = []
[2024-03-07T16:33:08.650Z]         exception = None
[2024-03-07T16:33:08.650Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.650Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.650Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.650Z]             try:
[2024-03-07T16:33:08.650Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.650Z]                     try:
[2024-03-07T16:33:08.650Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.650Z]                     except KeyError:
[2024-03-07T16:33:08.650Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.650Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.650Z]                                 raise HookCallError(
[2024-03-07T16:33:08.650Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.650Z]                                 )
[2024-03-07T16:33:08.650Z]     
[2024-03-07T16:33:08.650Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.650Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.650Z]                         try:
[2024-03-07T16:33:08.650Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.650Z]                             # which is the desired response.
[2024-03-07T16:33:08.650Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.650Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.650Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.650Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.650Z]                         except StopIteration:
[2024-03-07T16:33:08.650Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.650Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.650Z]                         try:
[2024-03-07T16:33:08.650Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.650Z]                             # which is the desired response.
[2024-03-07T16:33:08.650Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.650Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.650Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.650Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.650Z]                         except StopIteration:
[2024-03-07T16:33:08.650Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.650Z]                     else:
[2024-03-07T16:33:08.650Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.650Z]                         if res is not None:
[2024-03-07T16:33:08.650Z]                             results.append(res)
[2024-03-07T16:33:08.650Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.650Z]                                 break
[2024-03-07T16:33:08.650Z]             except BaseException as exc:
[2024-03-07T16:33:08.650Z]                 exception = exc
[2024-03-07T16:33:08.650Z]         finally:
[2024-03-07T16:33:08.650Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.650Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.650Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.650Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.650Z]                 else:
[2024-03-07T16:33:08.650Z]                     result = results
[2024-03-07T16:33:08.650Z]     
[2024-03-07T16:33:08.650Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.650Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.650Z]                     try:
[2024-03-07T16:33:08.650Z]                         if exception is not None:
[2024-03-07T16:33:08.650Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.650Z]                         else:
[2024-03-07T16:33:08.650Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.650Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.651Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.651Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.651Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.651Z]                     except StopIteration as si:
[2024-03-07T16:33:08.651Z]                         result = si.value
[2024-03-07T16:33:08.651Z]                         exception = None
[2024-03-07T16:33:08.651Z]                         continue
[2024-03-07T16:33:08.651Z]                     except BaseException as e:
[2024-03-07T16:33:08.651Z]                         exception = e
[2024-03-07T16:33:08.651Z]                         continue
[2024-03-07T16:33:08.651Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.651Z]     
[2024-03-07T16:33:08.651Z]                 if exception is not None:
[2024-03-07T16:33:08.651Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.651Z] 
[2024-03-07T16:33:08.651Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.651Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.651Z] 
[2024-03-07T16:33:08.651Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.651Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.651Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.651Z] 
[2024-03-07T16:33:08.651Z]     def _multicall(
[2024-03-07T16:33:08.651Z]         hook_name: str,
[2024-03-07T16:33:08.651Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.651Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.651Z]         firstresult: bool,
[2024-03-07T16:33:08.651Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.651Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.651Z]         result(s).
[2024-03-07T16:33:08.651Z]     
[2024-03-07T16:33:08.651Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.651Z]         """
[2024-03-07T16:33:08.651Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.651Z]         results: list[object] = []
[2024-03-07T16:33:08.651Z]         exception = None
[2024-03-07T16:33:08.651Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.651Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.651Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.651Z]             try:
[2024-03-07T16:33:08.651Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.651Z]                     try:
[2024-03-07T16:33:08.651Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.651Z]                     except KeyError:
[2024-03-07T16:33:08.651Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.651Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.651Z]                                 raise HookCallError(
[2024-03-07T16:33:08.651Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.651Z]                                 )
[2024-03-07T16:33:08.651Z]     
[2024-03-07T16:33:08.651Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.651Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.651Z]                         try:
[2024-03-07T16:33:08.651Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.651Z]                             # which is the desired response.
[2024-03-07T16:33:08.651Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.651Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.651Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.651Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.651Z]                         except StopIteration:
[2024-03-07T16:33:08.651Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.651Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.651Z]                         try:
[2024-03-07T16:33:08.651Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.651Z]                             # which is the desired response.
[2024-03-07T16:33:08.651Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.651Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.651Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.651Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.651Z]                         except StopIteration:
[2024-03-07T16:33:08.651Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.651Z]                     else:
[2024-03-07T16:33:08.651Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.651Z]                         if res is not None:
[2024-03-07T16:33:08.651Z]                             results.append(res)
[2024-03-07T16:33:08.651Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.651Z]                                 break
[2024-03-07T16:33:08.651Z]             except BaseException as exc:
[2024-03-07T16:33:08.651Z]                 exception = exc
[2024-03-07T16:33:08.651Z]         finally:
[2024-03-07T16:33:08.651Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.651Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.651Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.651Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.651Z]                 else:
[2024-03-07T16:33:08.651Z]                     result = results
[2024-03-07T16:33:08.651Z]     
[2024-03-07T16:33:08.651Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.651Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.651Z]                     try:
[2024-03-07T16:33:08.651Z]                         if exception is not None:
[2024-03-07T16:33:08.651Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.651Z] 
[2024-03-07T16:33:08.651Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.651Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.651Z] 
[2024-03-07T16:33:08.651Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.651Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.651Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.651Z] 
[2024-03-07T16:33:08.651Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.651Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.651Z] 
[2024-03-07T16:33:08.651Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.651Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.651Z]             try:
[2024-03-07T16:33:08.651Z] >               yield
[2024-03-07T16:33:08.651Z] 
[2024-03-07T16:33:08.651Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.651Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.651Z] 
[2024-03-07T16:33:08.651Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.651Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.651Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.651Z] 
[2024-03-07T16:33:08.651Z]     def _multicall(
[2024-03-07T16:33:08.651Z]         hook_name: str,
[2024-03-07T16:33:08.651Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.651Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.651Z]         firstresult: bool,
[2024-03-07T16:33:08.651Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.651Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.651Z]         result(s).
[2024-03-07T16:33:08.651Z]     
[2024-03-07T16:33:08.651Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.651Z]         """
[2024-03-07T16:33:08.651Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.651Z]         results: list[object] = []
[2024-03-07T16:33:08.651Z]         exception = None
[2024-03-07T16:33:08.651Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.651Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.651Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.651Z]             try:
[2024-03-07T16:33:08.651Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.651Z]                     try:
[2024-03-07T16:33:08.651Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.651Z]                     except KeyError:
[2024-03-07T16:33:08.651Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.651Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.651Z]                                 raise HookCallError(
[2024-03-07T16:33:08.651Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.651Z]                                 )
[2024-03-07T16:33:08.651Z]     
[2024-03-07T16:33:08.651Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.652Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.652Z]                         try:
[2024-03-07T16:33:08.652Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.652Z]                             # which is the desired response.
[2024-03-07T16:33:08.652Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.652Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.652Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.652Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.652Z]                         except StopIteration:
[2024-03-07T16:33:08.652Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.652Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.652Z]                         try:
[2024-03-07T16:33:08.652Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.652Z]                             # which is the desired response.
[2024-03-07T16:33:08.652Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.652Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.652Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.652Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.652Z]                         except StopIteration:
[2024-03-07T16:33:08.652Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.652Z]                     else:
[2024-03-07T16:33:08.652Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.652Z]                         if res is not None:
[2024-03-07T16:33:08.652Z]                             results.append(res)
[2024-03-07T16:33:08.652Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.652Z]                                 break
[2024-03-07T16:33:08.652Z]             except BaseException as exc:
[2024-03-07T16:33:08.652Z]                 exception = exc
[2024-03-07T16:33:08.652Z]         finally:
[2024-03-07T16:33:08.652Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.652Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.652Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.652Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.652Z]                 else:
[2024-03-07T16:33:08.652Z]                     result = results
[2024-03-07T16:33:08.652Z]     
[2024-03-07T16:33:08.652Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.652Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.652Z]                     try:
[2024-03-07T16:33:08.652Z]                         if exception is not None:
[2024-03-07T16:33:08.652Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.652Z] 
[2024-03-07T16:33:08.652Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.652Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.652Z] 
[2024-03-07T16:33:08.652Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.652Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.652Z] 
[2024-03-07T16:33:08.652Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.652Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.652Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.652Z]     
[2024-03-07T16:33:08.652Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.652Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.652Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.652Z] 
[2024-03-07T16:33:08.652Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.652Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.652Z] 
[2024-03-07T16:33:08.652Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.652Z] item = <IPyNbCell Cell 1>, when = 'setup'
[2024-03-07T16:33:08.652Z] 
[2024-03-07T16:33:08.652Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.652Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.652Z]         with catching_logs(
[2024-03-07T16:33:08.652Z]             self.caplog_handler,
[2024-03-07T16:33:08.652Z]             level=self.log_level,
[2024-03-07T16:33:08.652Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.652Z]             self.report_handler,
[2024-03-07T16:33:08.652Z]             level=self.log_level,
[2024-03-07T16:33:08.652Z]         ) as report_handler:
[2024-03-07T16:33:08.652Z]             caplog_handler.reset()
[2024-03-07T16:33:08.652Z]             report_handler.reset()
[2024-03-07T16:33:08.652Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.652Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.652Z]     
[2024-03-07T16:33:08.652Z]             try:
[2024-03-07T16:33:08.652Z] >               yield
[2024-03-07T16:33:08.652Z] 
[2024-03-07T16:33:08.652Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.652Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.652Z] 
[2024-03-07T16:33:08.652Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.652Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.652Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.652Z] 
[2024-03-07T16:33:08.652Z]     def _multicall(
[2024-03-07T16:33:08.652Z]         hook_name: str,
[2024-03-07T16:33:08.652Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.652Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.652Z]         firstresult: bool,
[2024-03-07T16:33:08.652Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.652Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.652Z]         result(s).
[2024-03-07T16:33:08.652Z]     
[2024-03-07T16:33:08.652Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.652Z]         """
[2024-03-07T16:33:08.652Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.652Z]         results: list[object] = []
[2024-03-07T16:33:08.652Z]         exception = None
[2024-03-07T16:33:08.652Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.652Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.652Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.652Z]             try:
[2024-03-07T16:33:08.652Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.652Z]                     try:
[2024-03-07T16:33:08.652Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.652Z]                     except KeyError:
[2024-03-07T16:33:08.652Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.652Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.652Z]                                 raise HookCallError(
[2024-03-07T16:33:08.652Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.652Z]                                 )
[2024-03-07T16:33:08.652Z]     
[2024-03-07T16:33:08.652Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.652Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.652Z]                         try:
[2024-03-07T16:33:08.652Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.652Z]                             # which is the desired response.
[2024-03-07T16:33:08.652Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.652Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.652Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.652Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.652Z]                         except StopIteration:
[2024-03-07T16:33:08.652Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.652Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.652Z]                         try:
[2024-03-07T16:33:08.653Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.653Z]                             # which is the desired response.
[2024-03-07T16:33:08.653Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.653Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.653Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.653Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.653Z]                         except StopIteration:
[2024-03-07T16:33:08.653Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.653Z]                     else:
[2024-03-07T16:33:08.653Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.653Z]                         if res is not None:
[2024-03-07T16:33:08.653Z]                             results.append(res)
[2024-03-07T16:33:08.653Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.653Z]                                 break
[2024-03-07T16:33:08.653Z]             except BaseException as exc:
[2024-03-07T16:33:08.653Z]                 exception = exc
[2024-03-07T16:33:08.653Z]         finally:
[2024-03-07T16:33:08.653Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.653Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.653Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.653Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.653Z]                 else:
[2024-03-07T16:33:08.653Z]                     result = results
[2024-03-07T16:33:08.653Z]     
[2024-03-07T16:33:08.653Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.653Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.653Z]                     try:
[2024-03-07T16:33:08.653Z]                         if exception is not None:
[2024-03-07T16:33:08.653Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.653Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.653Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.653Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.653Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.653Z] >           return (yield)
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.653Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.653Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.653Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z]     def _multicall(
[2024-03-07T16:33:08.653Z]         hook_name: str,
[2024-03-07T16:33:08.653Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.653Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.653Z]         firstresult: bool,
[2024-03-07T16:33:08.653Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.653Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.653Z]         result(s).
[2024-03-07T16:33:08.653Z]     
[2024-03-07T16:33:08.653Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.653Z]         """
[2024-03-07T16:33:08.653Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.653Z]         results: list[object] = []
[2024-03-07T16:33:08.653Z]         exception = None
[2024-03-07T16:33:08.653Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.653Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.653Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.653Z]             try:
[2024-03-07T16:33:08.653Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.653Z]                     try:
[2024-03-07T16:33:08.653Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.653Z]                     except KeyError:
[2024-03-07T16:33:08.653Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.653Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.653Z]                                 raise HookCallError(
[2024-03-07T16:33:08.653Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.653Z]                                 )
[2024-03-07T16:33:08.653Z]     
[2024-03-07T16:33:08.653Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.653Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.653Z]                         try:
[2024-03-07T16:33:08.653Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.653Z]                             # which is the desired response.
[2024-03-07T16:33:08.653Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.653Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.653Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.653Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.653Z]                         except StopIteration:
[2024-03-07T16:33:08.653Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.653Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.653Z]                         try:
[2024-03-07T16:33:08.653Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.653Z]                             # which is the desired response.
[2024-03-07T16:33:08.653Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.653Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.653Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.653Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.653Z]                         except StopIteration:
[2024-03-07T16:33:08.653Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.653Z]                     else:
[2024-03-07T16:33:08.653Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.653Z]                         if res is not None:
[2024-03-07T16:33:08.653Z]                             results.append(res)
[2024-03-07T16:33:08.653Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.653Z]                                 break
[2024-03-07T16:33:08.653Z]             except BaseException as exc:
[2024-03-07T16:33:08.653Z]                 exception = exc
[2024-03-07T16:33:08.653Z]         finally:
[2024-03-07T16:33:08.653Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.653Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.653Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.653Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.653Z]                 else:
[2024-03-07T16:33:08.653Z]                     result = results
[2024-03-07T16:33:08.653Z]     
[2024-03-07T16:33:08.653Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.653Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.653Z]                     try:
[2024-03-07T16:33:08.653Z]                         if exception is not None:
[2024-03-07T16:33:08.653Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.653Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.653Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.653Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.653Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.653Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.653Z]             try:
[2024-03-07T16:33:08.653Z] >               yield
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.653Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.653Z] 
[2024-03-07T16:33:08.653Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.654Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.654Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z]     def _multicall(
[2024-03-07T16:33:08.654Z]         hook_name: str,
[2024-03-07T16:33:08.654Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.654Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.654Z]         firstresult: bool,
[2024-03-07T16:33:08.654Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.654Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.654Z]         result(s).
[2024-03-07T16:33:08.654Z]     
[2024-03-07T16:33:08.654Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.654Z]         """
[2024-03-07T16:33:08.654Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.654Z]         results: list[object] = []
[2024-03-07T16:33:08.654Z]         exception = None
[2024-03-07T16:33:08.654Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.654Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.654Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.654Z]             try:
[2024-03-07T16:33:08.654Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.654Z]                     try:
[2024-03-07T16:33:08.654Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.654Z]                     except KeyError:
[2024-03-07T16:33:08.654Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.654Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.654Z]                                 raise HookCallError(
[2024-03-07T16:33:08.654Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.654Z]                                 )
[2024-03-07T16:33:08.654Z]     
[2024-03-07T16:33:08.654Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.654Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.654Z]                         try:
[2024-03-07T16:33:08.654Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.654Z]                             # which is the desired response.
[2024-03-07T16:33:08.654Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.654Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.654Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.654Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.654Z]                         except StopIteration:
[2024-03-07T16:33:08.654Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.654Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.654Z]                         try:
[2024-03-07T16:33:08.654Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.654Z]                             # which is the desired response.
[2024-03-07T16:33:08.654Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.654Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.654Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.654Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.654Z]                         except StopIteration:
[2024-03-07T16:33:08.654Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.654Z]                     else:
[2024-03-07T16:33:08.654Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.654Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.654Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.654Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.654Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.654Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.654Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.654Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.654Z]     
[2024-03-07T16:33:08.654Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.654Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.654Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.654Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.654Z]             if exc:
[2024-03-07T16:33:08.654Z] >               raise exc
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.654Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.654Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abbb0b520>
[2024-03-07T16:33:08.654Z] when = 'setup'
[2024-03-07T16:33:08.654Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z]     @classmethod
[2024-03-07T16:33:08.654Z]     def from_call(
[2024-03-07T16:33:08.654Z]         cls,
[2024-03-07T16:33:08.654Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.654Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.654Z]         reraise: Optional[
[2024-03-07T16:33:08.654Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.654Z]         ] = None,
[2024-03-07T16:33:08.654Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.654Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.654Z]     
[2024-03-07T16:33:08.654Z]         :param func:
[2024-03-07T16:33:08.654Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.654Z]         :param when:
[2024-03-07T16:33:08.654Z]             The phase in which the function is called.
[2024-03-07T16:33:08.654Z]         :param reraise:
[2024-03-07T16:33:08.654Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.654Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.654Z]         """
[2024-03-07T16:33:08.654Z]         excinfo = None
[2024-03-07T16:33:08.654Z]         start = timing.time()
[2024-03-07T16:33:08.654Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.654Z]         try:
[2024-03-07T16:33:08.654Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.654Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.654Z]     )
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.654Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.654Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.654Z] 
[2024-03-07T16:33:08.654Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.654Z]         """Call the hook.
[2024-03-07T16:33:08.654Z]     
[2024-03-07T16:33:08.654Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.654Z]         specification.
[2024-03-07T16:33:08.654Z]     
[2024-03-07T16:33:08.654Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.654Z]         :ref:`calling`.
[2024-03-07T16:33:08.654Z]         """
[2024-03-07T16:33:08.654Z]         assert (
[2024-03-07T16:33:08.654Z]             not self.is_historic()
[2024-03-07T16:33:08.654Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.654Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.655Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.655Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.655Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.655Z] 
[2024-03-07T16:33:08.655Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.655Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.655Z] 
[2024-03-07T16:33:08.655Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.655Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.655Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.655Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.655Z] 
[2024-03-07T16:33:08.655Z]     def _hookexec(
[2024-03-07T16:33:08.655Z]         self,
[2024-03-07T16:33:08.655Z]         hook_name: str,
[2024-03-07T16:33:08.655Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.655Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.655Z]         firstresult: bool,
[2024-03-07T16:33:08.655Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.655Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.655Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.655Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.655Z] 
[2024-03-07T16:33:08.655Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.655Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.655Z] 
[2024-03-07T16:33:08.655Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.655Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.655Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.655Z] 
[2024-03-07T16:33:08.655Z]     def _multicall(
[2024-03-07T16:33:08.655Z]         hook_name: str,
[2024-03-07T16:33:08.655Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.655Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.655Z]         firstresult: bool,
[2024-03-07T16:33:08.655Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.655Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.655Z]         result(s).
[2024-03-07T16:33:08.655Z]     
[2024-03-07T16:33:08.655Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.655Z]         """
[2024-03-07T16:33:08.655Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.655Z]         results: list[object] = []
[2024-03-07T16:33:08.655Z]         exception = None
[2024-03-07T16:33:08.655Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.655Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.655Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.655Z]             try:
[2024-03-07T16:33:08.655Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.655Z]                     try:
[2024-03-07T16:33:08.655Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.655Z]                     except KeyError:
[2024-03-07T16:33:08.655Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.655Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.655Z]                                 raise HookCallError(
[2024-03-07T16:33:08.655Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.655Z]                                 )
[2024-03-07T16:33:08.655Z]     
[2024-03-07T16:33:08.655Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.655Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.655Z]                         try:
[2024-03-07T16:33:08.655Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.655Z]                             # which is the desired response.
[2024-03-07T16:33:08.655Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.655Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.655Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.655Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.655Z]                         except StopIteration:
[2024-03-07T16:33:08.655Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.655Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.655Z]                         try:
[2024-03-07T16:33:08.655Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.655Z]                             # which is the desired response.
[2024-03-07T16:33:08.655Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.655Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.655Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.655Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.655Z]                         except StopIteration:
[2024-03-07T16:33:08.655Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.655Z]                     else:
[2024-03-07T16:33:08.655Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.655Z]                         if res is not None:
[2024-03-07T16:33:08.655Z]                             results.append(res)
[2024-03-07T16:33:08.655Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.655Z]                                 break
[2024-03-07T16:33:08.655Z]             except BaseException as exc:
[2024-03-07T16:33:08.655Z]                 exception = exc
[2024-03-07T16:33:08.655Z]         finally:
[2024-03-07T16:33:08.655Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.655Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.655Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.655Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.655Z]                 else:
[2024-03-07T16:33:08.655Z]                     result = results
[2024-03-07T16:33:08.655Z]     
[2024-03-07T16:33:08.655Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.655Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.655Z]                     try:
[2024-03-07T16:33:08.655Z]                         if exception is not None:
[2024-03-07T16:33:08.655Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.655Z]                         else:
[2024-03-07T16:33:08.655Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.655Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.655Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.655Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.655Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.655Z]                     except StopIteration as si:
[2024-03-07T16:33:08.655Z]                         result = si.value
[2024-03-07T16:33:08.655Z]                         exception = None
[2024-03-07T16:33:08.655Z]                         continue
[2024-03-07T16:33:08.655Z]                     except BaseException as e:
[2024-03-07T16:33:08.655Z]                         exception = e
[2024-03-07T16:33:08.655Z]                         continue
[2024-03-07T16:33:08.655Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.655Z]     
[2024-03-07T16:33:08.655Z]                 if exception is not None:
[2024-03-07T16:33:08.655Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.655Z] 
[2024-03-07T16:33:08.655Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.655Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.655Z] 
[2024-03-07T16:33:08.655Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.655Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.655Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.655Z] 
[2024-03-07T16:33:08.655Z]     def _multicall(
[2024-03-07T16:33:08.655Z]         hook_name: str,
[2024-03-07T16:33:08.655Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.655Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.655Z]         firstresult: bool,
[2024-03-07T16:33:08.655Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.655Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.655Z]         result(s).
[2024-03-07T16:33:08.655Z]     
[2024-03-07T16:33:08.655Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.655Z]         """
[2024-03-07T16:33:08.655Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.655Z]         results: list[object] = []
[2024-03-07T16:33:08.655Z]         exception = None
[2024-03-07T16:33:08.656Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.656Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.656Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.656Z]             try:
[2024-03-07T16:33:08.656Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.656Z]                     try:
[2024-03-07T16:33:08.656Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.656Z]                     except KeyError:
[2024-03-07T16:33:08.656Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.656Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.656Z]                                 raise HookCallError(
[2024-03-07T16:33:08.656Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.656Z]                                 )
[2024-03-07T16:33:08.656Z]     
[2024-03-07T16:33:08.656Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.656Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.656Z]                         try:
[2024-03-07T16:33:08.656Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.656Z]                             # which is the desired response.
[2024-03-07T16:33:08.656Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.656Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.656Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.656Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.656Z]                         except StopIteration:
[2024-03-07T16:33:08.656Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.656Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.656Z]                         try:
[2024-03-07T16:33:08.656Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.656Z]                             # which is the desired response.
[2024-03-07T16:33:08.656Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.656Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.656Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.656Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.656Z]                         except StopIteration:
[2024-03-07T16:33:08.656Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.656Z]                     else:
[2024-03-07T16:33:08.656Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.656Z]                         if res is not None:
[2024-03-07T16:33:08.656Z]                             results.append(res)
[2024-03-07T16:33:08.656Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.656Z]                                 break
[2024-03-07T16:33:08.656Z]             except BaseException as exc:
[2024-03-07T16:33:08.656Z]                 exception = exc
[2024-03-07T16:33:08.656Z]         finally:
[2024-03-07T16:33:08.656Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.656Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.656Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.656Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.656Z]                 else:
[2024-03-07T16:33:08.656Z]                     result = results
[2024-03-07T16:33:08.656Z]     
[2024-03-07T16:33:08.656Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.656Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.656Z]                     try:
[2024-03-07T16:33:08.656Z]                         if exception is not None:
[2024-03-07T16:33:08.656Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.656Z] 
[2024-03-07T16:33:08.656Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.656Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.656Z] 
[2024-03-07T16:33:08.656Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.656Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.656Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.656Z] 
[2024-03-07T16:33:08.656Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.656Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.656Z] 
[2024-03-07T16:33:08.656Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.656Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.656Z]             try:
[2024-03-07T16:33:08.656Z] >               yield
[2024-03-07T16:33:08.656Z] 
[2024-03-07T16:33:08.656Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.656Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.656Z] 
[2024-03-07T16:33:08.656Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.656Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.656Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.656Z] 
[2024-03-07T16:33:08.656Z]     def _multicall(
[2024-03-07T16:33:08.656Z]         hook_name: str,
[2024-03-07T16:33:08.656Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.656Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.656Z]         firstresult: bool,
[2024-03-07T16:33:08.656Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.656Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.656Z]         result(s).
[2024-03-07T16:33:08.656Z]     
[2024-03-07T16:33:08.656Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.656Z]         """
[2024-03-07T16:33:08.656Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.656Z]         results: list[object] = []
[2024-03-07T16:33:08.656Z]         exception = None
[2024-03-07T16:33:08.656Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.656Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.656Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.656Z]             try:
[2024-03-07T16:33:08.656Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.656Z]                     try:
[2024-03-07T16:33:08.656Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.656Z]                     except KeyError:
[2024-03-07T16:33:08.656Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.656Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.656Z]                                 raise HookCallError(
[2024-03-07T16:33:08.656Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.656Z]                                 )
[2024-03-07T16:33:08.656Z]     
[2024-03-07T16:33:08.656Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.656Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.656Z]                         try:
[2024-03-07T16:33:08.656Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.656Z]                             # which is the desired response.
[2024-03-07T16:33:08.656Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.656Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.656Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.656Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.656Z]                         except StopIteration:
[2024-03-07T16:33:08.656Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.656Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.656Z]                         try:
[2024-03-07T16:33:08.656Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.656Z]                             # which is the desired response.
[2024-03-07T16:33:08.656Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.656Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.656Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.656Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.656Z]                         except StopIteration:
[2024-03-07T16:33:08.656Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.656Z]                     else:
[2024-03-07T16:33:08.656Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.656Z]                         if res is not None:
[2024-03-07T16:33:08.656Z]                             results.append(res)
[2024-03-07T16:33:08.656Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.656Z]                                 break
[2024-03-07T16:33:08.656Z]             except BaseException as exc:
[2024-03-07T16:33:08.656Z]                 exception = exc
[2024-03-07T16:33:08.656Z]         finally:
[2024-03-07T16:33:08.656Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.656Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.656Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.657Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.657Z]                 else:
[2024-03-07T16:33:08.657Z]                     result = results
[2024-03-07T16:33:08.657Z]     
[2024-03-07T16:33:08.657Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.657Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.657Z]                     try:
[2024-03-07T16:33:08.657Z]                         if exception is not None:
[2024-03-07T16:33:08.657Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.657Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.657Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.657Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.657Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.657Z]     
[2024-03-07T16:33:08.657Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.657Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.657Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.657Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.657Z] item = <IPyNbCell Cell 0>, when = 'setup'
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.657Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.657Z]         with catching_logs(
[2024-03-07T16:33:08.657Z]             self.caplog_handler,
[2024-03-07T16:33:08.657Z]             level=self.log_level,
[2024-03-07T16:33:08.657Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.657Z]             self.report_handler,
[2024-03-07T16:33:08.657Z]             level=self.log_level,
[2024-03-07T16:33:08.657Z]         ) as report_handler:
[2024-03-07T16:33:08.657Z]             caplog_handler.reset()
[2024-03-07T16:33:08.657Z]             report_handler.reset()
[2024-03-07T16:33:08.657Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.657Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.657Z]     
[2024-03-07T16:33:08.657Z]             try:
[2024-03-07T16:33:08.657Z] >               yield
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.657Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.657Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.657Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z]     def _multicall(
[2024-03-07T16:33:08.657Z]         hook_name: str,
[2024-03-07T16:33:08.657Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.657Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.657Z]         firstresult: bool,
[2024-03-07T16:33:08.657Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.657Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.657Z]         result(s).
[2024-03-07T16:33:08.657Z]     
[2024-03-07T16:33:08.657Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.657Z]         """
[2024-03-07T16:33:08.657Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.657Z]         results: list[object] = []
[2024-03-07T16:33:08.657Z]         exception = None
[2024-03-07T16:33:08.657Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.657Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.657Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.657Z]             try:
[2024-03-07T16:33:08.657Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.657Z]                     try:
[2024-03-07T16:33:08.657Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.657Z]                     except KeyError:
[2024-03-07T16:33:08.657Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.657Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.657Z]                                 raise HookCallError(
[2024-03-07T16:33:08.657Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.657Z]                                 )
[2024-03-07T16:33:08.657Z]     
[2024-03-07T16:33:08.657Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.657Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.657Z]                         try:
[2024-03-07T16:33:08.657Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.657Z]                             # which is the desired response.
[2024-03-07T16:33:08.657Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.657Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.657Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.657Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.657Z]                         except StopIteration:
[2024-03-07T16:33:08.657Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.657Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.657Z]                         try:
[2024-03-07T16:33:08.657Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.657Z]                             # which is the desired response.
[2024-03-07T16:33:08.657Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.657Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.657Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.657Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.657Z]                         except StopIteration:
[2024-03-07T16:33:08.657Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.657Z]                     else:
[2024-03-07T16:33:08.657Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.657Z]                         if res is not None:
[2024-03-07T16:33:08.657Z]                             results.append(res)
[2024-03-07T16:33:08.657Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.657Z]                                 break
[2024-03-07T16:33:08.657Z]             except BaseException as exc:
[2024-03-07T16:33:08.657Z]                 exception = exc
[2024-03-07T16:33:08.657Z]         finally:
[2024-03-07T16:33:08.657Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.657Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.657Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.657Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.657Z]                 else:
[2024-03-07T16:33:08.657Z]                     result = results
[2024-03-07T16:33:08.657Z]     
[2024-03-07T16:33:08.657Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.657Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.657Z]                     try:
[2024-03-07T16:33:08.657Z]                         if exception is not None:
[2024-03-07T16:33:08.657Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.657Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.657Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.657Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.657Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.657Z] >           return (yield)
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.657Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.657Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.657Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.657Z] 
[2024-03-07T16:33:08.657Z]     def _multicall(
[2024-03-07T16:33:08.657Z]         hook_name: str,
[2024-03-07T16:33:08.657Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.658Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.658Z]         firstresult: bool,
[2024-03-07T16:33:08.658Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.658Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.658Z]         result(s).
[2024-03-07T16:33:08.658Z]     
[2024-03-07T16:33:08.658Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.658Z]         """
[2024-03-07T16:33:08.658Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.658Z]         results: list[object] = []
[2024-03-07T16:33:08.658Z]         exception = None
[2024-03-07T16:33:08.658Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.658Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.658Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.658Z]             try:
[2024-03-07T16:33:08.658Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.658Z]                     try:
[2024-03-07T16:33:08.658Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.658Z]                     except KeyError:
[2024-03-07T16:33:08.658Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.658Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.658Z]                                 raise HookCallError(
[2024-03-07T16:33:08.658Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.658Z]                                 )
[2024-03-07T16:33:08.658Z]     
[2024-03-07T16:33:08.658Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.658Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.658Z]                         try:
[2024-03-07T16:33:08.658Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.658Z]                             # which is the desired response.
[2024-03-07T16:33:08.658Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.658Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.658Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.658Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.658Z]                         except StopIteration:
[2024-03-07T16:33:08.658Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.658Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.658Z]                         try:
[2024-03-07T16:33:08.658Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.658Z]                             # which is the desired response.
[2024-03-07T16:33:08.658Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.658Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.658Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.658Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.658Z]                         except StopIteration:
[2024-03-07T16:33:08.658Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.658Z]                     else:
[2024-03-07T16:33:08.658Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.658Z]                         if res is not None:
[2024-03-07T16:33:08.658Z]                             results.append(res)
[2024-03-07T16:33:08.658Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.658Z]                                 break
[2024-03-07T16:33:08.658Z]             except BaseException as exc:
[2024-03-07T16:33:08.658Z]                 exception = exc
[2024-03-07T16:33:08.658Z]         finally:
[2024-03-07T16:33:08.658Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.658Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.658Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.658Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.658Z]                 else:
[2024-03-07T16:33:08.658Z]                     result = results
[2024-03-07T16:33:08.658Z]     
[2024-03-07T16:33:08.658Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.658Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.658Z]                     try:
[2024-03-07T16:33:08.658Z]                         if exception is not None:
[2024-03-07T16:33:08.658Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.658Z] 
[2024-03-07T16:33:08.658Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.658Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.658Z] 
[2024-03-07T16:33:08.658Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.658Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.658Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.658Z] 
[2024-03-07T16:33:08.658Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.658Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.658Z] 
[2024-03-07T16:33:08.658Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.658Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.658Z]             try:
[2024-03-07T16:33:08.658Z] >               yield
[2024-03-07T16:33:08.658Z] 
[2024-03-07T16:33:08.658Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.658Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.658Z] 
[2024-03-07T16:33:08.658Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.658Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.658Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.658Z] 
[2024-03-07T16:33:08.658Z]     def _multicall(
[2024-03-07T16:33:08.658Z]         hook_name: str,
[2024-03-07T16:33:08.658Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.658Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.658Z]         firstresult: bool,
[2024-03-07T16:33:08.658Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.658Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.658Z]         result(s).
[2024-03-07T16:33:08.658Z]     
[2024-03-07T16:33:08.658Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.658Z]         """
[2024-03-07T16:33:08.658Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.658Z]         results: list[object] = []
[2024-03-07T16:33:08.658Z]         exception = None
[2024-03-07T16:33:08.658Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.658Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.658Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.658Z]             try:
[2024-03-07T16:33:08.658Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.658Z]                     try:
[2024-03-07T16:33:08.658Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.658Z]                     except KeyError:
[2024-03-07T16:33:08.658Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.658Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.658Z]                                 raise HookCallError(
[2024-03-07T16:33:08.658Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.658Z]                                 )
[2024-03-07T16:33:08.658Z]     
[2024-03-07T16:33:08.658Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.658Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.658Z]                         try:
[2024-03-07T16:33:08.658Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.658Z]                             # which is the desired response.
[2024-03-07T16:33:08.658Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.658Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.658Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.658Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.658Z]                         except StopIteration:
[2024-03-07T16:33:08.658Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.658Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.658Z]                         try:
[2024-03-07T16:33:08.658Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.658Z]                             # which is the desired response.
[2024-03-07T16:33:08.658Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.658Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.658Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.658Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.658Z]                         except StopIteration:
[2024-03-07T16:33:08.659Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.659Z]                     else:
[2024-03-07T16:33:08.659Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.659Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.659Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.659Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.659Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.659Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.659Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.659Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.659Z]     
[2024-03-07T16:33:08.659Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.659Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.659Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.659Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.659Z]             if exc:
[2024-03-07T16:33:08.659Z]                 raise exc
[2024-03-07T16:33:08.659Z]     
[2024-03-07T16:33:08.659Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.659Z]             assert col not in self.stack
[2024-03-07T16:33:08.659Z]             # Push onto the stack.
[2024-03-07T16:33:08.659Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.659Z]             try:
[2024-03-07T16:33:08.659Z]                 col.setup()
[2024-03-07T16:33:08.659Z]             except TEST_OUTCOME as exc:
[2024-03-07T16:33:08.659Z]                 self.stack[col] = (self.stack[col][0], exc)
[2024-03-07T16:33:08.659Z] >               raise exc
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:514: 
[2024-03-07T16:33:08.659Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.659Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.659Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.659Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.659Z]     
[2024-03-07T16:33:08.659Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.659Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.659Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.659Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.659Z]             if exc:
[2024-03-07T16:33:08.659Z]                 raise exc
[2024-03-07T16:33:08.659Z]     
[2024-03-07T16:33:08.659Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.659Z]             assert col not in self.stack
[2024-03-07T16:33:08.659Z]             # Push onto the stack.
[2024-03-07T16:33:08.659Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.659Z]             try:
[2024-03-07T16:33:08.659Z] >               col.setup()
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:511: 
[2024-03-07T16:33:08.659Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] self = <IPyNbFile 06_Raven_calibration.ipynb>
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z]     def setup(self):
[2024-03-07T16:33:08.659Z]         """
[2024-03-07T16:33:08.659Z]         Called by pytest to setup the collector cells in .
[2024-03-07T16:33:08.659Z]         Here we start a kernel and setup the sanitize patterns.
[2024-03-07T16:33:08.659Z]         """
[2024-03-07T16:33:08.659Z]         # we've already checked that --nbval-current-env and
[2024-03-07T16:33:08.659Z]         # --nbval-kernel-name were not both supplied
[2024-03-07T16:33:08.659Z]         if self.parent.config.option.nbval_current_env:
[2024-03-07T16:33:08.659Z]             kernel_name = CURRENT_ENV_KERNEL_NAME
[2024-03-07T16:33:08.659Z]         elif self.parent.config.option.nbval_kernel_name:
[2024-03-07T16:33:08.659Z]             kernel_name = self.parent.config.option.nbval_kernel_name
[2024-03-07T16:33:08.659Z]         else:
[2024-03-07T16:33:08.659Z]             kernel_name = self.nb.metadata.get(
[2024-03-07T16:33:08.659Z]                 'kernelspec', {}).get('name', 'python')
[2024-03-07T16:33:08.659Z] >       self.kernel = RunningKernel(
[2024-03-07T16:33:08.659Z]             kernel_name,
[2024-03-07T16:33:08.659Z]             cwd=str(self.fspath.dirname),
[2024-03-07T16:33:08.659Z]             startup_timeout=self.config.option.nbval_kernel_startup_timeout,
[2024-03-07T16:33:08.659Z]         )
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/plugin.py:264: 
[2024-03-07T16:33:08.659Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] self = <nbval.kernel.RunningKernel object at 0x7f0abb8c4d60>
[2024-03-07T16:33:08.659Z] kernel_name = 'python'
[2024-03-07T16:33:08.659Z] cwd = '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks'
[2024-03-07T16:33:08.659Z] startup_timeout = 60
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z]     def __init__(self, kernel_name, cwd=None, startup_timeout=60):
[2024-03-07T16:33:08.659Z]         """
[2024-03-07T16:33:08.659Z]         Initialise a new kernel
[2024-03-07T16:33:08.659Z]         specify that matplotlib is inline and connect the stderr.
[2024-03-07T16:33:08.659Z]         Stores the active kernel process and its manager.
[2024-03-07T16:33:08.659Z]         """
[2024-03-07T16:33:08.659Z]     
[2024-03-07T16:33:08.659Z] >       self.km, self.kc = start_new_kernel(
[2024-03-07T16:33:08.659Z]             startup_timeout=startup_timeout,
[2024-03-07T16:33:08.659Z]             kernel_name=kernel_name,
[2024-03-07T16:33:08.659Z]             stderr=open(os.devnull, 'w'),
[2024-03-07T16:33:08.659Z]             cwd=cwd,
[2024-03-07T16:33:08.659Z]         )
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:85: 
[2024-03-07T16:33:08.659Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] startup_timeout = 60, kernel_name = 'python'
[2024-03-07T16:33:08.659Z] kwargs = {'cwd': '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks', 'stderr': <_io.TextIOWrapper name='/dev/null' mode='w' encoding='UTF-8'>}
[2024-03-07T16:33:08.659Z] km = <jupyter_client.manager.KernelManager object at 0x7f0abb8c7580>
[2024-03-07T16:33:08.659Z] kc = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z]     def start_new_kernel(startup_timeout=60, kernel_name='python', **kwargs):
[2024-03-07T16:33:08.659Z]         """Start a new kernel, and return its Manager and Client"""
[2024-03-07T16:33:08.659Z]         logger.debug('Starting new kernel: "%s"' % kernel_name)
[2024-03-07T16:33:08.659Z]         km = KernelManager(kernel_name=kernel_name,
[2024-03-07T16:33:08.659Z]                            kernel_spec_manager=NbvalKernelspecManager())
[2024-03-07T16:33:08.659Z]         km.start_kernel(**kwargs)
[2024-03-07T16:33:08.659Z]         kc = km.client()
[2024-03-07T16:33:08.659Z]         kc.start_channels()
[2024-03-07T16:33:08.659Z]         try:
[2024-03-07T16:33:08.659Z] >           kc.wait_for_ready(timeout=startup_timeout)
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:57: 
[2024-03-07T16:33:08.659Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.659Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.659Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.659Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.659Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.659Z] 
[2024-03-07T16:33:08.659Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.659Z]         try:
[2024-03-07T16:33:08.659Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.659Z]         except RuntimeError:
[2024-03-07T16:33:08.659Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.659Z]             try:
[2024-03-07T16:33:08.659Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.659Z]             except RuntimeError:
[2024-03-07T16:33:08.659Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.659Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.659Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.659Z]     
[2024-03-07T16:33:08.659Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.659Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.659Z]         try:
[2024-03-07T16:33:08.660Z]             return loop.run_until_complete(future)
[2024-03-07T16:33:08.660Z]         except BaseException as e:
[2024-03-07T16:33:08.660Z]             future.cancel()
[2024-03-07T16:33:08.660Z] >           raise e
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:30: 
[2024-03-07T16:33:08.660Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.660Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.660Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.660Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.660Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.660Z]         try:
[2024-03-07T16:33:08.660Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.660Z]         except RuntimeError:
[2024-03-07T16:33:08.660Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.660Z]             try:
[2024-03-07T16:33:08.660Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.660Z]             except RuntimeError:
[2024-03-07T16:33:08.660Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.660Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.660Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.660Z]     
[2024-03-07T16:33:08.660Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.660Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.660Z]         try:
[2024-03-07T16:33:08.660Z] >           return loop.run_until_complete(future)
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:27: 
[2024-03-07T16:33:08.660Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z] self = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.660Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z]     def run_until_complete(self, future):
[2024-03-07T16:33:08.660Z]         with manage_run(self):
[2024-03-07T16:33:08.660Z]             f = asyncio.ensure_future(future, loop=self)
[2024-03-07T16:33:08.660Z]             if f is not future:
[2024-03-07T16:33:08.660Z]                 f._log_destroy_pending = False
[2024-03-07T16:33:08.660Z]             while not f.done():
[2024-03-07T16:33:08.660Z]                 self._run_once()
[2024-03-07T16:33:08.660Z]                 if self._stopping:
[2024-03-07T16:33:08.660Z]                     break
[2024-03-07T16:33:08.660Z]             if not f.done():
[2024-03-07T16:33:08.660Z]                 raise RuntimeError(
[2024-03-07T16:33:08.660Z]                     'Event loop stopped before Future completed.')
[2024-03-07T16:33:08.660Z] >           return f.result()
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py:98: 
[2024-03-07T16:33:08.660Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z] self = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z]     def result(self):
[2024-03-07T16:33:08.660Z]         """Return the result this future represents.
[2024-03-07T16:33:08.660Z]     
[2024-03-07T16:33:08.660Z]         If the future has been cancelled, raises CancelledError.  If the
[2024-03-07T16:33:08.660Z]         future's result isn't yet available, raises InvalidStateError.  If
[2024-03-07T16:33:08.660Z]         the future is done and has an exception set, this exception is raised.
[2024-03-07T16:33:08.660Z]         """
[2024-03-07T16:33:08.660Z]         if self._state == _CANCELLED:
[2024-03-07T16:33:08.660Z]             exc = self._make_cancelled_error()
[2024-03-07T16:33:08.660Z]             raise exc
[2024-03-07T16:33:08.660Z]         if self._state != _FINISHED:
[2024-03-07T16:33:08.660Z]             raise exceptions.InvalidStateError('Result is not ready.')
[2024-03-07T16:33:08.660Z]         self.__log_traceback = False
[2024-03-07T16:33:08.660Z]         if self._exception is not None:
[2024-03-07T16:33:08.660Z] >           raise self._exception.with_traceback(self._exception_tb)
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/futures.py:201: 
[2024-03-07T16:33:08.660Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z] self = None
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z]     def __step(self, exc=None):
[2024-03-07T16:33:08.660Z]         if self.done():
[2024-03-07T16:33:08.660Z]             raise exceptions.InvalidStateError(
[2024-03-07T16:33:08.660Z]                 f'_step(): already done: {self!r}, {exc!r}')
[2024-03-07T16:33:08.660Z]         if self._must_cancel:
[2024-03-07T16:33:08.660Z]             if not isinstance(exc, exceptions.CancelledError):
[2024-03-07T16:33:08.660Z]                 exc = self._make_cancelled_error()
[2024-03-07T16:33:08.660Z]             self._must_cancel = False
[2024-03-07T16:33:08.660Z]         coro = self._coro
[2024-03-07T16:33:08.660Z]         self._fut_waiter = None
[2024-03-07T16:33:08.660Z]     
[2024-03-07T16:33:08.660Z]         _enter_task(self._loop, self)
[2024-03-07T16:33:08.660Z]         # Call either coro.throw(exc) or coro.send(None).
[2024-03-07T16:33:08.660Z]         try:
[2024-03-07T16:33:08.660Z]             if exc is None:
[2024-03-07T16:33:08.660Z]                 # We use the `send` method directly, because coroutines
[2024-03-07T16:33:08.660Z]                 # don't have `__iter__` and `__next__` methods.
[2024-03-07T16:33:08.660Z] >               result = coro.send(None)
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/tasks.py:232: 
[2024-03-07T16:33:08.660Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z] self = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.660Z] timeout = 60
[2024-03-07T16:33:08.660Z] 
[2024-03-07T16:33:08.660Z]     async def _async_wait_for_ready(self, timeout: t.Optional[float] = None) -> None:
[2024-03-07T16:33:08.660Z]         """Waits for a response when a client is blocked
[2024-03-07T16:33:08.660Z]     
[2024-03-07T16:33:08.660Z]         - Sets future time for timeout
[2024-03-07T16:33:08.660Z]         - Blocks on shell channel until a message is received
[2024-03-07T16:33:08.660Z]         - Exit if the kernel has died
[2024-03-07T16:33:08.660Z]         - If client times out before receiving a message from the kernel, send RuntimeError
[2024-03-07T16:33:08.660Z]         - Flush the IOPub channel
[2024-03-07T16:33:08.660Z]         """
[2024-03-07T16:33:08.660Z]         if timeout is None:
[2024-03-07T16:33:08.660Z]             timeout = float("inf")
[2024-03-07T16:33:08.660Z]         abs_timeout = time.time() + timeout
[2024-03-07T16:33:08.660Z]     
[2024-03-07T16:33:08.660Z]         from .manager import KernelManager
[2024-03-07T16:33:08.660Z]     
[2024-03-07T16:33:08.660Z]         if not isinstance(self.parent, KernelManager):
[2024-03-07T16:33:08.660Z]             # This Client was not created by a KernelManager,
[2024-03-07T16:33:08.660Z]             # so wait for kernel to become responsive to heartbeats
[2024-03-07T16:33:08.660Z]             # before checking for kernel_info reply
[2024-03-07T16:33:08.660Z]             while not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.660Z]                 if time.time() > abs_timeout:
[2024-03-07T16:33:08.660Z]                     raise RuntimeError(
[2024-03-07T16:33:08.660Z]                         "Kernel didn't respond to heartbeats in %d seconds and timed out" % timeout
[2024-03-07T16:33:08.660Z]                     )
[2024-03-07T16:33:08.660Z]                 await asyncio.sleep(0.2)
[2024-03-07T16:33:08.660Z]     
[2024-03-07T16:33:08.660Z]         # Wait for kernel info reply on shell channel
[2024-03-07T16:33:08.660Z]         while True:
[2024-03-07T16:33:08.660Z]             self.kernel_info()
[2024-03-07T16:33:08.660Z]             try:
[2024-03-07T16:33:08.660Z]                 msg = await self.shell_channel.get_msg(timeout=1)
[2024-03-07T16:33:08.660Z]             except Empty:
[2024-03-07T16:33:08.660Z]                 pass
[2024-03-07T16:33:08.660Z]             else:
[2024-03-07T16:33:08.660Z]                 if msg["msg_type"] == "kernel_info_reply":
[2024-03-07T16:33:08.660Z]                     # Checking that IOPub is connected. If it is not connected, start over.
[2024-03-07T16:33:08.660Z]                     try:
[2024-03-07T16:33:08.660Z]                         await self.iopub_channel.get_msg(timeout=0.2)
[2024-03-07T16:33:08.660Z]                     except Empty:
[2024-03-07T16:33:08.660Z]                         pass
[2024-03-07T16:33:08.660Z]                     else:
[2024-03-07T16:33:08.660Z]                         self._handle_kernel_info_reply(msg)
[2024-03-07T16:33:08.660Z]                         break
[2024-03-07T16:33:08.660Z]     
[2024-03-07T16:33:08.660Z]             if not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.660Z]                 raise RuntimeError("Kernel died before replying to kernel_info")
[2024-03-07T16:33:08.660Z]     
[2024-03-07T16:33:08.660Z]             # Check if current time is ready check time plus timeout
[2024-03-07T16:33:08.660Z]             if time.time() > abs_timeout:
[2024-03-07T16:33:08.661Z] >               raise RuntimeError("Kernel didn't respond in %d seconds" % timeout)
[2024-03-07T16:33:08.661Z] E               RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:206: RuntimeError
[2024-03-07T16:33:08.661Z] _ ERROR at setup of RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 3 _
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.661Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0ab86f15a0>
[2024-03-07T16:33:08.661Z] when = 'setup'
[2024-03-07T16:33:08.661Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z]     @classmethod
[2024-03-07T16:33:08.661Z]     def from_call(
[2024-03-07T16:33:08.661Z]         cls,
[2024-03-07T16:33:08.661Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.661Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.661Z]         reraise: Optional[
[2024-03-07T16:33:08.661Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.661Z]         ] = None,
[2024-03-07T16:33:08.661Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.661Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.661Z]     
[2024-03-07T16:33:08.661Z]         :param func:
[2024-03-07T16:33:08.661Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.661Z]         :param when:
[2024-03-07T16:33:08.661Z]             The phase in which the function is called.
[2024-03-07T16:33:08.661Z]         :param reraise:
[2024-03-07T16:33:08.661Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.661Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.661Z]         """
[2024-03-07T16:33:08.661Z]         excinfo = None
[2024-03-07T16:33:08.661Z]         start = timing.time()
[2024-03-07T16:33:08.661Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.661Z]         try:
[2024-03-07T16:33:08.661Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.661Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.661Z]     )
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.661Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.661Z] kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.661Z]         """Call the hook.
[2024-03-07T16:33:08.661Z]     
[2024-03-07T16:33:08.661Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.661Z]         specification.
[2024-03-07T16:33:08.661Z]     
[2024-03-07T16:33:08.661Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.661Z]         :ref:`calling`.
[2024-03-07T16:33:08.661Z]         """
[2024-03-07T16:33:08.661Z]         assert (
[2024-03-07T16:33:08.661Z]             not self.is_historic()
[2024-03-07T16:33:08.661Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.661Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.661Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.661Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.661Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.661Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.661Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.661Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.661Z] kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z]     def _hookexec(
[2024-03-07T16:33:08.661Z]         self,
[2024-03-07T16:33:08.661Z]         hook_name: str,
[2024-03-07T16:33:08.661Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.661Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.661Z]         firstresult: bool,
[2024-03-07T16:33:08.661Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.661Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.661Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.661Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.661Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.661Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.661Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.661Z] 
[2024-03-07T16:33:08.661Z]     def _multicall(
[2024-03-07T16:33:08.661Z]         hook_name: str,
[2024-03-07T16:33:08.661Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.661Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.661Z]         firstresult: bool,
[2024-03-07T16:33:08.661Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.661Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.661Z]         result(s).
[2024-03-07T16:33:08.661Z]     
[2024-03-07T16:33:08.661Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.661Z]         """
[2024-03-07T16:33:08.661Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.661Z]         results: list[object] = []
[2024-03-07T16:33:08.661Z]         exception = None
[2024-03-07T16:33:08.661Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.661Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.661Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.661Z]             try:
[2024-03-07T16:33:08.661Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.661Z]                     try:
[2024-03-07T16:33:08.661Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.661Z]                     except KeyError:
[2024-03-07T16:33:08.661Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.661Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.661Z]                                 raise HookCallError(
[2024-03-07T16:33:08.661Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.661Z]                                 )
[2024-03-07T16:33:08.661Z]     
[2024-03-07T16:33:08.661Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.661Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.661Z]                         try:
[2024-03-07T16:33:08.661Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.661Z]                             # which is the desired response.
[2024-03-07T16:33:08.661Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.661Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.661Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.661Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.661Z]                         except StopIteration:
[2024-03-07T16:33:08.661Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.661Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.661Z]                         try:
[2024-03-07T16:33:08.661Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.661Z]                             # which is the desired response.
[2024-03-07T16:33:08.661Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.661Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.661Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.661Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.661Z]                         except StopIteration:
[2024-03-07T16:33:08.661Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.661Z]                     else:
[2024-03-07T16:33:08.661Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.661Z]                         if res is not None:
[2024-03-07T16:33:08.661Z]                             results.append(res)
[2024-03-07T16:33:08.661Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.661Z]                                 break
[2024-03-07T16:33:08.661Z]             except BaseException as exc:
[2024-03-07T16:33:08.661Z]                 exception = exc
[2024-03-07T16:33:08.661Z]         finally:
[2024-03-07T16:33:08.661Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.662Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.662Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.662Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.662Z]                 else:
[2024-03-07T16:33:08.662Z]                     result = results
[2024-03-07T16:33:08.662Z]     
[2024-03-07T16:33:08.662Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.662Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.662Z]                     try:
[2024-03-07T16:33:08.662Z]                         if exception is not None:
[2024-03-07T16:33:08.662Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.662Z]                         else:
[2024-03-07T16:33:08.662Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.662Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.662Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.662Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.662Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.662Z]                     except StopIteration as si:
[2024-03-07T16:33:08.662Z]                         result = si.value
[2024-03-07T16:33:08.662Z]                         exception = None
[2024-03-07T16:33:08.662Z]                         continue
[2024-03-07T16:33:08.662Z]                     except BaseException as e:
[2024-03-07T16:33:08.662Z]                         exception = e
[2024-03-07T16:33:08.662Z]                         continue
[2024-03-07T16:33:08.662Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.662Z]     
[2024-03-07T16:33:08.662Z]                 if exception is not None:
[2024-03-07T16:33:08.662Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.662Z] 
[2024-03-07T16:33:08.662Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.662Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.662Z] 
[2024-03-07T16:33:08.662Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.662Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.662Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.662Z] 
[2024-03-07T16:33:08.662Z]     def _multicall(
[2024-03-07T16:33:08.662Z]         hook_name: str,
[2024-03-07T16:33:08.662Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.662Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.662Z]         firstresult: bool,
[2024-03-07T16:33:08.662Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.662Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.662Z]         result(s).
[2024-03-07T16:33:08.662Z]     
[2024-03-07T16:33:08.662Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.662Z]         """
[2024-03-07T16:33:08.662Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.662Z]         results: list[object] = []
[2024-03-07T16:33:08.662Z]         exception = None
[2024-03-07T16:33:08.662Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.662Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.662Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.662Z]             try:
[2024-03-07T16:33:08.662Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.662Z]                     try:
[2024-03-07T16:33:08.662Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.662Z]                     except KeyError:
[2024-03-07T16:33:08.662Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.662Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.662Z]                                 raise HookCallError(
[2024-03-07T16:33:08.662Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.662Z]                                 )
[2024-03-07T16:33:08.662Z]     
[2024-03-07T16:33:08.662Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.662Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.662Z]                         try:
[2024-03-07T16:33:08.662Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.662Z]                             # which is the desired response.
[2024-03-07T16:33:08.662Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.662Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.662Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.662Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.662Z]                         except StopIteration:
[2024-03-07T16:33:08.662Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.662Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.662Z]                         try:
[2024-03-07T16:33:08.662Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.662Z]                             # which is the desired response.
[2024-03-07T16:33:08.662Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.662Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.662Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.662Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.662Z]                         except StopIteration:
[2024-03-07T16:33:08.662Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.662Z]                     else:
[2024-03-07T16:33:08.662Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.662Z]                         if res is not None:
[2024-03-07T16:33:08.662Z]                             results.append(res)
[2024-03-07T16:33:08.662Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.662Z]                                 break
[2024-03-07T16:33:08.662Z]             except BaseException as exc:
[2024-03-07T16:33:08.662Z]                 exception = exc
[2024-03-07T16:33:08.662Z]         finally:
[2024-03-07T16:33:08.662Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.662Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.662Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.662Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.662Z]                 else:
[2024-03-07T16:33:08.662Z]                     result = results
[2024-03-07T16:33:08.662Z]     
[2024-03-07T16:33:08.662Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.662Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.662Z]                     try:
[2024-03-07T16:33:08.662Z]                         if exception is not None:
[2024-03-07T16:33:08.662Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.662Z] 
[2024-03-07T16:33:08.662Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.662Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.662Z] 
[2024-03-07T16:33:08.662Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.662Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.662Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.662Z] 
[2024-03-07T16:33:08.662Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.662Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.662Z] 
[2024-03-07T16:33:08.662Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.662Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.662Z]             try:
[2024-03-07T16:33:08.662Z] >               yield
[2024-03-07T16:33:08.662Z] 
[2024-03-07T16:33:08.662Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.662Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.662Z] 
[2024-03-07T16:33:08.662Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.662Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.662Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.662Z] 
[2024-03-07T16:33:08.662Z]     def _multicall(
[2024-03-07T16:33:08.662Z]         hook_name: str,
[2024-03-07T16:33:08.662Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.662Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.662Z]         firstresult: bool,
[2024-03-07T16:33:08.662Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.663Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.663Z]         result(s).
[2024-03-07T16:33:08.663Z]     
[2024-03-07T16:33:08.663Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.663Z]         """
[2024-03-07T16:33:08.663Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.663Z]         results: list[object] = []
[2024-03-07T16:33:08.663Z]         exception = None
[2024-03-07T16:33:08.663Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.663Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.663Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.663Z]             try:
[2024-03-07T16:33:08.663Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.663Z]                     try:
[2024-03-07T16:33:08.663Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.663Z]                     except KeyError:
[2024-03-07T16:33:08.663Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.663Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.663Z]                                 raise HookCallError(
[2024-03-07T16:33:08.663Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.663Z]                                 )
[2024-03-07T16:33:08.663Z]     
[2024-03-07T16:33:08.663Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.663Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.663Z]                         try:
[2024-03-07T16:33:08.663Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.663Z]                             # which is the desired response.
[2024-03-07T16:33:08.663Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.663Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.663Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.663Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.663Z]                         except StopIteration:
[2024-03-07T16:33:08.663Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.663Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.663Z]                         try:
[2024-03-07T16:33:08.663Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.663Z]                             # which is the desired response.
[2024-03-07T16:33:08.663Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.663Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.663Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.663Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.663Z]                         except StopIteration:
[2024-03-07T16:33:08.663Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.663Z]                     else:
[2024-03-07T16:33:08.663Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.663Z]                         if res is not None:
[2024-03-07T16:33:08.663Z]                             results.append(res)
[2024-03-07T16:33:08.663Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.663Z]                                 break
[2024-03-07T16:33:08.663Z]             except BaseException as exc:
[2024-03-07T16:33:08.663Z]                 exception = exc
[2024-03-07T16:33:08.663Z]         finally:
[2024-03-07T16:33:08.663Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.663Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.663Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.663Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.663Z]                 else:
[2024-03-07T16:33:08.663Z]                     result = results
[2024-03-07T16:33:08.663Z]     
[2024-03-07T16:33:08.663Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.663Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.663Z]                     try:
[2024-03-07T16:33:08.663Z]                         if exception is not None:
[2024-03-07T16:33:08.663Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.663Z] 
[2024-03-07T16:33:08.663Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.663Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.663Z] 
[2024-03-07T16:33:08.663Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.663Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.663Z] 
[2024-03-07T16:33:08.663Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.663Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.663Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.663Z]     
[2024-03-07T16:33:08.663Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.663Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.663Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.663Z] 
[2024-03-07T16:33:08.663Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.663Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.663Z] 
[2024-03-07T16:33:08.663Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.663Z] item = <IPyNbCell Cell 3>, when = 'setup'
[2024-03-07T16:33:08.663Z] 
[2024-03-07T16:33:08.663Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.663Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.663Z]         with catching_logs(
[2024-03-07T16:33:08.663Z]             self.caplog_handler,
[2024-03-07T16:33:08.663Z]             level=self.log_level,
[2024-03-07T16:33:08.663Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.663Z]             self.report_handler,
[2024-03-07T16:33:08.663Z]             level=self.log_level,
[2024-03-07T16:33:08.663Z]         ) as report_handler:
[2024-03-07T16:33:08.663Z]             caplog_handler.reset()
[2024-03-07T16:33:08.663Z]             report_handler.reset()
[2024-03-07T16:33:08.663Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.663Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.663Z]     
[2024-03-07T16:33:08.663Z]             try:
[2024-03-07T16:33:08.663Z] >               yield
[2024-03-07T16:33:08.663Z] 
[2024-03-07T16:33:08.663Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.663Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.663Z] 
[2024-03-07T16:33:08.663Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.663Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.663Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.663Z] 
[2024-03-07T16:33:08.663Z]     def _multicall(
[2024-03-07T16:33:08.663Z]         hook_name: str,
[2024-03-07T16:33:08.663Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.663Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.663Z]         firstresult: bool,
[2024-03-07T16:33:08.663Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.663Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.663Z]         result(s).
[2024-03-07T16:33:08.663Z]     
[2024-03-07T16:33:08.663Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.663Z]         """
[2024-03-07T16:33:08.663Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.663Z]         results: list[object] = []
[2024-03-07T16:33:08.663Z]         exception = None
[2024-03-07T16:33:08.663Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.663Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.663Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.663Z]             try:
[2024-03-07T16:33:08.663Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.663Z]                     try:
[2024-03-07T16:33:08.663Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.663Z]                     except KeyError:
[2024-03-07T16:33:08.663Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.663Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.663Z]                                 raise HookCallError(
[2024-03-07T16:33:08.663Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.663Z]                                 )
[2024-03-07T16:33:08.663Z]     
[2024-03-07T16:33:08.663Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.663Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.663Z]                         try:
[2024-03-07T16:33:08.663Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.663Z]                             # which is the desired response.
[2024-03-07T16:33:08.663Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.664Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.664Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.664Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.664Z]                         except StopIteration:
[2024-03-07T16:33:08.664Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.664Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.664Z]                         try:
[2024-03-07T16:33:08.664Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.664Z]                             # which is the desired response.
[2024-03-07T16:33:08.664Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.664Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.664Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.664Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.664Z]                         except StopIteration:
[2024-03-07T16:33:08.664Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.664Z]                     else:
[2024-03-07T16:33:08.664Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.664Z]                         if res is not None:
[2024-03-07T16:33:08.664Z]                             results.append(res)
[2024-03-07T16:33:08.664Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.664Z]                                 break
[2024-03-07T16:33:08.664Z]             except BaseException as exc:
[2024-03-07T16:33:08.664Z]                 exception = exc
[2024-03-07T16:33:08.664Z]         finally:
[2024-03-07T16:33:08.664Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.664Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.664Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.664Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.664Z]                 else:
[2024-03-07T16:33:08.664Z]                     result = results
[2024-03-07T16:33:08.664Z]     
[2024-03-07T16:33:08.664Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.664Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.664Z]                     try:
[2024-03-07T16:33:08.664Z]                         if exception is not None:
[2024-03-07T16:33:08.664Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.664Z] 
[2024-03-07T16:33:08.664Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.664Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.664Z] 
[2024-03-07T16:33:08.664Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.664Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.664Z] 
[2024-03-07T16:33:08.664Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.664Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.664Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.664Z] >           return (yield)
[2024-03-07T16:33:08.664Z] 
[2024-03-07T16:33:08.664Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.664Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.664Z] 
[2024-03-07T16:33:08.664Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.664Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.664Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.664Z] 
[2024-03-07T16:33:08.664Z]     def _multicall(
[2024-03-07T16:33:08.664Z]         hook_name: str,
[2024-03-07T16:33:08.664Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.664Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.664Z]         firstresult: bool,
[2024-03-07T16:33:08.664Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.664Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.664Z]         result(s).
[2024-03-07T16:33:08.664Z]     
[2024-03-07T16:33:08.664Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.664Z]         """
[2024-03-07T16:33:08.664Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.664Z]         results: list[object] = []
[2024-03-07T16:33:08.664Z]         exception = None
[2024-03-07T16:33:08.664Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.664Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.664Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.664Z]             try:
[2024-03-07T16:33:08.664Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.664Z]                     try:
[2024-03-07T16:33:08.664Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.664Z]                     except KeyError:
[2024-03-07T16:33:08.664Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.664Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.664Z]                                 raise HookCallError(
[2024-03-07T16:33:08.664Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.664Z]                                 )
[2024-03-07T16:33:08.664Z]     
[2024-03-07T16:33:08.664Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.664Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.664Z]                         try:
[2024-03-07T16:33:08.664Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.664Z]                             # which is the desired response.
[2024-03-07T16:33:08.664Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.664Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.664Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.664Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.664Z]                         except StopIteration:
[2024-03-07T16:33:08.664Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.664Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.664Z]                         try:
[2024-03-07T16:33:08.664Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.664Z]                             # which is the desired response.
[2024-03-07T16:33:08.664Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.664Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.664Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.664Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.664Z]                         except StopIteration:
[2024-03-07T16:33:08.664Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.664Z]                     else:
[2024-03-07T16:33:08.664Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.664Z]                         if res is not None:
[2024-03-07T16:33:08.664Z]                             results.append(res)
[2024-03-07T16:33:08.664Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.664Z]                                 break
[2024-03-07T16:33:08.664Z]             except BaseException as exc:
[2024-03-07T16:33:08.664Z]                 exception = exc
[2024-03-07T16:33:08.664Z]         finally:
[2024-03-07T16:33:08.664Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.664Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.664Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.664Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.664Z]                 else:
[2024-03-07T16:33:08.664Z]                     result = results
[2024-03-07T16:33:08.664Z]     
[2024-03-07T16:33:08.664Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.664Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.664Z]                     try:
[2024-03-07T16:33:08.665Z]                         if exception is not None:
[2024-03-07T16:33:08.665Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.665Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.665Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.665Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.665Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.665Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.665Z]             try:
[2024-03-07T16:33:08.665Z] >               yield
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.665Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.665Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.665Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z]     def _multicall(
[2024-03-07T16:33:08.665Z]         hook_name: str,
[2024-03-07T16:33:08.665Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.665Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.665Z]         firstresult: bool,
[2024-03-07T16:33:08.665Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.665Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.665Z]         result(s).
[2024-03-07T16:33:08.665Z]     
[2024-03-07T16:33:08.665Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.665Z]         """
[2024-03-07T16:33:08.665Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.665Z]         results: list[object] = []
[2024-03-07T16:33:08.665Z]         exception = None
[2024-03-07T16:33:08.665Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.665Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.665Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.665Z]             try:
[2024-03-07T16:33:08.665Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.665Z]                     try:
[2024-03-07T16:33:08.665Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.665Z]                     except KeyError:
[2024-03-07T16:33:08.665Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.665Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.665Z]                                 raise HookCallError(
[2024-03-07T16:33:08.665Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.665Z]                                 )
[2024-03-07T16:33:08.665Z]     
[2024-03-07T16:33:08.665Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.665Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.665Z]                         try:
[2024-03-07T16:33:08.665Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.665Z]                             # which is the desired response.
[2024-03-07T16:33:08.665Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.665Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.665Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.665Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.665Z]                         except StopIteration:
[2024-03-07T16:33:08.665Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.665Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.665Z]                         try:
[2024-03-07T16:33:08.665Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.665Z]                             # which is the desired response.
[2024-03-07T16:33:08.665Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.665Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.665Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.665Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.665Z]                         except StopIteration:
[2024-03-07T16:33:08.665Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.665Z]                     else:
[2024-03-07T16:33:08.665Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.665Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.665Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.665Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.665Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.665Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.665Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.665Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.665Z]     
[2024-03-07T16:33:08.665Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.665Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.665Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.665Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.665Z]             if exc:
[2024-03-07T16:33:08.665Z] >               raise exc
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.665Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.665Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abbb08550>
[2024-03-07T16:33:08.665Z] when = 'setup'
[2024-03-07T16:33:08.665Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z]     @classmethod
[2024-03-07T16:33:08.665Z]     def from_call(
[2024-03-07T16:33:08.665Z]         cls,
[2024-03-07T16:33:08.665Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.665Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.665Z]         reraise: Optional[
[2024-03-07T16:33:08.665Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.665Z]         ] = None,
[2024-03-07T16:33:08.665Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.665Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.665Z]     
[2024-03-07T16:33:08.665Z]         :param func:
[2024-03-07T16:33:08.665Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.665Z]         :param when:
[2024-03-07T16:33:08.665Z]             The phase in which the function is called.
[2024-03-07T16:33:08.665Z]         :param reraise:
[2024-03-07T16:33:08.665Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.665Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.665Z]         """
[2024-03-07T16:33:08.665Z]         excinfo = None
[2024-03-07T16:33:08.665Z]         start = timing.time()
[2024-03-07T16:33:08.665Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.665Z]         try:
[2024-03-07T16:33:08.665Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.665Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.665Z]     )
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.665Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.665Z] kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.665Z] 
[2024-03-07T16:33:08.665Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.665Z]         """Call the hook.
[2024-03-07T16:33:08.665Z]     
[2024-03-07T16:33:08.666Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.666Z]         specification.
[2024-03-07T16:33:08.666Z]     
[2024-03-07T16:33:08.666Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.666Z]         :ref:`calling`.
[2024-03-07T16:33:08.666Z]         """
[2024-03-07T16:33:08.666Z]         assert (
[2024-03-07T16:33:08.666Z]             not self.is_historic()
[2024-03-07T16:33:08.666Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.666Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.666Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.666Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.666Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.666Z] 
[2024-03-07T16:33:08.666Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.666Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.666Z] 
[2024-03-07T16:33:08.666Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.666Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.666Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.666Z] kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.666Z] 
[2024-03-07T16:33:08.666Z]     def _hookexec(
[2024-03-07T16:33:08.666Z]         self,
[2024-03-07T16:33:08.666Z]         hook_name: str,
[2024-03-07T16:33:08.666Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.666Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.666Z]         firstresult: bool,
[2024-03-07T16:33:08.666Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.666Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.666Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.666Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.666Z] 
[2024-03-07T16:33:08.666Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.666Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.666Z] 
[2024-03-07T16:33:08.666Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.666Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.666Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.666Z] 
[2024-03-07T16:33:08.666Z]     def _multicall(
[2024-03-07T16:33:08.666Z]         hook_name: str,
[2024-03-07T16:33:08.666Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.666Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.666Z]         firstresult: bool,
[2024-03-07T16:33:08.666Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.666Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.666Z]         result(s).
[2024-03-07T16:33:08.666Z]     
[2024-03-07T16:33:08.666Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.666Z]         """
[2024-03-07T16:33:08.666Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.666Z]         results: list[object] = []
[2024-03-07T16:33:08.666Z]         exception = None
[2024-03-07T16:33:08.666Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.666Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.666Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.666Z]             try:
[2024-03-07T16:33:08.666Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.666Z]                     try:
[2024-03-07T16:33:08.666Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.666Z]                     except KeyError:
[2024-03-07T16:33:08.666Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.666Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.666Z]                                 raise HookCallError(
[2024-03-07T16:33:08.666Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.666Z]                                 )
[2024-03-07T16:33:08.666Z]     
[2024-03-07T16:33:08.666Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.666Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.666Z]                         try:
[2024-03-07T16:33:08.666Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.666Z]                             # which is the desired response.
[2024-03-07T16:33:08.666Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.666Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.666Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.666Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.666Z]                         except StopIteration:
[2024-03-07T16:33:08.666Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.666Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.666Z]                         try:
[2024-03-07T16:33:08.666Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.666Z]                             # which is the desired response.
[2024-03-07T16:33:08.666Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.666Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.666Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.666Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.666Z]                         except StopIteration:
[2024-03-07T16:33:08.666Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.666Z]                     else:
[2024-03-07T16:33:08.666Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.666Z]                         if res is not None:
[2024-03-07T16:33:08.666Z]                             results.append(res)
[2024-03-07T16:33:08.666Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.666Z]                                 break
[2024-03-07T16:33:08.666Z]             except BaseException as exc:
[2024-03-07T16:33:08.666Z]                 exception = exc
[2024-03-07T16:33:08.666Z]         finally:
[2024-03-07T16:33:08.666Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.666Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.666Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.666Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.666Z]                 else:
[2024-03-07T16:33:08.666Z]                     result = results
[2024-03-07T16:33:08.666Z]     
[2024-03-07T16:33:08.666Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.666Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.666Z]                     try:
[2024-03-07T16:33:08.666Z]                         if exception is not None:
[2024-03-07T16:33:08.666Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.666Z]                         else:
[2024-03-07T16:33:08.666Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.666Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.666Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.666Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.666Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.666Z]                     except StopIteration as si:
[2024-03-07T16:33:08.666Z]                         result = si.value
[2024-03-07T16:33:08.666Z]                         exception = None
[2024-03-07T16:33:08.666Z]                         continue
[2024-03-07T16:33:08.666Z]                     except BaseException as e:
[2024-03-07T16:33:08.666Z]                         exception = e
[2024-03-07T16:33:08.666Z]                         continue
[2024-03-07T16:33:08.666Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.666Z]     
[2024-03-07T16:33:08.666Z]                 if exception is not None:
[2024-03-07T16:33:08.666Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.666Z] 
[2024-03-07T16:33:08.666Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.666Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.666Z] 
[2024-03-07T16:33:08.666Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.667Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.667Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.667Z] 
[2024-03-07T16:33:08.667Z]     def _multicall(
[2024-03-07T16:33:08.667Z]         hook_name: str,
[2024-03-07T16:33:08.667Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.667Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.667Z]         firstresult: bool,
[2024-03-07T16:33:08.667Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.667Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.667Z]         result(s).
[2024-03-07T16:33:08.667Z]     
[2024-03-07T16:33:08.667Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.667Z]         """
[2024-03-07T16:33:08.667Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.667Z]         results: list[object] = []
[2024-03-07T16:33:08.667Z]         exception = None
[2024-03-07T16:33:08.667Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.667Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.667Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.667Z]             try:
[2024-03-07T16:33:08.667Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.667Z]                     try:
[2024-03-07T16:33:08.667Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.667Z]                     except KeyError:
[2024-03-07T16:33:08.667Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.667Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.667Z]                                 raise HookCallError(
[2024-03-07T16:33:08.667Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.667Z]                                 )
[2024-03-07T16:33:08.667Z]     
[2024-03-07T16:33:08.667Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.667Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.667Z]                         try:
[2024-03-07T16:33:08.667Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.667Z]                             # which is the desired response.
[2024-03-07T16:33:08.667Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.667Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.667Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.667Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.667Z]                         except StopIteration:
[2024-03-07T16:33:08.667Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.667Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.667Z]                         try:
[2024-03-07T16:33:08.667Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.667Z]                             # which is the desired response.
[2024-03-07T16:33:08.667Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.667Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.667Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.667Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.667Z]                         except StopIteration:
[2024-03-07T16:33:08.667Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.667Z]                     else:
[2024-03-07T16:33:08.667Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.667Z]                         if res is not None:
[2024-03-07T16:33:08.667Z]                             results.append(res)
[2024-03-07T16:33:08.667Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.667Z]                                 break
[2024-03-07T16:33:08.667Z]             except BaseException as exc:
[2024-03-07T16:33:08.667Z]                 exception = exc
[2024-03-07T16:33:08.667Z]         finally:
[2024-03-07T16:33:08.667Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.667Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.667Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.667Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.667Z]                 else:
[2024-03-07T16:33:08.667Z]                     result = results
[2024-03-07T16:33:08.667Z]     
[2024-03-07T16:33:08.667Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.667Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.667Z]                     try:
[2024-03-07T16:33:08.667Z]                         if exception is not None:
[2024-03-07T16:33:08.667Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.667Z] 
[2024-03-07T16:33:08.667Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.667Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.667Z] 
[2024-03-07T16:33:08.667Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.667Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.667Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.667Z] 
[2024-03-07T16:33:08.667Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.667Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.667Z] 
[2024-03-07T16:33:08.667Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.667Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.667Z]             try:
[2024-03-07T16:33:08.667Z] >               yield
[2024-03-07T16:33:08.667Z] 
[2024-03-07T16:33:08.667Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.667Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.667Z] 
[2024-03-07T16:33:08.667Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.667Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.667Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.667Z] 
[2024-03-07T16:33:08.667Z]     def _multicall(
[2024-03-07T16:33:08.667Z]         hook_name: str,
[2024-03-07T16:33:08.667Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.667Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.667Z]         firstresult: bool,
[2024-03-07T16:33:08.667Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.667Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.667Z]         result(s).
[2024-03-07T16:33:08.667Z]     
[2024-03-07T16:33:08.667Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.667Z]         """
[2024-03-07T16:33:08.667Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.667Z]         results: list[object] = []
[2024-03-07T16:33:08.667Z]         exception = None
[2024-03-07T16:33:08.667Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.667Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.667Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.667Z]             try:
[2024-03-07T16:33:08.667Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.667Z]                     try:
[2024-03-07T16:33:08.667Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.667Z]                     except KeyError:
[2024-03-07T16:33:08.667Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.667Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.667Z]                                 raise HookCallError(
[2024-03-07T16:33:08.667Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.667Z]                                 )
[2024-03-07T16:33:08.667Z]     
[2024-03-07T16:33:08.667Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.667Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.667Z]                         try:
[2024-03-07T16:33:08.667Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.667Z]                             # which is the desired response.
[2024-03-07T16:33:08.667Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.667Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.667Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.667Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.667Z]                         except StopIteration:
[2024-03-07T16:33:08.667Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.667Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.667Z]                         try:
[2024-03-07T16:33:08.668Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.668Z]                             # which is the desired response.
[2024-03-07T16:33:08.668Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.668Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.668Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.668Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.668Z]                         except StopIteration:
[2024-03-07T16:33:08.668Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.668Z]                     else:
[2024-03-07T16:33:08.668Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.668Z]                         if res is not None:
[2024-03-07T16:33:08.668Z]                             results.append(res)
[2024-03-07T16:33:08.668Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.668Z]                                 break
[2024-03-07T16:33:08.668Z]             except BaseException as exc:
[2024-03-07T16:33:08.668Z]                 exception = exc
[2024-03-07T16:33:08.668Z]         finally:
[2024-03-07T16:33:08.668Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.668Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.668Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.668Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.668Z]                 else:
[2024-03-07T16:33:08.668Z]                     result = results
[2024-03-07T16:33:08.668Z]     
[2024-03-07T16:33:08.668Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.668Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.668Z]                     try:
[2024-03-07T16:33:08.668Z]                         if exception is not None:
[2024-03-07T16:33:08.668Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.668Z] 
[2024-03-07T16:33:08.668Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.668Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.668Z] 
[2024-03-07T16:33:08.668Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.668Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.668Z] 
[2024-03-07T16:33:08.668Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.668Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.668Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.668Z]     
[2024-03-07T16:33:08.668Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.668Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.668Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.668Z] 
[2024-03-07T16:33:08.668Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.668Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.668Z] 
[2024-03-07T16:33:08.668Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.668Z] item = <IPyNbCell Cell 2>, when = 'setup'
[2024-03-07T16:33:08.668Z] 
[2024-03-07T16:33:08.668Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.668Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.668Z]         with catching_logs(
[2024-03-07T16:33:08.668Z]             self.caplog_handler,
[2024-03-07T16:33:08.668Z]             level=self.log_level,
[2024-03-07T16:33:08.668Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.668Z]             self.report_handler,
[2024-03-07T16:33:08.668Z]             level=self.log_level,
[2024-03-07T16:33:08.668Z]         ) as report_handler:
[2024-03-07T16:33:08.668Z]             caplog_handler.reset()
[2024-03-07T16:33:08.668Z]             report_handler.reset()
[2024-03-07T16:33:08.668Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.668Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.668Z]     
[2024-03-07T16:33:08.668Z]             try:
[2024-03-07T16:33:08.668Z] >               yield
[2024-03-07T16:33:08.668Z] 
[2024-03-07T16:33:08.668Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.668Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.668Z] 
[2024-03-07T16:33:08.668Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.668Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.668Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.668Z] 
[2024-03-07T16:33:08.668Z]     def _multicall(
[2024-03-07T16:33:08.668Z]         hook_name: str,
[2024-03-07T16:33:08.668Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.668Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.668Z]         firstresult: bool,
[2024-03-07T16:33:08.668Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.668Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.668Z]         result(s).
[2024-03-07T16:33:08.668Z]     
[2024-03-07T16:33:08.668Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.668Z]         """
[2024-03-07T16:33:08.668Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.668Z]         results: list[object] = []
[2024-03-07T16:33:08.668Z]         exception = None
[2024-03-07T16:33:08.668Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.668Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.668Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.668Z]             try:
[2024-03-07T16:33:08.668Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.668Z]                     try:
[2024-03-07T16:33:08.668Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.668Z]                     except KeyError:
[2024-03-07T16:33:08.668Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.668Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.668Z]                                 raise HookCallError(
[2024-03-07T16:33:08.668Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.668Z]                                 )
[2024-03-07T16:33:08.668Z]     
[2024-03-07T16:33:08.668Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.668Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.668Z]                         try:
[2024-03-07T16:33:08.668Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.668Z]                             # which is the desired response.
[2024-03-07T16:33:08.668Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.668Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.668Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.668Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.668Z]                         except StopIteration:
[2024-03-07T16:33:08.668Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.668Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.668Z]                         try:
[2024-03-07T16:33:08.668Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.668Z]                             # which is the desired response.
[2024-03-07T16:33:08.668Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.668Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.668Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.668Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.668Z]                         except StopIteration:
[2024-03-07T16:33:08.668Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.668Z]                     else:
[2024-03-07T16:33:08.668Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.668Z]                         if res is not None:
[2024-03-07T16:33:08.668Z]                             results.append(res)
[2024-03-07T16:33:08.668Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.668Z]                                 break
[2024-03-07T16:33:08.668Z]             except BaseException as exc:
[2024-03-07T16:33:08.668Z]                 exception = exc
[2024-03-07T16:33:08.668Z]         finally:
[2024-03-07T16:33:08.668Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.668Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.668Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.668Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.668Z]                 else:
[2024-03-07T16:33:08.668Z]                     result = results
[2024-03-07T16:33:08.668Z]     
[2024-03-07T16:33:08.669Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.669Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.669Z]                     try:
[2024-03-07T16:33:08.669Z]                         if exception is not None:
[2024-03-07T16:33:08.669Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.669Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.669Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.669Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.669Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.669Z] >           return (yield)
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.669Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.669Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.669Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z]     def _multicall(
[2024-03-07T16:33:08.669Z]         hook_name: str,
[2024-03-07T16:33:08.669Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.669Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.669Z]         firstresult: bool,
[2024-03-07T16:33:08.669Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.669Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.669Z]         result(s).
[2024-03-07T16:33:08.669Z]     
[2024-03-07T16:33:08.669Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.669Z]         """
[2024-03-07T16:33:08.669Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.669Z]         results: list[object] = []
[2024-03-07T16:33:08.669Z]         exception = None
[2024-03-07T16:33:08.669Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.669Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.669Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.669Z]             try:
[2024-03-07T16:33:08.669Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.669Z]                     try:
[2024-03-07T16:33:08.669Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.669Z]                     except KeyError:
[2024-03-07T16:33:08.669Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.669Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.669Z]                                 raise HookCallError(
[2024-03-07T16:33:08.669Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.669Z]                                 )
[2024-03-07T16:33:08.669Z]     
[2024-03-07T16:33:08.669Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.669Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.669Z]                         try:
[2024-03-07T16:33:08.669Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.669Z]                             # which is the desired response.
[2024-03-07T16:33:08.669Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.669Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.669Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.669Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.669Z]                         except StopIteration:
[2024-03-07T16:33:08.669Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.669Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.669Z]                         try:
[2024-03-07T16:33:08.669Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.669Z]                             # which is the desired response.
[2024-03-07T16:33:08.669Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.669Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.669Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.669Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.669Z]                         except StopIteration:
[2024-03-07T16:33:08.669Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.669Z]                     else:
[2024-03-07T16:33:08.669Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.669Z]                         if res is not None:
[2024-03-07T16:33:08.669Z]                             results.append(res)
[2024-03-07T16:33:08.669Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.669Z]                                 break
[2024-03-07T16:33:08.669Z]             except BaseException as exc:
[2024-03-07T16:33:08.669Z]                 exception = exc
[2024-03-07T16:33:08.669Z]         finally:
[2024-03-07T16:33:08.669Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.669Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.669Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.669Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.669Z]                 else:
[2024-03-07T16:33:08.669Z]                     result = results
[2024-03-07T16:33:08.669Z]     
[2024-03-07T16:33:08.669Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.669Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.669Z]                     try:
[2024-03-07T16:33:08.669Z]                         if exception is not None:
[2024-03-07T16:33:08.669Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.669Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.669Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.669Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.669Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.669Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.669Z]             try:
[2024-03-07T16:33:08.669Z] >               yield
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.669Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.669Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.669Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.669Z] 
[2024-03-07T16:33:08.669Z]     def _multicall(
[2024-03-07T16:33:08.669Z]         hook_name: str,
[2024-03-07T16:33:08.669Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.669Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.669Z]         firstresult: bool,
[2024-03-07T16:33:08.669Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.669Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.669Z]         result(s).
[2024-03-07T16:33:08.669Z]     
[2024-03-07T16:33:08.669Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.669Z]         """
[2024-03-07T16:33:08.669Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.669Z]         results: list[object] = []
[2024-03-07T16:33:08.669Z]         exception = None
[2024-03-07T16:33:08.669Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.669Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.669Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.669Z]             try:
[2024-03-07T16:33:08.669Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.669Z]                     try:
[2024-03-07T16:33:08.669Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.669Z]                     except KeyError:
[2024-03-07T16:33:08.669Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.669Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.669Z]                                 raise HookCallError(
[2024-03-07T16:33:08.670Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.670Z]                                 )
[2024-03-07T16:33:08.670Z]     
[2024-03-07T16:33:08.670Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.670Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.670Z]                         try:
[2024-03-07T16:33:08.670Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.670Z]                             # which is the desired response.
[2024-03-07T16:33:08.670Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.670Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.670Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.670Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.670Z]                         except StopIteration:
[2024-03-07T16:33:08.670Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.670Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.670Z]                         try:
[2024-03-07T16:33:08.670Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.670Z]                             # which is the desired response.
[2024-03-07T16:33:08.670Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.670Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.670Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.670Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.670Z]                         except StopIteration:
[2024-03-07T16:33:08.670Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.670Z]                     else:
[2024-03-07T16:33:08.670Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.670Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.670Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.670Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.670Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.670Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.670Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.670Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.670Z]     
[2024-03-07T16:33:08.670Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.670Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.670Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.670Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.670Z]             if exc:
[2024-03-07T16:33:08.670Z] >               raise exc
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.670Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.670Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abc051900>
[2024-03-07T16:33:08.670Z] when = 'setup'
[2024-03-07T16:33:08.670Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z]     @classmethod
[2024-03-07T16:33:08.670Z]     def from_call(
[2024-03-07T16:33:08.670Z]         cls,
[2024-03-07T16:33:08.670Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.670Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.670Z]         reraise: Optional[
[2024-03-07T16:33:08.670Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.670Z]         ] = None,
[2024-03-07T16:33:08.670Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.670Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.670Z]     
[2024-03-07T16:33:08.670Z]         :param func:
[2024-03-07T16:33:08.670Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.670Z]         :param when:
[2024-03-07T16:33:08.670Z]             The phase in which the function is called.
[2024-03-07T16:33:08.670Z]         :param reraise:
[2024-03-07T16:33:08.670Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.670Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.670Z]         """
[2024-03-07T16:33:08.670Z]         excinfo = None
[2024-03-07T16:33:08.670Z]         start = timing.time()
[2024-03-07T16:33:08.670Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.670Z]         try:
[2024-03-07T16:33:08.670Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.670Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.670Z]     )
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.670Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.670Z] kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.670Z]         """Call the hook.
[2024-03-07T16:33:08.670Z]     
[2024-03-07T16:33:08.670Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.670Z]         specification.
[2024-03-07T16:33:08.670Z]     
[2024-03-07T16:33:08.670Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.670Z]         :ref:`calling`.
[2024-03-07T16:33:08.670Z]         """
[2024-03-07T16:33:08.670Z]         assert (
[2024-03-07T16:33:08.670Z]             not self.is_historic()
[2024-03-07T16:33:08.670Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.670Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.670Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.670Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.670Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.670Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.670Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.670Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.670Z] kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z]     def _hookexec(
[2024-03-07T16:33:08.670Z]         self,
[2024-03-07T16:33:08.670Z]         hook_name: str,
[2024-03-07T16:33:08.670Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.670Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.670Z]         firstresult: bool,
[2024-03-07T16:33:08.670Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.670Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.670Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.670Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.670Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.670Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.670Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.670Z] 
[2024-03-07T16:33:08.670Z]     def _multicall(
[2024-03-07T16:33:08.670Z]         hook_name: str,
[2024-03-07T16:33:08.670Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.670Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.670Z]         firstresult: bool,
[2024-03-07T16:33:08.671Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.671Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.671Z]         result(s).
[2024-03-07T16:33:08.671Z]     
[2024-03-07T16:33:08.671Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.671Z]         """
[2024-03-07T16:33:08.671Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.671Z]         results: list[object] = []
[2024-03-07T16:33:08.671Z]         exception = None
[2024-03-07T16:33:08.671Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.671Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.671Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.671Z]             try:
[2024-03-07T16:33:08.671Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.671Z]                     try:
[2024-03-07T16:33:08.671Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.671Z]                     except KeyError:
[2024-03-07T16:33:08.671Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.671Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.671Z]                                 raise HookCallError(
[2024-03-07T16:33:08.671Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.671Z]                                 )
[2024-03-07T16:33:08.671Z]     
[2024-03-07T16:33:08.671Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.671Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.671Z]                         try:
[2024-03-07T16:33:08.671Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.671Z]                             # which is the desired response.
[2024-03-07T16:33:08.671Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.671Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.671Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.671Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.671Z]                         except StopIteration:
[2024-03-07T16:33:08.671Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.671Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.671Z]                         try:
[2024-03-07T16:33:08.671Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.671Z]                             # which is the desired response.
[2024-03-07T16:33:08.671Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.671Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.671Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.671Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.671Z]                         except StopIteration:
[2024-03-07T16:33:08.671Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.671Z]                     else:
[2024-03-07T16:33:08.671Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.671Z]                         if res is not None:
[2024-03-07T16:33:08.671Z]                             results.append(res)
[2024-03-07T16:33:08.671Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.671Z]                                 break
[2024-03-07T16:33:08.671Z]             except BaseException as exc:
[2024-03-07T16:33:08.671Z]                 exception = exc
[2024-03-07T16:33:08.671Z]         finally:
[2024-03-07T16:33:08.671Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.671Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.671Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.671Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.671Z]                 else:
[2024-03-07T16:33:08.671Z]                     result = results
[2024-03-07T16:33:08.671Z]     
[2024-03-07T16:33:08.671Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.671Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.671Z]                     try:
[2024-03-07T16:33:08.671Z]                         if exception is not None:
[2024-03-07T16:33:08.671Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.671Z]                         else:
[2024-03-07T16:33:08.671Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.671Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.671Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.671Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.671Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.671Z]                     except StopIteration as si:
[2024-03-07T16:33:08.671Z]                         result = si.value
[2024-03-07T16:33:08.671Z]                         exception = None
[2024-03-07T16:33:08.671Z]                         continue
[2024-03-07T16:33:08.671Z]                     except BaseException as e:
[2024-03-07T16:33:08.671Z]                         exception = e
[2024-03-07T16:33:08.671Z]                         continue
[2024-03-07T16:33:08.671Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.671Z]     
[2024-03-07T16:33:08.671Z]                 if exception is not None:
[2024-03-07T16:33:08.671Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.671Z] 
[2024-03-07T16:33:08.671Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.671Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.671Z] 
[2024-03-07T16:33:08.671Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.671Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.671Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.671Z] 
[2024-03-07T16:33:08.671Z]     def _multicall(
[2024-03-07T16:33:08.671Z]         hook_name: str,
[2024-03-07T16:33:08.671Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.671Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.671Z]         firstresult: bool,
[2024-03-07T16:33:08.671Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.671Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.671Z]         result(s).
[2024-03-07T16:33:08.671Z]     
[2024-03-07T16:33:08.671Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.671Z]         """
[2024-03-07T16:33:08.671Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.671Z]         results: list[object] = []
[2024-03-07T16:33:08.671Z]         exception = None
[2024-03-07T16:33:08.671Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.671Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.671Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.671Z]             try:
[2024-03-07T16:33:08.671Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.671Z]                     try:
[2024-03-07T16:33:08.671Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.671Z]                     except KeyError:
[2024-03-07T16:33:08.671Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.671Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.671Z]                                 raise HookCallError(
[2024-03-07T16:33:08.671Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.671Z]                                 )
[2024-03-07T16:33:08.671Z]     
[2024-03-07T16:33:08.671Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.671Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.671Z]                         try:
[2024-03-07T16:33:08.671Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.671Z]                             # which is the desired response.
[2024-03-07T16:33:08.671Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.671Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.671Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.671Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.671Z]                         except StopIteration:
[2024-03-07T16:33:08.671Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.672Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.672Z]                         try:
[2024-03-07T16:33:08.672Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.672Z]                             # which is the desired response.
[2024-03-07T16:33:08.672Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.672Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.672Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.672Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.672Z]                         except StopIteration:
[2024-03-07T16:33:08.672Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.672Z]                     else:
[2024-03-07T16:33:08.672Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.672Z]                         if res is not None:
[2024-03-07T16:33:08.672Z]                             results.append(res)
[2024-03-07T16:33:08.672Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.672Z]                                 break
[2024-03-07T16:33:08.672Z]             except BaseException as exc:
[2024-03-07T16:33:08.672Z]                 exception = exc
[2024-03-07T16:33:08.672Z]         finally:
[2024-03-07T16:33:08.672Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.672Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.672Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.672Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.672Z]                 else:
[2024-03-07T16:33:08.672Z]                     result = results
[2024-03-07T16:33:08.672Z]     
[2024-03-07T16:33:08.672Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.672Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.672Z]                     try:
[2024-03-07T16:33:08.672Z]                         if exception is not None:
[2024-03-07T16:33:08.672Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.672Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.672Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.672Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.672Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.672Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.672Z]             try:
[2024-03-07T16:33:08.672Z] >               yield
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.672Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.672Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.672Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z]     def _multicall(
[2024-03-07T16:33:08.672Z]         hook_name: str,
[2024-03-07T16:33:08.672Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.672Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.672Z]         firstresult: bool,
[2024-03-07T16:33:08.672Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.672Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.672Z]         result(s).
[2024-03-07T16:33:08.672Z]     
[2024-03-07T16:33:08.672Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.672Z]         """
[2024-03-07T16:33:08.672Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.672Z]         results: list[object] = []
[2024-03-07T16:33:08.672Z]         exception = None
[2024-03-07T16:33:08.672Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.672Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.672Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.672Z]             try:
[2024-03-07T16:33:08.672Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.672Z]                     try:
[2024-03-07T16:33:08.672Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.672Z]                     except KeyError:
[2024-03-07T16:33:08.672Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.672Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.672Z]                                 raise HookCallError(
[2024-03-07T16:33:08.672Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.672Z]                                 )
[2024-03-07T16:33:08.672Z]     
[2024-03-07T16:33:08.672Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.672Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.672Z]                         try:
[2024-03-07T16:33:08.672Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.672Z]                             # which is the desired response.
[2024-03-07T16:33:08.672Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.672Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.672Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.672Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.672Z]                         except StopIteration:
[2024-03-07T16:33:08.672Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.672Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.672Z]                         try:
[2024-03-07T16:33:08.672Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.672Z]                             # which is the desired response.
[2024-03-07T16:33:08.672Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.672Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.672Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.672Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.672Z]                         except StopIteration:
[2024-03-07T16:33:08.672Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.672Z]                     else:
[2024-03-07T16:33:08.672Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.672Z]                         if res is not None:
[2024-03-07T16:33:08.672Z]                             results.append(res)
[2024-03-07T16:33:08.672Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.672Z]                                 break
[2024-03-07T16:33:08.672Z]             except BaseException as exc:
[2024-03-07T16:33:08.672Z]                 exception = exc
[2024-03-07T16:33:08.672Z]         finally:
[2024-03-07T16:33:08.672Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.672Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.672Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.672Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.672Z]                 else:
[2024-03-07T16:33:08.672Z]                     result = results
[2024-03-07T16:33:08.672Z]     
[2024-03-07T16:33:08.672Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.672Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.672Z]                     try:
[2024-03-07T16:33:08.672Z]                         if exception is not None:
[2024-03-07T16:33:08.672Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.672Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.672Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.672Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.672Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.672Z]     
[2024-03-07T16:33:08.672Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.672Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.672Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.672Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.672Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.672Z] item = <IPyNbCell Cell 1>, when = 'setup'
[2024-03-07T16:33:08.672Z] 
[2024-03-07T16:33:08.673Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.673Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.673Z]         with catching_logs(
[2024-03-07T16:33:08.673Z]             self.caplog_handler,
[2024-03-07T16:33:08.673Z]             level=self.log_level,
[2024-03-07T16:33:08.673Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.673Z]             self.report_handler,
[2024-03-07T16:33:08.673Z]             level=self.log_level,
[2024-03-07T16:33:08.673Z]         ) as report_handler:
[2024-03-07T16:33:08.673Z]             caplog_handler.reset()
[2024-03-07T16:33:08.673Z]             report_handler.reset()
[2024-03-07T16:33:08.673Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.673Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.673Z]     
[2024-03-07T16:33:08.673Z]             try:
[2024-03-07T16:33:08.673Z] >               yield
[2024-03-07T16:33:08.673Z] 
[2024-03-07T16:33:08.673Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.673Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.673Z] 
[2024-03-07T16:33:08.673Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.673Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.673Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.673Z] 
[2024-03-07T16:33:08.673Z]     def _multicall(
[2024-03-07T16:33:08.673Z]         hook_name: str,
[2024-03-07T16:33:08.673Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.673Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.673Z]         firstresult: bool,
[2024-03-07T16:33:08.673Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.673Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.673Z]         result(s).
[2024-03-07T16:33:08.673Z]     
[2024-03-07T16:33:08.673Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.673Z]         """
[2024-03-07T16:33:08.673Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.673Z]         results: list[object] = []
[2024-03-07T16:33:08.673Z]         exception = None
[2024-03-07T16:33:08.673Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.673Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.673Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.673Z]             try:
[2024-03-07T16:33:08.673Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.673Z]                     try:
[2024-03-07T16:33:08.673Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.673Z]                     except KeyError:
[2024-03-07T16:33:08.673Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.673Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.673Z]                                 raise HookCallError(
[2024-03-07T16:33:08.673Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.673Z]                                 )
[2024-03-07T16:33:08.673Z]     
[2024-03-07T16:33:08.673Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.673Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.673Z]                         try:
[2024-03-07T16:33:08.673Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.673Z]                             # which is the desired response.
[2024-03-07T16:33:08.673Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.673Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.673Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.673Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.673Z]                         except StopIteration:
[2024-03-07T16:33:08.673Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.673Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.673Z]                         try:
[2024-03-07T16:33:08.673Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.673Z]                             # which is the desired response.
[2024-03-07T16:33:08.673Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.673Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.673Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.673Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.673Z]                         except StopIteration:
[2024-03-07T16:33:08.673Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.673Z]                     else:
[2024-03-07T16:33:08.673Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.673Z]                         if res is not None:
[2024-03-07T16:33:08.673Z]                             results.append(res)
[2024-03-07T16:33:08.673Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.673Z]                                 break
[2024-03-07T16:33:08.673Z]             except BaseException as exc:
[2024-03-07T16:33:08.673Z]                 exception = exc
[2024-03-07T16:33:08.673Z]         finally:
[2024-03-07T16:33:08.673Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.673Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.673Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.673Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.673Z]                 else:
[2024-03-07T16:33:08.673Z]                     result = results
[2024-03-07T16:33:08.673Z]     
[2024-03-07T16:33:08.673Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.673Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.673Z]                     try:
[2024-03-07T16:33:08.673Z]                         if exception is not None:
[2024-03-07T16:33:08.673Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.673Z] 
[2024-03-07T16:33:08.673Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.673Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.673Z] 
[2024-03-07T16:33:08.673Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.673Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.673Z] 
[2024-03-07T16:33:08.673Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.673Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.673Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.673Z] >           return (yield)
[2024-03-07T16:33:08.673Z] 
[2024-03-07T16:33:08.673Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.673Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.673Z] 
[2024-03-07T16:33:08.673Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.673Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.673Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.673Z] 
[2024-03-07T16:33:08.673Z]     def _multicall(
[2024-03-07T16:33:08.673Z]         hook_name: str,
[2024-03-07T16:33:08.673Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.673Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.673Z]         firstresult: bool,
[2024-03-07T16:33:08.673Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.673Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.673Z]         result(s).
[2024-03-07T16:33:08.673Z]     
[2024-03-07T16:33:08.673Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.673Z]         """
[2024-03-07T16:33:08.673Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.673Z]         results: list[object] = []
[2024-03-07T16:33:08.673Z]         exception = None
[2024-03-07T16:33:08.673Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.673Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.673Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.673Z]             try:
[2024-03-07T16:33:08.673Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.673Z]                     try:
[2024-03-07T16:33:08.673Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.673Z]                     except KeyError:
[2024-03-07T16:33:08.673Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.673Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.673Z]                                 raise HookCallError(
[2024-03-07T16:33:08.673Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.673Z]                                 )
[2024-03-07T16:33:08.673Z]     
[2024-03-07T16:33:08.673Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.673Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.673Z]                         try:
[2024-03-07T16:33:08.673Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.674Z]                             # which is the desired response.
[2024-03-07T16:33:08.674Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.674Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.674Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.674Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.674Z]                         except StopIteration:
[2024-03-07T16:33:08.674Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.674Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.674Z]                         try:
[2024-03-07T16:33:08.674Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.674Z]                             # which is the desired response.
[2024-03-07T16:33:08.674Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.674Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.674Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.674Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.674Z]                         except StopIteration:
[2024-03-07T16:33:08.674Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.674Z]                     else:
[2024-03-07T16:33:08.674Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.674Z]                         if res is not None:
[2024-03-07T16:33:08.674Z]                             results.append(res)
[2024-03-07T16:33:08.674Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.674Z]                                 break
[2024-03-07T16:33:08.674Z]             except BaseException as exc:
[2024-03-07T16:33:08.674Z]                 exception = exc
[2024-03-07T16:33:08.674Z]         finally:
[2024-03-07T16:33:08.674Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.674Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.674Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.674Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.674Z]                 else:
[2024-03-07T16:33:08.674Z]                     result = results
[2024-03-07T16:33:08.674Z]     
[2024-03-07T16:33:08.674Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.674Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.674Z]                     try:
[2024-03-07T16:33:08.674Z]                         if exception is not None:
[2024-03-07T16:33:08.674Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.674Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.674Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.674Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.674Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.674Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.674Z]             try:
[2024-03-07T16:33:08.674Z] >               yield
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.674Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.674Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.674Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z]     def _multicall(
[2024-03-07T16:33:08.674Z]         hook_name: str,
[2024-03-07T16:33:08.674Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.674Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.674Z]         firstresult: bool,
[2024-03-07T16:33:08.674Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.674Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.674Z]         result(s).
[2024-03-07T16:33:08.674Z]     
[2024-03-07T16:33:08.674Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.674Z]         """
[2024-03-07T16:33:08.674Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.674Z]         results: list[object] = []
[2024-03-07T16:33:08.674Z]         exception = None
[2024-03-07T16:33:08.674Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.674Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.674Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.674Z]             try:
[2024-03-07T16:33:08.674Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.674Z]                     try:
[2024-03-07T16:33:08.674Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.674Z]                     except KeyError:
[2024-03-07T16:33:08.674Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.674Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.674Z]                                 raise HookCallError(
[2024-03-07T16:33:08.674Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.674Z]                                 )
[2024-03-07T16:33:08.674Z]     
[2024-03-07T16:33:08.674Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.674Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.674Z]                         try:
[2024-03-07T16:33:08.674Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.674Z]                             # which is the desired response.
[2024-03-07T16:33:08.674Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.674Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.674Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.674Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.674Z]                         except StopIteration:
[2024-03-07T16:33:08.674Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.674Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.674Z]                         try:
[2024-03-07T16:33:08.674Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.674Z]                             # which is the desired response.
[2024-03-07T16:33:08.674Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.674Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.674Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.674Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.674Z]                         except StopIteration:
[2024-03-07T16:33:08.674Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.674Z]                     else:
[2024-03-07T16:33:08.674Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.674Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.674Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.674Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.674Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.674Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.674Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.674Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.674Z]     
[2024-03-07T16:33:08.674Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.674Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.674Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.674Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.674Z]             if exc:
[2024-03-07T16:33:08.674Z] >               raise exc
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.674Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.674Z] 
[2024-03-07T16:33:08.674Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.674Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abbb0b520>
[2024-03-07T16:33:08.674Z] when = 'setup'
[2024-03-07T16:33:08.675Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z]     @classmethod
[2024-03-07T16:33:08.675Z]     def from_call(
[2024-03-07T16:33:08.675Z]         cls,
[2024-03-07T16:33:08.675Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.675Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.675Z]         reraise: Optional[
[2024-03-07T16:33:08.675Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.675Z]         ] = None,
[2024-03-07T16:33:08.675Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.675Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.675Z]     
[2024-03-07T16:33:08.675Z]         :param func:
[2024-03-07T16:33:08.675Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.675Z]         :param when:
[2024-03-07T16:33:08.675Z]             The phase in which the function is called.
[2024-03-07T16:33:08.675Z]         :param reraise:
[2024-03-07T16:33:08.675Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.675Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.675Z]         """
[2024-03-07T16:33:08.675Z]         excinfo = None
[2024-03-07T16:33:08.675Z]         start = timing.time()
[2024-03-07T16:33:08.675Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.675Z]         try:
[2024-03-07T16:33:08.675Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.675Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.675Z]     )
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.675Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.675Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.675Z]         """Call the hook.
[2024-03-07T16:33:08.675Z]     
[2024-03-07T16:33:08.675Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.675Z]         specification.
[2024-03-07T16:33:08.675Z]     
[2024-03-07T16:33:08.675Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.675Z]         :ref:`calling`.
[2024-03-07T16:33:08.675Z]         """
[2024-03-07T16:33:08.675Z]         assert (
[2024-03-07T16:33:08.675Z]             not self.is_historic()
[2024-03-07T16:33:08.675Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.675Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.675Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.675Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.675Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.675Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.675Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.675Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.675Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z]     def _hookexec(
[2024-03-07T16:33:08.675Z]         self,
[2024-03-07T16:33:08.675Z]         hook_name: str,
[2024-03-07T16:33:08.675Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.675Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.675Z]         firstresult: bool,
[2024-03-07T16:33:08.675Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.675Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.675Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.675Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.675Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.675Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.675Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.675Z] 
[2024-03-07T16:33:08.675Z]     def _multicall(
[2024-03-07T16:33:08.675Z]         hook_name: str,
[2024-03-07T16:33:08.675Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.675Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.675Z]         firstresult: bool,
[2024-03-07T16:33:08.675Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.675Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.675Z]         result(s).
[2024-03-07T16:33:08.675Z]     
[2024-03-07T16:33:08.675Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.675Z]         """
[2024-03-07T16:33:08.675Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.675Z]         results: list[object] = []
[2024-03-07T16:33:08.675Z]         exception = None
[2024-03-07T16:33:08.675Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.675Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.675Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.675Z]             try:
[2024-03-07T16:33:08.675Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.675Z]                     try:
[2024-03-07T16:33:08.675Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.675Z]                     except KeyError:
[2024-03-07T16:33:08.675Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.675Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.675Z]                                 raise HookCallError(
[2024-03-07T16:33:08.675Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.675Z]                                 )
[2024-03-07T16:33:08.675Z]     
[2024-03-07T16:33:08.675Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.675Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.675Z]                         try:
[2024-03-07T16:33:08.675Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.675Z]                             # which is the desired response.
[2024-03-07T16:33:08.675Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.675Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.675Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.675Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.675Z]                         except StopIteration:
[2024-03-07T16:33:08.675Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.675Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.675Z]                         try:
[2024-03-07T16:33:08.675Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.675Z]                             # which is the desired response.
[2024-03-07T16:33:08.675Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.675Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.675Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.675Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.675Z]                         except StopIteration:
[2024-03-07T16:33:08.675Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.675Z]                     else:
[2024-03-07T16:33:08.675Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.675Z]                         if res is not None:
[2024-03-07T16:33:08.675Z]                             results.append(res)
[2024-03-07T16:33:08.675Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.675Z]                                 break
[2024-03-07T16:33:08.675Z]             except BaseException as exc:
[2024-03-07T16:33:08.675Z]                 exception = exc
[2024-03-07T16:33:08.675Z]         finally:
[2024-03-07T16:33:08.675Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.675Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.675Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.675Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.675Z]                 else:
[2024-03-07T16:33:08.676Z]                     result = results
[2024-03-07T16:33:08.676Z]     
[2024-03-07T16:33:08.676Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.676Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.676Z]                     try:
[2024-03-07T16:33:08.676Z]                         if exception is not None:
[2024-03-07T16:33:08.676Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.676Z]                         else:
[2024-03-07T16:33:08.676Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.676Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.676Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.676Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.676Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.676Z]                     except StopIteration as si:
[2024-03-07T16:33:08.676Z]                         result = si.value
[2024-03-07T16:33:08.676Z]                         exception = None
[2024-03-07T16:33:08.676Z]                         continue
[2024-03-07T16:33:08.676Z]                     except BaseException as e:
[2024-03-07T16:33:08.676Z]                         exception = e
[2024-03-07T16:33:08.676Z]                         continue
[2024-03-07T16:33:08.676Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.676Z]     
[2024-03-07T16:33:08.676Z]                 if exception is not None:
[2024-03-07T16:33:08.676Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.676Z] 
[2024-03-07T16:33:08.676Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.676Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.676Z] 
[2024-03-07T16:33:08.676Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.676Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.676Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.676Z] 
[2024-03-07T16:33:08.676Z]     def _multicall(
[2024-03-07T16:33:08.676Z]         hook_name: str,
[2024-03-07T16:33:08.676Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.676Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.676Z]         firstresult: bool,
[2024-03-07T16:33:08.676Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.676Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.676Z]         result(s).
[2024-03-07T16:33:08.676Z]     
[2024-03-07T16:33:08.676Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.676Z]         """
[2024-03-07T16:33:08.676Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.676Z]         results: list[object] = []
[2024-03-07T16:33:08.676Z]         exception = None
[2024-03-07T16:33:08.676Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.676Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.676Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.676Z]             try:
[2024-03-07T16:33:08.676Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.676Z]                     try:
[2024-03-07T16:33:08.676Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.676Z]                     except KeyError:
[2024-03-07T16:33:08.676Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.676Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.676Z]                                 raise HookCallError(
[2024-03-07T16:33:08.676Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.676Z]                                 )
[2024-03-07T16:33:08.676Z]     
[2024-03-07T16:33:08.676Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.676Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.676Z]                         try:
[2024-03-07T16:33:08.676Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.676Z]                             # which is the desired response.
[2024-03-07T16:33:08.676Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.676Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.676Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.676Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.676Z]                         except StopIteration:
[2024-03-07T16:33:08.676Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.676Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.676Z]                         try:
[2024-03-07T16:33:08.676Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.676Z]                             # which is the desired response.
[2024-03-07T16:33:08.676Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.676Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.676Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.676Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.676Z]                         except StopIteration:
[2024-03-07T16:33:08.676Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.676Z]                     else:
[2024-03-07T16:33:08.676Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.676Z]                         if res is not None:
[2024-03-07T16:33:08.676Z]                             results.append(res)
[2024-03-07T16:33:08.676Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.676Z]                                 break
[2024-03-07T16:33:08.676Z]             except BaseException as exc:
[2024-03-07T16:33:08.676Z]                 exception = exc
[2024-03-07T16:33:08.676Z]         finally:
[2024-03-07T16:33:08.676Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.676Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.676Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.676Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.676Z]                 else:
[2024-03-07T16:33:08.676Z]                     result = results
[2024-03-07T16:33:08.676Z]     
[2024-03-07T16:33:08.676Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.676Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.676Z]                     try:
[2024-03-07T16:33:08.676Z]                         if exception is not None:
[2024-03-07T16:33:08.676Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.676Z] 
[2024-03-07T16:33:08.676Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.676Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.676Z] 
[2024-03-07T16:33:08.676Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.676Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.676Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.676Z] 
[2024-03-07T16:33:08.676Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.676Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.676Z] 
[2024-03-07T16:33:08.676Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.676Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.676Z]             try:
[2024-03-07T16:33:08.676Z] >               yield
[2024-03-07T16:33:08.676Z] 
[2024-03-07T16:33:08.676Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.676Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.676Z] 
[2024-03-07T16:33:08.676Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.676Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.676Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.676Z] 
[2024-03-07T16:33:08.676Z]     def _multicall(
[2024-03-07T16:33:08.676Z]         hook_name: str,
[2024-03-07T16:33:08.676Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.676Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.676Z]         firstresult: bool,
[2024-03-07T16:33:08.676Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.676Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.676Z]         result(s).
[2024-03-07T16:33:08.676Z]     
[2024-03-07T16:33:08.676Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.676Z]         """
[2024-03-07T16:33:08.676Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.676Z]         results: list[object] = []
[2024-03-07T16:33:08.676Z]         exception = None
[2024-03-07T16:33:08.676Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.676Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.676Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.676Z]             try:
[2024-03-07T16:33:08.676Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.677Z]                     try:
[2024-03-07T16:33:08.677Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.677Z]                     except KeyError:
[2024-03-07T16:33:08.677Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.677Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.677Z]                                 raise HookCallError(
[2024-03-07T16:33:08.677Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.677Z]                                 )
[2024-03-07T16:33:08.677Z]     
[2024-03-07T16:33:08.677Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.677Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.677Z]                         try:
[2024-03-07T16:33:08.677Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.677Z]                             # which is the desired response.
[2024-03-07T16:33:08.677Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.677Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.677Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.677Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.677Z]                         except StopIteration:
[2024-03-07T16:33:08.677Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.677Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.677Z]                         try:
[2024-03-07T16:33:08.677Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.677Z]                             # which is the desired response.
[2024-03-07T16:33:08.677Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.677Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.677Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.677Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.677Z]                         except StopIteration:
[2024-03-07T16:33:08.677Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.677Z]                     else:
[2024-03-07T16:33:08.677Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.677Z]                         if res is not None:
[2024-03-07T16:33:08.677Z]                             results.append(res)
[2024-03-07T16:33:08.677Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.677Z]                                 break
[2024-03-07T16:33:08.677Z]             except BaseException as exc:
[2024-03-07T16:33:08.677Z]                 exception = exc
[2024-03-07T16:33:08.677Z]         finally:
[2024-03-07T16:33:08.677Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.677Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.677Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.677Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.677Z]                 else:
[2024-03-07T16:33:08.677Z]                     result = results
[2024-03-07T16:33:08.677Z]     
[2024-03-07T16:33:08.677Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.677Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.677Z]                     try:
[2024-03-07T16:33:08.677Z]                         if exception is not None:
[2024-03-07T16:33:08.677Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.677Z] 
[2024-03-07T16:33:08.677Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.677Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.677Z] 
[2024-03-07T16:33:08.677Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.677Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.677Z] 
[2024-03-07T16:33:08.677Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.677Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.677Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.677Z]     
[2024-03-07T16:33:08.677Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.677Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.677Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.677Z] 
[2024-03-07T16:33:08.677Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.677Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.677Z] 
[2024-03-07T16:33:08.677Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.677Z] item = <IPyNbCell Cell 0>, when = 'setup'
[2024-03-07T16:33:08.677Z] 
[2024-03-07T16:33:08.677Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.677Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.677Z]         with catching_logs(
[2024-03-07T16:33:08.677Z]             self.caplog_handler,
[2024-03-07T16:33:08.677Z]             level=self.log_level,
[2024-03-07T16:33:08.677Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.677Z]             self.report_handler,
[2024-03-07T16:33:08.677Z]             level=self.log_level,
[2024-03-07T16:33:08.677Z]         ) as report_handler:
[2024-03-07T16:33:08.677Z]             caplog_handler.reset()
[2024-03-07T16:33:08.677Z]             report_handler.reset()
[2024-03-07T16:33:08.677Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.677Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.677Z]     
[2024-03-07T16:33:08.677Z]             try:
[2024-03-07T16:33:08.677Z] >               yield
[2024-03-07T16:33:08.677Z] 
[2024-03-07T16:33:08.677Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.677Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.677Z] 
[2024-03-07T16:33:08.677Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.677Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.677Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.677Z] 
[2024-03-07T16:33:08.677Z]     def _multicall(
[2024-03-07T16:33:08.677Z]         hook_name: str,
[2024-03-07T16:33:08.677Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.677Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.677Z]         firstresult: bool,
[2024-03-07T16:33:08.677Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.677Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.677Z]         result(s).
[2024-03-07T16:33:08.677Z]     
[2024-03-07T16:33:08.677Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.677Z]         """
[2024-03-07T16:33:08.677Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.677Z]         results: list[object] = []
[2024-03-07T16:33:08.677Z]         exception = None
[2024-03-07T16:33:08.677Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.677Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.677Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.677Z]             try:
[2024-03-07T16:33:08.677Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.677Z]                     try:
[2024-03-07T16:33:08.677Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.677Z]                     except KeyError:
[2024-03-07T16:33:08.677Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.677Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.677Z]                                 raise HookCallError(
[2024-03-07T16:33:08.677Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.677Z]                                 )
[2024-03-07T16:33:08.677Z]     
[2024-03-07T16:33:08.677Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.677Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.677Z]                         try:
[2024-03-07T16:33:08.677Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.677Z]                             # which is the desired response.
[2024-03-07T16:33:08.677Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.677Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.677Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.677Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.677Z]                         except StopIteration:
[2024-03-07T16:33:08.677Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.677Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.677Z]                         try:
[2024-03-07T16:33:08.678Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.678Z]                             # which is the desired response.
[2024-03-07T16:33:08.678Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.678Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.678Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.678Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.678Z]                         except StopIteration:
[2024-03-07T16:33:08.678Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.678Z]                     else:
[2024-03-07T16:33:08.678Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.678Z]                         if res is not None:
[2024-03-07T16:33:08.678Z]                             results.append(res)
[2024-03-07T16:33:08.678Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.678Z]                                 break
[2024-03-07T16:33:08.678Z]             except BaseException as exc:
[2024-03-07T16:33:08.678Z]                 exception = exc
[2024-03-07T16:33:08.678Z]         finally:
[2024-03-07T16:33:08.678Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.678Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.678Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.678Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.678Z]                 else:
[2024-03-07T16:33:08.678Z]                     result = results
[2024-03-07T16:33:08.678Z]     
[2024-03-07T16:33:08.678Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.678Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.678Z]                     try:
[2024-03-07T16:33:08.678Z]                         if exception is not None:
[2024-03-07T16:33:08.678Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.678Z] 
[2024-03-07T16:33:08.678Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.678Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.678Z] 
[2024-03-07T16:33:08.678Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.678Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.678Z] 
[2024-03-07T16:33:08.678Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.678Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.678Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.678Z] >           return (yield)
[2024-03-07T16:33:08.678Z] 
[2024-03-07T16:33:08.678Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.678Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.678Z] 
[2024-03-07T16:33:08.678Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.678Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.678Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.678Z] 
[2024-03-07T16:33:08.678Z]     def _multicall(
[2024-03-07T16:33:08.678Z]         hook_name: str,
[2024-03-07T16:33:08.678Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.678Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.678Z]         firstresult: bool,
[2024-03-07T16:33:08.678Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.678Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.678Z]         result(s).
[2024-03-07T16:33:08.678Z]     
[2024-03-07T16:33:08.678Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.678Z]         """
[2024-03-07T16:33:08.678Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.678Z]         results: list[object] = []
[2024-03-07T16:33:08.678Z]         exception = None
[2024-03-07T16:33:08.678Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.678Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.678Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.678Z]             try:
[2024-03-07T16:33:08.678Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.678Z]                     try:
[2024-03-07T16:33:08.678Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.678Z]                     except KeyError:
[2024-03-07T16:33:08.678Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.678Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.678Z]                                 raise HookCallError(
[2024-03-07T16:33:08.678Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.678Z]                                 )
[2024-03-07T16:33:08.678Z]     
[2024-03-07T16:33:08.678Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.678Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.678Z]                         try:
[2024-03-07T16:33:08.678Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.678Z]                             # which is the desired response.
[2024-03-07T16:33:08.678Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.678Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.678Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.678Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.678Z]                         except StopIteration:
[2024-03-07T16:33:08.678Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.678Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.678Z]                         try:
[2024-03-07T16:33:08.678Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.678Z]                             # which is the desired response.
[2024-03-07T16:33:08.678Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.678Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.678Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.678Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.678Z]                         except StopIteration:
[2024-03-07T16:33:08.678Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.678Z]                     else:
[2024-03-07T16:33:08.678Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.678Z]                         if res is not None:
[2024-03-07T16:33:08.678Z]                             results.append(res)
[2024-03-07T16:33:08.678Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.678Z]                                 break
[2024-03-07T16:33:08.678Z]             except BaseException as exc:
[2024-03-07T16:33:08.678Z]                 exception = exc
[2024-03-07T16:33:08.678Z]         finally:
[2024-03-07T16:33:08.678Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.678Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.678Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.678Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.678Z]                 else:
[2024-03-07T16:33:08.678Z]                     result = results
[2024-03-07T16:33:08.678Z]     
[2024-03-07T16:33:08.678Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.678Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.678Z]                     try:
[2024-03-07T16:33:08.678Z]                         if exception is not None:
[2024-03-07T16:33:08.678Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.678Z] 
[2024-03-07T16:33:08.678Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.678Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.678Z] 
[2024-03-07T16:33:08.678Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.678Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.678Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.678Z] 
[2024-03-07T16:33:08.678Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.679Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.679Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.679Z]             try:
[2024-03-07T16:33:08.679Z] >               yield
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.679Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.679Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.679Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z]     def _multicall(
[2024-03-07T16:33:08.679Z]         hook_name: str,
[2024-03-07T16:33:08.679Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.679Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.679Z]         firstresult: bool,
[2024-03-07T16:33:08.679Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.679Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.679Z]         result(s).
[2024-03-07T16:33:08.679Z]     
[2024-03-07T16:33:08.679Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.679Z]         """
[2024-03-07T16:33:08.679Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.679Z]         results: list[object] = []
[2024-03-07T16:33:08.679Z]         exception = None
[2024-03-07T16:33:08.679Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.679Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.679Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.679Z]             try:
[2024-03-07T16:33:08.679Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.679Z]                     try:
[2024-03-07T16:33:08.679Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.679Z]                     except KeyError:
[2024-03-07T16:33:08.679Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.679Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.679Z]                                 raise HookCallError(
[2024-03-07T16:33:08.679Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.679Z]                                 )
[2024-03-07T16:33:08.679Z]     
[2024-03-07T16:33:08.679Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.679Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.679Z]                         try:
[2024-03-07T16:33:08.679Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.679Z]                             # which is the desired response.
[2024-03-07T16:33:08.679Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.679Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.679Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.679Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.679Z]                         except StopIteration:
[2024-03-07T16:33:08.679Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.679Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.679Z]                         try:
[2024-03-07T16:33:08.679Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.679Z]                             # which is the desired response.
[2024-03-07T16:33:08.679Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.679Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.679Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.679Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.679Z]                         except StopIteration:
[2024-03-07T16:33:08.679Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.679Z]                     else:
[2024-03-07T16:33:08.679Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.679Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.679Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.679Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.679Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.679Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.679Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.679Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.679Z]     
[2024-03-07T16:33:08.679Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.679Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.679Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.679Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.679Z]             if exc:
[2024-03-07T16:33:08.679Z]                 raise exc
[2024-03-07T16:33:08.679Z]     
[2024-03-07T16:33:08.679Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.679Z]             assert col not in self.stack
[2024-03-07T16:33:08.679Z]             # Push onto the stack.
[2024-03-07T16:33:08.679Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.679Z]             try:
[2024-03-07T16:33:08.679Z]                 col.setup()
[2024-03-07T16:33:08.679Z]             except TEST_OUTCOME as exc:
[2024-03-07T16:33:08.679Z]                 self.stack[col] = (self.stack[col][0], exc)
[2024-03-07T16:33:08.679Z] >               raise exc
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:514: 
[2024-03-07T16:33:08.679Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.679Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.679Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.679Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.679Z]     
[2024-03-07T16:33:08.679Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.679Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.679Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.679Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.679Z]             if exc:
[2024-03-07T16:33:08.679Z]                 raise exc
[2024-03-07T16:33:08.679Z]     
[2024-03-07T16:33:08.679Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.679Z]             assert col not in self.stack
[2024-03-07T16:33:08.679Z]             # Push onto the stack.
[2024-03-07T16:33:08.679Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.679Z]             try:
[2024-03-07T16:33:08.679Z] >               col.setup()
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:511: 
[2024-03-07T16:33:08.679Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z] self = <IPyNbFile 06_Raven_calibration.ipynb>
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.679Z]     def setup(self):
[2024-03-07T16:33:08.679Z]         """
[2024-03-07T16:33:08.679Z]         Called by pytest to setup the collector cells in .
[2024-03-07T16:33:08.679Z]         Here we start a kernel and setup the sanitize patterns.
[2024-03-07T16:33:08.679Z]         """
[2024-03-07T16:33:08.679Z]         # we've already checked that --nbval-current-env and
[2024-03-07T16:33:08.679Z]         # --nbval-kernel-name were not both supplied
[2024-03-07T16:33:08.679Z]         if self.parent.config.option.nbval_current_env:
[2024-03-07T16:33:08.679Z]             kernel_name = CURRENT_ENV_KERNEL_NAME
[2024-03-07T16:33:08.679Z]         elif self.parent.config.option.nbval_kernel_name:
[2024-03-07T16:33:08.679Z]             kernel_name = self.parent.config.option.nbval_kernel_name
[2024-03-07T16:33:08.679Z]         else:
[2024-03-07T16:33:08.679Z]             kernel_name = self.nb.metadata.get(
[2024-03-07T16:33:08.679Z]                 'kernelspec', {}).get('name', 'python')
[2024-03-07T16:33:08.679Z] >       self.kernel = RunningKernel(
[2024-03-07T16:33:08.679Z]             kernel_name,
[2024-03-07T16:33:08.679Z]             cwd=str(self.fspath.dirname),
[2024-03-07T16:33:08.679Z]             startup_timeout=self.config.option.nbval_kernel_startup_timeout,
[2024-03-07T16:33:08.679Z]         )
[2024-03-07T16:33:08.679Z] 
[2024-03-07T16:33:08.680Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/plugin.py:264: 
[2024-03-07T16:33:08.680Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] self = <nbval.kernel.RunningKernel object at 0x7f0abb8c4d60>
[2024-03-07T16:33:08.680Z] kernel_name = 'python'
[2024-03-07T16:33:08.680Z] cwd = '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks'
[2024-03-07T16:33:08.680Z] startup_timeout = 60
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z]     def __init__(self, kernel_name, cwd=None, startup_timeout=60):
[2024-03-07T16:33:08.680Z]         """
[2024-03-07T16:33:08.680Z]         Initialise a new kernel
[2024-03-07T16:33:08.680Z]         specify that matplotlib is inline and connect the stderr.
[2024-03-07T16:33:08.680Z]         Stores the active kernel process and its manager.
[2024-03-07T16:33:08.680Z]         """
[2024-03-07T16:33:08.680Z]     
[2024-03-07T16:33:08.680Z] >       self.km, self.kc = start_new_kernel(
[2024-03-07T16:33:08.680Z]             startup_timeout=startup_timeout,
[2024-03-07T16:33:08.680Z]             kernel_name=kernel_name,
[2024-03-07T16:33:08.680Z]             stderr=open(os.devnull, 'w'),
[2024-03-07T16:33:08.680Z]             cwd=cwd,
[2024-03-07T16:33:08.680Z]         )
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:85: 
[2024-03-07T16:33:08.680Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] startup_timeout = 60, kernel_name = 'python'
[2024-03-07T16:33:08.680Z] kwargs = {'cwd': '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks', 'stderr': <_io.TextIOWrapper name='/dev/null' mode='w' encoding='UTF-8'>}
[2024-03-07T16:33:08.680Z] km = <jupyter_client.manager.KernelManager object at 0x7f0abb8c7580>
[2024-03-07T16:33:08.680Z] kc = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z]     def start_new_kernel(startup_timeout=60, kernel_name='python', **kwargs):
[2024-03-07T16:33:08.680Z]         """Start a new kernel, and return its Manager and Client"""
[2024-03-07T16:33:08.680Z]         logger.debug('Starting new kernel: "%s"' % kernel_name)
[2024-03-07T16:33:08.680Z]         km = KernelManager(kernel_name=kernel_name,
[2024-03-07T16:33:08.680Z]                            kernel_spec_manager=NbvalKernelspecManager())
[2024-03-07T16:33:08.680Z]         km.start_kernel(**kwargs)
[2024-03-07T16:33:08.680Z]         kc = km.client()
[2024-03-07T16:33:08.680Z]         kc.start_channels()
[2024-03-07T16:33:08.680Z]         try:
[2024-03-07T16:33:08.680Z] >           kc.wait_for_ready(timeout=startup_timeout)
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:57: 
[2024-03-07T16:33:08.680Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.680Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.680Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.680Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.680Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.680Z]         try:
[2024-03-07T16:33:08.680Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.680Z]         except RuntimeError:
[2024-03-07T16:33:08.680Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.680Z]             try:
[2024-03-07T16:33:08.680Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.680Z]             except RuntimeError:
[2024-03-07T16:33:08.680Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.680Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.680Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.680Z]     
[2024-03-07T16:33:08.680Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.680Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.680Z]         try:
[2024-03-07T16:33:08.680Z]             return loop.run_until_complete(future)
[2024-03-07T16:33:08.680Z]         except BaseException as e:
[2024-03-07T16:33:08.680Z]             future.cancel()
[2024-03-07T16:33:08.680Z] >           raise e
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:30: 
[2024-03-07T16:33:08.680Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.680Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.680Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.680Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.680Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.680Z]         try:
[2024-03-07T16:33:08.680Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.680Z]         except RuntimeError:
[2024-03-07T16:33:08.680Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.680Z]             try:
[2024-03-07T16:33:08.680Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.680Z]             except RuntimeError:
[2024-03-07T16:33:08.680Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.680Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.680Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.680Z]     
[2024-03-07T16:33:08.680Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.680Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.680Z]         try:
[2024-03-07T16:33:08.680Z] >           return loop.run_until_complete(future)
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:27: 
[2024-03-07T16:33:08.680Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] self = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.680Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z]     def run_until_complete(self, future):
[2024-03-07T16:33:08.680Z]         with manage_run(self):
[2024-03-07T16:33:08.680Z]             f = asyncio.ensure_future(future, loop=self)
[2024-03-07T16:33:08.680Z]             if f is not future:
[2024-03-07T16:33:08.680Z]                 f._log_destroy_pending = False
[2024-03-07T16:33:08.680Z]             while not f.done():
[2024-03-07T16:33:08.680Z]                 self._run_once()
[2024-03-07T16:33:08.680Z]                 if self._stopping:
[2024-03-07T16:33:08.680Z]                     break
[2024-03-07T16:33:08.680Z]             if not f.done():
[2024-03-07T16:33:08.680Z]                 raise RuntimeError(
[2024-03-07T16:33:08.680Z]                     'Event loop stopped before Future completed.')
[2024-03-07T16:33:08.680Z] >           return f.result()
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py:98: 
[2024-03-07T16:33:08.680Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] self = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z]     def result(self):
[2024-03-07T16:33:08.680Z]         """Return the result this future represents.
[2024-03-07T16:33:08.680Z]     
[2024-03-07T16:33:08.680Z]         If the future has been cancelled, raises CancelledError.  If the
[2024-03-07T16:33:08.680Z]         future's result isn't yet available, raises InvalidStateError.  If
[2024-03-07T16:33:08.680Z]         the future is done and has an exception set, this exception is raised.
[2024-03-07T16:33:08.680Z]         """
[2024-03-07T16:33:08.680Z]         if self._state == _CANCELLED:
[2024-03-07T16:33:08.680Z]             exc = self._make_cancelled_error()
[2024-03-07T16:33:08.680Z]             raise exc
[2024-03-07T16:33:08.680Z]         if self._state != _FINISHED:
[2024-03-07T16:33:08.680Z]             raise exceptions.InvalidStateError('Result is not ready.')
[2024-03-07T16:33:08.680Z]         self.__log_traceback = False
[2024-03-07T16:33:08.680Z]         if self._exception is not None:
[2024-03-07T16:33:08.680Z] >           raise self._exception.with_traceback(self._exception_tb)
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/futures.py:201: 
[2024-03-07T16:33:08.680Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z] self = None
[2024-03-07T16:33:08.680Z] 
[2024-03-07T16:33:08.680Z]     def __step(self, exc=None):
[2024-03-07T16:33:08.680Z]         if self.done():
[2024-03-07T16:33:08.680Z]             raise exceptions.InvalidStateError(
[2024-03-07T16:33:08.680Z]                 f'_step(): already done: {self!r}, {exc!r}')
[2024-03-07T16:33:08.680Z]         if self._must_cancel:
[2024-03-07T16:33:08.681Z]             if not isinstance(exc, exceptions.CancelledError):
[2024-03-07T16:33:08.681Z]                 exc = self._make_cancelled_error()
[2024-03-07T16:33:08.681Z]             self._must_cancel = False
[2024-03-07T16:33:08.681Z]         coro = self._coro
[2024-03-07T16:33:08.681Z]         self._fut_waiter = None
[2024-03-07T16:33:08.681Z]     
[2024-03-07T16:33:08.681Z]         _enter_task(self._loop, self)
[2024-03-07T16:33:08.681Z]         # Call either coro.throw(exc) or coro.send(None).
[2024-03-07T16:33:08.681Z]         try:
[2024-03-07T16:33:08.681Z]             if exc is None:
[2024-03-07T16:33:08.681Z]                 # We use the `send` method directly, because coroutines
[2024-03-07T16:33:08.681Z]                 # don't have `__iter__` and `__next__` methods.
[2024-03-07T16:33:08.681Z] >               result = coro.send(None)
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/tasks.py:232: 
[2024-03-07T16:33:08.681Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] self = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.681Z] timeout = 60
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z]     async def _async_wait_for_ready(self, timeout: t.Optional[float] = None) -> None:
[2024-03-07T16:33:08.681Z]         """Waits for a response when a client is blocked
[2024-03-07T16:33:08.681Z]     
[2024-03-07T16:33:08.681Z]         - Sets future time for timeout
[2024-03-07T16:33:08.681Z]         - Blocks on shell channel until a message is received
[2024-03-07T16:33:08.681Z]         - Exit if the kernel has died
[2024-03-07T16:33:08.681Z]         - If client times out before receiving a message from the kernel, send RuntimeError
[2024-03-07T16:33:08.681Z]         - Flush the IOPub channel
[2024-03-07T16:33:08.681Z]         """
[2024-03-07T16:33:08.681Z]         if timeout is None:
[2024-03-07T16:33:08.681Z]             timeout = float("inf")
[2024-03-07T16:33:08.681Z]         abs_timeout = time.time() + timeout
[2024-03-07T16:33:08.681Z]     
[2024-03-07T16:33:08.681Z]         from .manager import KernelManager
[2024-03-07T16:33:08.681Z]     
[2024-03-07T16:33:08.681Z]         if not isinstance(self.parent, KernelManager):
[2024-03-07T16:33:08.681Z]             # This Client was not created by a KernelManager,
[2024-03-07T16:33:08.681Z]             # so wait for kernel to become responsive to heartbeats
[2024-03-07T16:33:08.681Z]             # before checking for kernel_info reply
[2024-03-07T16:33:08.681Z]             while not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.681Z]                 if time.time() > abs_timeout:
[2024-03-07T16:33:08.681Z]                     raise RuntimeError(
[2024-03-07T16:33:08.681Z]                         "Kernel didn't respond to heartbeats in %d seconds and timed out" % timeout
[2024-03-07T16:33:08.681Z]                     )
[2024-03-07T16:33:08.681Z]                 await asyncio.sleep(0.2)
[2024-03-07T16:33:08.681Z]     
[2024-03-07T16:33:08.681Z]         # Wait for kernel info reply on shell channel
[2024-03-07T16:33:08.681Z]         while True:
[2024-03-07T16:33:08.681Z]             self.kernel_info()
[2024-03-07T16:33:08.681Z]             try:
[2024-03-07T16:33:08.681Z]                 msg = await self.shell_channel.get_msg(timeout=1)
[2024-03-07T16:33:08.681Z]             except Empty:
[2024-03-07T16:33:08.681Z]                 pass
[2024-03-07T16:33:08.681Z]             else:
[2024-03-07T16:33:08.681Z]                 if msg["msg_type"] == "kernel_info_reply":
[2024-03-07T16:33:08.681Z]                     # Checking that IOPub is connected. If it is not connected, start over.
[2024-03-07T16:33:08.681Z]                     try:
[2024-03-07T16:33:08.681Z]                         await self.iopub_channel.get_msg(timeout=0.2)
[2024-03-07T16:33:08.681Z]                     except Empty:
[2024-03-07T16:33:08.681Z]                         pass
[2024-03-07T16:33:08.681Z]                     else:
[2024-03-07T16:33:08.681Z]                         self._handle_kernel_info_reply(msg)
[2024-03-07T16:33:08.681Z]                         break
[2024-03-07T16:33:08.681Z]     
[2024-03-07T16:33:08.681Z]             if not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.681Z]                 raise RuntimeError("Kernel died before replying to kernel_info")
[2024-03-07T16:33:08.681Z]     
[2024-03-07T16:33:08.681Z]             # Check if current time is ready check time plus timeout
[2024-03-07T16:33:08.681Z]             if time.time() > abs_timeout:
[2024-03-07T16:33:08.681Z] >               raise RuntimeError("Kernel didn't respond in %d seconds" % timeout)
[2024-03-07T16:33:08.681Z] E               RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:206: RuntimeError
[2024-03-07T16:33:08.681Z] _ ERROR at setup of RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 4 _
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.681Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0ab86cab00>
[2024-03-07T16:33:08.681Z] when = 'setup'
[2024-03-07T16:33:08.681Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z]     @classmethod
[2024-03-07T16:33:08.681Z]     def from_call(
[2024-03-07T16:33:08.681Z]         cls,
[2024-03-07T16:33:08.681Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.681Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.681Z]         reraise: Optional[
[2024-03-07T16:33:08.681Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.681Z]         ] = None,
[2024-03-07T16:33:08.681Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.681Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.681Z]     
[2024-03-07T16:33:08.681Z]         :param func:
[2024-03-07T16:33:08.681Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.681Z]         :param when:
[2024-03-07T16:33:08.681Z]             The phase in which the function is called.
[2024-03-07T16:33:08.681Z]         :param reraise:
[2024-03-07T16:33:08.681Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.681Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.681Z]         """
[2024-03-07T16:33:08.681Z]         excinfo = None
[2024-03-07T16:33:08.681Z]         start = timing.time()
[2024-03-07T16:33:08.681Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.681Z]         try:
[2024-03-07T16:33:08.681Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.681Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.681Z]     )
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.681Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.681Z] kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.681Z]         """Call the hook.
[2024-03-07T16:33:08.681Z]     
[2024-03-07T16:33:08.681Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.681Z]         specification.
[2024-03-07T16:33:08.681Z]     
[2024-03-07T16:33:08.681Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.681Z]         :ref:`calling`.
[2024-03-07T16:33:08.681Z]         """
[2024-03-07T16:33:08.681Z]         assert (
[2024-03-07T16:33:08.681Z]             not self.is_historic()
[2024-03-07T16:33:08.681Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.681Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.681Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.681Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.681Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.681Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.681Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.681Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.681Z] kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z]     def _hookexec(
[2024-03-07T16:33:08.681Z]         self,
[2024-03-07T16:33:08.681Z]         hook_name: str,
[2024-03-07T16:33:08.681Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.681Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.681Z]         firstresult: bool,
[2024-03-07T16:33:08.681Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.681Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.681Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.681Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.681Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.681Z] 
[2024-03-07T16:33:08.681Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.682Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.682Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.682Z] 
[2024-03-07T16:33:08.682Z]     def _multicall(
[2024-03-07T16:33:08.682Z]         hook_name: str,
[2024-03-07T16:33:08.682Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.682Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.682Z]         firstresult: bool,
[2024-03-07T16:33:08.682Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.682Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.682Z]         result(s).
[2024-03-07T16:33:08.682Z]     
[2024-03-07T16:33:08.682Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.682Z]         """
[2024-03-07T16:33:08.682Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.682Z]         results: list[object] = []
[2024-03-07T16:33:08.682Z]         exception = None
[2024-03-07T16:33:08.682Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.682Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.682Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.682Z]             try:
[2024-03-07T16:33:08.682Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.682Z]                     try:
[2024-03-07T16:33:08.682Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.682Z]                     except KeyError:
[2024-03-07T16:33:08.682Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.682Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.682Z]                                 raise HookCallError(
[2024-03-07T16:33:08.682Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.682Z]                                 )
[2024-03-07T16:33:08.682Z]     
[2024-03-07T16:33:08.682Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.682Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.682Z]                         try:
[2024-03-07T16:33:08.682Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.682Z]                             # which is the desired response.
[2024-03-07T16:33:08.682Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.682Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.682Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.682Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.682Z]                         except StopIteration:
[2024-03-07T16:33:08.682Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.682Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.682Z]                         try:
[2024-03-07T16:33:08.682Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.682Z]                             # which is the desired response.
[2024-03-07T16:33:08.682Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.682Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.682Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.682Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.682Z]                         except StopIteration:
[2024-03-07T16:33:08.682Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.682Z]                     else:
[2024-03-07T16:33:08.682Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.682Z]                         if res is not None:
[2024-03-07T16:33:08.682Z]                             results.append(res)
[2024-03-07T16:33:08.682Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.682Z]                                 break
[2024-03-07T16:33:08.682Z]             except BaseException as exc:
[2024-03-07T16:33:08.682Z]                 exception = exc
[2024-03-07T16:33:08.682Z]         finally:
[2024-03-07T16:33:08.682Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.682Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.682Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.682Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.682Z]                 else:
[2024-03-07T16:33:08.682Z]                     result = results
[2024-03-07T16:33:08.682Z]     
[2024-03-07T16:33:08.682Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.682Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.682Z]                     try:
[2024-03-07T16:33:08.682Z]                         if exception is not None:
[2024-03-07T16:33:08.682Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.682Z]                         else:
[2024-03-07T16:33:08.682Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.682Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.682Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.682Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.682Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.682Z]                     except StopIteration as si:
[2024-03-07T16:33:08.682Z]                         result = si.value
[2024-03-07T16:33:08.682Z]                         exception = None
[2024-03-07T16:33:08.682Z]                         continue
[2024-03-07T16:33:08.682Z]                     except BaseException as e:
[2024-03-07T16:33:08.682Z]                         exception = e
[2024-03-07T16:33:08.682Z]                         continue
[2024-03-07T16:33:08.682Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.682Z]     
[2024-03-07T16:33:08.682Z]                 if exception is not None:
[2024-03-07T16:33:08.682Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.682Z] 
[2024-03-07T16:33:08.682Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.682Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.682Z] 
[2024-03-07T16:33:08.682Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.682Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.682Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.682Z] 
[2024-03-07T16:33:08.682Z]     def _multicall(
[2024-03-07T16:33:08.682Z]         hook_name: str,
[2024-03-07T16:33:08.682Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.682Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.682Z]         firstresult: bool,
[2024-03-07T16:33:08.682Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.682Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.682Z]         result(s).
[2024-03-07T16:33:08.682Z]     
[2024-03-07T16:33:08.682Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.682Z]         """
[2024-03-07T16:33:08.682Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.682Z]         results: list[object] = []
[2024-03-07T16:33:08.682Z]         exception = None
[2024-03-07T16:33:08.682Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.682Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.682Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.682Z]             try:
[2024-03-07T16:33:08.682Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.682Z]                     try:
[2024-03-07T16:33:08.682Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.682Z]                     except KeyError:
[2024-03-07T16:33:08.682Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.682Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.682Z]                                 raise HookCallError(
[2024-03-07T16:33:08.682Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.682Z]                                 )
[2024-03-07T16:33:08.682Z]     
[2024-03-07T16:33:08.682Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.682Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.682Z]                         try:
[2024-03-07T16:33:08.682Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.682Z]                             # which is the desired response.
[2024-03-07T16:33:08.682Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.682Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.682Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.682Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.682Z]                         except StopIteration:
[2024-03-07T16:33:08.682Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.682Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.682Z]                         try:
[2024-03-07T16:33:08.683Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.683Z]                             # which is the desired response.
[2024-03-07T16:33:08.683Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.683Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.683Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.683Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.683Z]                         except StopIteration:
[2024-03-07T16:33:08.683Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.683Z]                     else:
[2024-03-07T16:33:08.683Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.683Z]                         if res is not None:
[2024-03-07T16:33:08.683Z]                             results.append(res)
[2024-03-07T16:33:08.683Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.683Z]                                 break
[2024-03-07T16:33:08.683Z]             except BaseException as exc:
[2024-03-07T16:33:08.683Z]                 exception = exc
[2024-03-07T16:33:08.683Z]         finally:
[2024-03-07T16:33:08.683Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.683Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.683Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.683Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.683Z]                 else:
[2024-03-07T16:33:08.683Z]                     result = results
[2024-03-07T16:33:08.683Z]     
[2024-03-07T16:33:08.683Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.683Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.683Z]                     try:
[2024-03-07T16:33:08.683Z]                         if exception is not None:
[2024-03-07T16:33:08.683Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.683Z] 
[2024-03-07T16:33:08.683Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.683Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.683Z] 
[2024-03-07T16:33:08.683Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.683Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.683Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.683Z] 
[2024-03-07T16:33:08.683Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.683Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.683Z] 
[2024-03-07T16:33:08.683Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.683Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.683Z]             try:
[2024-03-07T16:33:08.683Z] >               yield
[2024-03-07T16:33:08.683Z] 
[2024-03-07T16:33:08.683Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.683Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.683Z] 
[2024-03-07T16:33:08.683Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.683Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.683Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.683Z] 
[2024-03-07T16:33:08.683Z]     def _multicall(
[2024-03-07T16:33:08.683Z]         hook_name: str,
[2024-03-07T16:33:08.683Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.683Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.683Z]         firstresult: bool,
[2024-03-07T16:33:08.683Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.683Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.683Z]         result(s).
[2024-03-07T16:33:08.683Z]     
[2024-03-07T16:33:08.683Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.683Z]         """
[2024-03-07T16:33:08.683Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.683Z]         results: list[object] = []
[2024-03-07T16:33:08.683Z]         exception = None
[2024-03-07T16:33:08.683Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.683Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.683Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.683Z]             try:
[2024-03-07T16:33:08.683Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.683Z]                     try:
[2024-03-07T16:33:08.683Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.683Z]                     except KeyError:
[2024-03-07T16:33:08.683Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.683Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.683Z]                                 raise HookCallError(
[2024-03-07T16:33:08.683Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.683Z]                                 )
[2024-03-07T16:33:08.683Z]     
[2024-03-07T16:33:08.683Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.683Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.683Z]                         try:
[2024-03-07T16:33:08.683Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.683Z]                             # which is the desired response.
[2024-03-07T16:33:08.683Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.683Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.683Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.683Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.683Z]                         except StopIteration:
[2024-03-07T16:33:08.683Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.683Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.683Z]                         try:
[2024-03-07T16:33:08.683Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.683Z]                             # which is the desired response.
[2024-03-07T16:33:08.683Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.683Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.683Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.683Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.683Z]                         except StopIteration:
[2024-03-07T16:33:08.683Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.683Z]                     else:
[2024-03-07T16:33:08.683Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.683Z]                         if res is not None:
[2024-03-07T16:33:08.683Z]                             results.append(res)
[2024-03-07T16:33:08.683Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.683Z]                                 break
[2024-03-07T16:33:08.683Z]             except BaseException as exc:
[2024-03-07T16:33:08.683Z]                 exception = exc
[2024-03-07T16:33:08.683Z]         finally:
[2024-03-07T16:33:08.683Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.683Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.683Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.683Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.683Z]                 else:
[2024-03-07T16:33:08.683Z]                     result = results
[2024-03-07T16:33:08.683Z]     
[2024-03-07T16:33:08.683Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.683Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.683Z]                     try:
[2024-03-07T16:33:08.683Z]                         if exception is not None:
[2024-03-07T16:33:08.683Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.683Z] 
[2024-03-07T16:33:08.683Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.683Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.683Z] 
[2024-03-07T16:33:08.683Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.683Z] item = <IPyNbCell Cell 4>
[2024-03-07T16:33:08.683Z] 
[2024-03-07T16:33:08.684Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.684Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.684Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.684Z]     
[2024-03-07T16:33:08.684Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.684Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.684Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.684Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.684Z] item = <IPyNbCell Cell 4>, when = 'setup'
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.684Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.684Z]         with catching_logs(
[2024-03-07T16:33:08.684Z]             self.caplog_handler,
[2024-03-07T16:33:08.684Z]             level=self.log_level,
[2024-03-07T16:33:08.684Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.684Z]             self.report_handler,
[2024-03-07T16:33:08.684Z]             level=self.log_level,
[2024-03-07T16:33:08.684Z]         ) as report_handler:
[2024-03-07T16:33:08.684Z]             caplog_handler.reset()
[2024-03-07T16:33:08.684Z]             report_handler.reset()
[2024-03-07T16:33:08.684Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.684Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.684Z]     
[2024-03-07T16:33:08.684Z]             try:
[2024-03-07T16:33:08.684Z] >               yield
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.684Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.684Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.684Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z]     def _multicall(
[2024-03-07T16:33:08.684Z]         hook_name: str,
[2024-03-07T16:33:08.684Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.684Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.684Z]         firstresult: bool,
[2024-03-07T16:33:08.684Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.684Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.684Z]         result(s).
[2024-03-07T16:33:08.684Z]     
[2024-03-07T16:33:08.684Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.684Z]         """
[2024-03-07T16:33:08.684Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.684Z]         results: list[object] = []
[2024-03-07T16:33:08.684Z]         exception = None
[2024-03-07T16:33:08.684Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.684Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.684Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.684Z]             try:
[2024-03-07T16:33:08.684Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.684Z]                     try:
[2024-03-07T16:33:08.684Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.684Z]                     except KeyError:
[2024-03-07T16:33:08.684Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.684Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.684Z]                                 raise HookCallError(
[2024-03-07T16:33:08.684Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.684Z]                                 )
[2024-03-07T16:33:08.684Z]     
[2024-03-07T16:33:08.684Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.684Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.684Z]                         try:
[2024-03-07T16:33:08.684Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.684Z]                             # which is the desired response.
[2024-03-07T16:33:08.684Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.684Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.684Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.684Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.684Z]                         except StopIteration:
[2024-03-07T16:33:08.684Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.684Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.684Z]                         try:
[2024-03-07T16:33:08.684Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.684Z]                             # which is the desired response.
[2024-03-07T16:33:08.684Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.684Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.684Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.684Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.684Z]                         except StopIteration:
[2024-03-07T16:33:08.684Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.684Z]                     else:
[2024-03-07T16:33:08.684Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.684Z]                         if res is not None:
[2024-03-07T16:33:08.684Z]                             results.append(res)
[2024-03-07T16:33:08.684Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.684Z]                                 break
[2024-03-07T16:33:08.684Z]             except BaseException as exc:
[2024-03-07T16:33:08.684Z]                 exception = exc
[2024-03-07T16:33:08.684Z]         finally:
[2024-03-07T16:33:08.684Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.684Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.684Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.684Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.684Z]                 else:
[2024-03-07T16:33:08.684Z]                     result = results
[2024-03-07T16:33:08.684Z]     
[2024-03-07T16:33:08.684Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.684Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.684Z]                     try:
[2024-03-07T16:33:08.684Z]                         if exception is not None:
[2024-03-07T16:33:08.684Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.684Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.684Z] item = <IPyNbCell Cell 4>
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.684Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.684Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.684Z] >           return (yield)
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.684Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.684Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.684Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.684Z] 
[2024-03-07T16:33:08.684Z]     def _multicall(
[2024-03-07T16:33:08.684Z]         hook_name: str,
[2024-03-07T16:33:08.684Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.684Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.684Z]         firstresult: bool,
[2024-03-07T16:33:08.684Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.684Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.684Z]         result(s).
[2024-03-07T16:33:08.684Z]     
[2024-03-07T16:33:08.684Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.684Z]         """
[2024-03-07T16:33:08.684Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.685Z]         results: list[object] = []
[2024-03-07T16:33:08.685Z]         exception = None
[2024-03-07T16:33:08.685Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.685Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.685Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.685Z]             try:
[2024-03-07T16:33:08.685Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.685Z]                     try:
[2024-03-07T16:33:08.685Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.685Z]                     except KeyError:
[2024-03-07T16:33:08.685Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.685Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.685Z]                                 raise HookCallError(
[2024-03-07T16:33:08.685Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.685Z]                                 )
[2024-03-07T16:33:08.685Z]     
[2024-03-07T16:33:08.685Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.685Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.685Z]                         try:
[2024-03-07T16:33:08.685Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.685Z]                             # which is the desired response.
[2024-03-07T16:33:08.685Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.685Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.685Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.685Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.685Z]                         except StopIteration:
[2024-03-07T16:33:08.685Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.685Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.685Z]                         try:
[2024-03-07T16:33:08.685Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.685Z]                             # which is the desired response.
[2024-03-07T16:33:08.685Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.685Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.685Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.685Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.685Z]                         except StopIteration:
[2024-03-07T16:33:08.685Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.685Z]                     else:
[2024-03-07T16:33:08.685Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.685Z]                         if res is not None:
[2024-03-07T16:33:08.685Z]                             results.append(res)
[2024-03-07T16:33:08.685Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.685Z]                                 break
[2024-03-07T16:33:08.685Z]             except BaseException as exc:
[2024-03-07T16:33:08.685Z]                 exception = exc
[2024-03-07T16:33:08.685Z]         finally:
[2024-03-07T16:33:08.685Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.685Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.685Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.685Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.685Z]                 else:
[2024-03-07T16:33:08.685Z]                     result = results
[2024-03-07T16:33:08.685Z]     
[2024-03-07T16:33:08.685Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.685Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.685Z]                     try:
[2024-03-07T16:33:08.685Z]                         if exception is not None:
[2024-03-07T16:33:08.685Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.685Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.685Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.685Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.685Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.685Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.685Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.685Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.685Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.685Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.685Z]             try:
[2024-03-07T16:33:08.685Z] >               yield
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.685Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.685Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.685Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.685Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.685Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.685Z]     def _multicall(
[2024-03-07T16:33:08.685Z]         hook_name: str,
[2024-03-07T16:33:08.685Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.685Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.685Z]         firstresult: bool,
[2024-03-07T16:33:08.685Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.685Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.685Z]         result(s).
[2024-03-07T16:33:08.685Z]     
[2024-03-07T16:33:08.685Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.685Z]         """
[2024-03-07T16:33:08.685Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.685Z]         results: list[object] = []
[2024-03-07T16:33:08.685Z]         exception = None
[2024-03-07T16:33:08.685Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.685Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.685Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.685Z]             try:
[2024-03-07T16:33:08.685Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.685Z]                     try:
[2024-03-07T16:33:08.685Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.685Z]                     except KeyError:
[2024-03-07T16:33:08.685Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.685Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.685Z]                                 raise HookCallError(
[2024-03-07T16:33:08.685Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.685Z]                                 )
[2024-03-07T16:33:08.685Z]     
[2024-03-07T16:33:08.685Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.685Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.685Z]                         try:
[2024-03-07T16:33:08.685Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.685Z]                             # which is the desired response.
[2024-03-07T16:33:08.685Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.685Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.685Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.685Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.685Z]                         except StopIteration:
[2024-03-07T16:33:08.685Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.685Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.685Z]                         try:
[2024-03-07T16:33:08.685Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.685Z]                             # which is the desired response.
[2024-03-07T16:33:08.685Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.685Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.685Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.685Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.685Z]                         except StopIteration:
[2024-03-07T16:33:08.685Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.685Z]                     else:
[2024-03-07T16:33:08.685Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.685Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.685Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.685Z] item = <IPyNbCell Cell 4>
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.685Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.685Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.685Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.685Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.685Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.685Z] 
[2024-03-07T16:33:08.686Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.686Z] item = <IPyNbCell Cell 4>
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.686Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.686Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.686Z]     
[2024-03-07T16:33:08.686Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.686Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.686Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.686Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.686Z]             if exc:
[2024-03-07T16:33:08.686Z] >               raise exc
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.686Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.686Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0ab86f15a0>
[2024-03-07T16:33:08.686Z] when = 'setup'
[2024-03-07T16:33:08.686Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z]     @classmethod
[2024-03-07T16:33:08.686Z]     def from_call(
[2024-03-07T16:33:08.686Z]         cls,
[2024-03-07T16:33:08.686Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.686Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.686Z]         reraise: Optional[
[2024-03-07T16:33:08.686Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.686Z]         ] = None,
[2024-03-07T16:33:08.686Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.686Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.686Z]     
[2024-03-07T16:33:08.686Z]         :param func:
[2024-03-07T16:33:08.686Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.686Z]         :param when:
[2024-03-07T16:33:08.686Z]             The phase in which the function is called.
[2024-03-07T16:33:08.686Z]         :param reraise:
[2024-03-07T16:33:08.686Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.686Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.686Z]         """
[2024-03-07T16:33:08.686Z]         excinfo = None
[2024-03-07T16:33:08.686Z]         start = timing.time()
[2024-03-07T16:33:08.686Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.686Z]         try:
[2024-03-07T16:33:08.686Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.686Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.686Z]     )
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.686Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.686Z] kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.686Z]         """Call the hook.
[2024-03-07T16:33:08.686Z]     
[2024-03-07T16:33:08.686Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.686Z]         specification.
[2024-03-07T16:33:08.686Z]     
[2024-03-07T16:33:08.686Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.686Z]         :ref:`calling`.
[2024-03-07T16:33:08.686Z]         """
[2024-03-07T16:33:08.686Z]         assert (
[2024-03-07T16:33:08.686Z]             not self.is_historic()
[2024-03-07T16:33:08.686Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.686Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.686Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.686Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.686Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.686Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.686Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.686Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.686Z] kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z]     def _hookexec(
[2024-03-07T16:33:08.686Z]         self,
[2024-03-07T16:33:08.686Z]         hook_name: str,
[2024-03-07T16:33:08.686Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.686Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.686Z]         firstresult: bool,
[2024-03-07T16:33:08.686Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.686Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.686Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.686Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.686Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.686Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.686Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.686Z] 
[2024-03-07T16:33:08.686Z]     def _multicall(
[2024-03-07T16:33:08.686Z]         hook_name: str,
[2024-03-07T16:33:08.686Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.686Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.686Z]         firstresult: bool,
[2024-03-07T16:33:08.686Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.686Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.686Z]         result(s).
[2024-03-07T16:33:08.686Z]     
[2024-03-07T16:33:08.686Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.686Z]         """
[2024-03-07T16:33:08.686Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.686Z]         results: list[object] = []
[2024-03-07T16:33:08.686Z]         exception = None
[2024-03-07T16:33:08.686Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.686Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.686Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.686Z]             try:
[2024-03-07T16:33:08.686Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.686Z]                     try:
[2024-03-07T16:33:08.686Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.686Z]                     except KeyError:
[2024-03-07T16:33:08.686Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.686Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.686Z]                                 raise HookCallError(
[2024-03-07T16:33:08.686Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.686Z]                                 )
[2024-03-07T16:33:08.686Z]     
[2024-03-07T16:33:08.686Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.686Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.686Z]                         try:
[2024-03-07T16:33:08.686Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.686Z]                             # which is the desired response.
[2024-03-07T16:33:08.686Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.686Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.686Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.686Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.686Z]                         except StopIteration:
[2024-03-07T16:33:08.686Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.686Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.686Z]                         try:
[2024-03-07T16:33:08.686Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.686Z]                             # which is the desired response.
[2024-03-07T16:33:08.686Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.686Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.686Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.686Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.686Z]                         except StopIteration:
[2024-03-07T16:33:08.687Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.687Z]                     else:
[2024-03-07T16:33:08.687Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.687Z]                         if res is not None:
[2024-03-07T16:33:08.687Z]                             results.append(res)
[2024-03-07T16:33:08.687Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.687Z]                                 break
[2024-03-07T16:33:08.687Z]             except BaseException as exc:
[2024-03-07T16:33:08.687Z]                 exception = exc
[2024-03-07T16:33:08.687Z]         finally:
[2024-03-07T16:33:08.687Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.687Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.687Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.687Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.687Z]                 else:
[2024-03-07T16:33:08.687Z]                     result = results
[2024-03-07T16:33:08.687Z]     
[2024-03-07T16:33:08.687Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.687Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.687Z]                     try:
[2024-03-07T16:33:08.687Z]                         if exception is not None:
[2024-03-07T16:33:08.687Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.687Z]                         else:
[2024-03-07T16:33:08.687Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.687Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.687Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.687Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.687Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.687Z]                     except StopIteration as si:
[2024-03-07T16:33:08.687Z]                         result = si.value
[2024-03-07T16:33:08.687Z]                         exception = None
[2024-03-07T16:33:08.687Z]                         continue
[2024-03-07T16:33:08.687Z]                     except BaseException as e:
[2024-03-07T16:33:08.687Z]                         exception = e
[2024-03-07T16:33:08.687Z]                         continue
[2024-03-07T16:33:08.687Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.687Z]     
[2024-03-07T16:33:08.687Z]                 if exception is not None:
[2024-03-07T16:33:08.687Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.687Z] 
[2024-03-07T16:33:08.687Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.687Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.687Z] 
[2024-03-07T16:33:08.687Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.687Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.687Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.687Z] 
[2024-03-07T16:33:08.687Z]     def _multicall(
[2024-03-07T16:33:08.687Z]         hook_name: str,
[2024-03-07T16:33:08.687Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.687Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.687Z]         firstresult: bool,
[2024-03-07T16:33:08.687Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.687Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.687Z]         result(s).
[2024-03-07T16:33:08.687Z]     
[2024-03-07T16:33:08.687Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.687Z]         """
[2024-03-07T16:33:08.687Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.687Z]         results: list[object] = []
[2024-03-07T16:33:08.687Z]         exception = None
[2024-03-07T16:33:08.687Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.687Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.687Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.687Z]             try:
[2024-03-07T16:33:08.687Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.687Z]                     try:
[2024-03-07T16:33:08.687Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.687Z]                     except KeyError:
[2024-03-07T16:33:08.687Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.687Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.687Z]                                 raise HookCallError(
[2024-03-07T16:33:08.687Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.687Z]                                 )
[2024-03-07T16:33:08.687Z]     
[2024-03-07T16:33:08.687Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.687Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.687Z]                         try:
[2024-03-07T16:33:08.687Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.687Z]                             # which is the desired response.
[2024-03-07T16:33:08.687Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.687Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.687Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.687Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.687Z]                         except StopIteration:
[2024-03-07T16:33:08.687Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.687Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.687Z]                         try:
[2024-03-07T16:33:08.687Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.687Z]                             # which is the desired response.
[2024-03-07T16:33:08.687Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.687Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.687Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.687Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.687Z]                         except StopIteration:
[2024-03-07T16:33:08.687Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.687Z]                     else:
[2024-03-07T16:33:08.687Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.687Z]                         if res is not None:
[2024-03-07T16:33:08.687Z]                             results.append(res)
[2024-03-07T16:33:08.687Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.687Z]                                 break
[2024-03-07T16:33:08.687Z]             except BaseException as exc:
[2024-03-07T16:33:08.687Z]                 exception = exc
[2024-03-07T16:33:08.687Z]         finally:
[2024-03-07T16:33:08.687Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.687Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.687Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.687Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.687Z]                 else:
[2024-03-07T16:33:08.687Z]                     result = results
[2024-03-07T16:33:08.687Z]     
[2024-03-07T16:33:08.687Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.687Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.687Z]                     try:
[2024-03-07T16:33:08.687Z]                         if exception is not None:
[2024-03-07T16:33:08.687Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.687Z] 
[2024-03-07T16:33:08.687Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.687Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.687Z] 
[2024-03-07T16:33:08.687Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.687Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.687Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.687Z] 
[2024-03-07T16:33:08.687Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.687Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.687Z] 
[2024-03-07T16:33:08.687Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.687Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.687Z]             try:
[2024-03-07T16:33:08.687Z] >               yield
[2024-03-07T16:33:08.687Z] 
[2024-03-07T16:33:08.687Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.687Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.687Z] 
[2024-03-07T16:33:08.687Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.687Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.687Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.687Z] 
[2024-03-07T16:33:08.687Z]     def _multicall(
[2024-03-07T16:33:08.688Z]         hook_name: str,
[2024-03-07T16:33:08.688Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.688Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.688Z]         firstresult: bool,
[2024-03-07T16:33:08.688Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.688Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.688Z]         result(s).
[2024-03-07T16:33:08.688Z]     
[2024-03-07T16:33:08.688Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.688Z]         """
[2024-03-07T16:33:08.688Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.688Z]         results: list[object] = []
[2024-03-07T16:33:08.688Z]         exception = None
[2024-03-07T16:33:08.688Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.688Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.688Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.688Z]             try:
[2024-03-07T16:33:08.688Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.688Z]                     try:
[2024-03-07T16:33:08.688Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.688Z]                     except KeyError:
[2024-03-07T16:33:08.688Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.688Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.688Z]                                 raise HookCallError(
[2024-03-07T16:33:08.688Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.688Z]                                 )
[2024-03-07T16:33:08.688Z]     
[2024-03-07T16:33:08.688Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.688Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.688Z]                         try:
[2024-03-07T16:33:08.688Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.688Z]                             # which is the desired response.
[2024-03-07T16:33:08.688Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.688Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.688Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.688Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.688Z]                         except StopIteration:
[2024-03-07T16:33:08.688Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.688Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.688Z]                         try:
[2024-03-07T16:33:08.688Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.688Z]                             # which is the desired response.
[2024-03-07T16:33:08.688Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.688Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.688Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.688Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.688Z]                         except StopIteration:
[2024-03-07T16:33:08.688Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.688Z]                     else:
[2024-03-07T16:33:08.688Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.688Z]                         if res is not None:
[2024-03-07T16:33:08.688Z]                             results.append(res)
[2024-03-07T16:33:08.688Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.688Z]                                 break
[2024-03-07T16:33:08.688Z]             except BaseException as exc:
[2024-03-07T16:33:08.688Z]                 exception = exc
[2024-03-07T16:33:08.688Z]         finally:
[2024-03-07T16:33:08.688Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.688Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.688Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.688Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.688Z]                 else:
[2024-03-07T16:33:08.688Z]                     result = results
[2024-03-07T16:33:08.688Z]     
[2024-03-07T16:33:08.688Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.688Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.688Z]                     try:
[2024-03-07T16:33:08.688Z]                         if exception is not None:
[2024-03-07T16:33:08.688Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.688Z] 
[2024-03-07T16:33:08.688Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.688Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.688Z] 
[2024-03-07T16:33:08.688Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.688Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.688Z] 
[2024-03-07T16:33:08.688Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.688Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.688Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.688Z]     
[2024-03-07T16:33:08.688Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.688Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.688Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.688Z] 
[2024-03-07T16:33:08.688Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.688Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.688Z] 
[2024-03-07T16:33:08.688Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.688Z] item = <IPyNbCell Cell 3>, when = 'setup'
[2024-03-07T16:33:08.688Z] 
[2024-03-07T16:33:08.688Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.688Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.688Z]         with catching_logs(
[2024-03-07T16:33:08.688Z]             self.caplog_handler,
[2024-03-07T16:33:08.688Z]             level=self.log_level,
[2024-03-07T16:33:08.688Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.688Z]             self.report_handler,
[2024-03-07T16:33:08.688Z]             level=self.log_level,
[2024-03-07T16:33:08.688Z]         ) as report_handler:
[2024-03-07T16:33:08.688Z]             caplog_handler.reset()
[2024-03-07T16:33:08.688Z]             report_handler.reset()
[2024-03-07T16:33:08.688Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.688Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.688Z]     
[2024-03-07T16:33:08.688Z]             try:
[2024-03-07T16:33:08.688Z] >               yield
[2024-03-07T16:33:08.688Z] 
[2024-03-07T16:33:08.688Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.688Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.688Z] 
[2024-03-07T16:33:08.688Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.688Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.688Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.688Z] 
[2024-03-07T16:33:08.688Z]     def _multicall(
[2024-03-07T16:33:08.688Z]         hook_name: str,
[2024-03-07T16:33:08.688Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.688Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.688Z]         firstresult: bool,
[2024-03-07T16:33:08.688Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.688Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.688Z]         result(s).
[2024-03-07T16:33:08.688Z]     
[2024-03-07T16:33:08.688Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.688Z]         """
[2024-03-07T16:33:08.688Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.688Z]         results: list[object] = []
[2024-03-07T16:33:08.688Z]         exception = None
[2024-03-07T16:33:08.688Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.688Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.688Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.688Z]             try:
[2024-03-07T16:33:08.688Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.688Z]                     try:
[2024-03-07T16:33:08.688Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.688Z]                     except KeyError:
[2024-03-07T16:33:08.688Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.688Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.688Z]                                 raise HookCallError(
[2024-03-07T16:33:08.688Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.688Z]                                 )
[2024-03-07T16:33:08.688Z]     
[2024-03-07T16:33:08.688Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.688Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.688Z]                         try:
[2024-03-07T16:33:08.688Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.688Z]                             # which is the desired response.
[2024-03-07T16:33:08.688Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.688Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.689Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.689Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.689Z]                         except StopIteration:
[2024-03-07T16:33:08.689Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.689Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.689Z]                         try:
[2024-03-07T16:33:08.689Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.689Z]                             # which is the desired response.
[2024-03-07T16:33:08.689Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.689Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.689Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.689Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.689Z]                         except StopIteration:
[2024-03-07T16:33:08.689Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.689Z]                     else:
[2024-03-07T16:33:08.689Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.689Z]                         if res is not None:
[2024-03-07T16:33:08.689Z]                             results.append(res)
[2024-03-07T16:33:08.689Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.689Z]                                 break
[2024-03-07T16:33:08.689Z]             except BaseException as exc:
[2024-03-07T16:33:08.689Z]                 exception = exc
[2024-03-07T16:33:08.689Z]         finally:
[2024-03-07T16:33:08.689Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.689Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.689Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.689Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.689Z]                 else:
[2024-03-07T16:33:08.689Z]                     result = results
[2024-03-07T16:33:08.689Z]     
[2024-03-07T16:33:08.689Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.689Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.689Z]                     try:
[2024-03-07T16:33:08.689Z]                         if exception is not None:
[2024-03-07T16:33:08.689Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.689Z] 
[2024-03-07T16:33:08.689Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.689Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.689Z] 
[2024-03-07T16:33:08.689Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.689Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.689Z] 
[2024-03-07T16:33:08.689Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.689Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.689Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.689Z] >           return (yield)
[2024-03-07T16:33:08.689Z] 
[2024-03-07T16:33:08.689Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.689Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.689Z] 
[2024-03-07T16:33:08.689Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.689Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.689Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.689Z] 
[2024-03-07T16:33:08.689Z]     def _multicall(
[2024-03-07T16:33:08.689Z]         hook_name: str,
[2024-03-07T16:33:08.689Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.689Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.689Z]         firstresult: bool,
[2024-03-07T16:33:08.689Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.689Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.689Z]         result(s).
[2024-03-07T16:33:08.689Z]     
[2024-03-07T16:33:08.689Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.689Z]         """
[2024-03-07T16:33:08.689Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.689Z]         results: list[object] = []
[2024-03-07T16:33:08.689Z]         exception = None
[2024-03-07T16:33:08.689Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.689Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.689Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.689Z]             try:
[2024-03-07T16:33:08.689Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.689Z]                     try:
[2024-03-07T16:33:08.689Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.689Z]                     except KeyError:
[2024-03-07T16:33:08.689Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.689Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.689Z]                                 raise HookCallError(
[2024-03-07T16:33:08.689Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.689Z]                                 )
[2024-03-07T16:33:08.689Z]     
[2024-03-07T16:33:08.689Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.689Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.689Z]                         try:
[2024-03-07T16:33:08.689Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.689Z]                             # which is the desired response.
[2024-03-07T16:33:08.689Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.689Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.689Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.689Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.689Z]                         except StopIteration:
[2024-03-07T16:33:08.689Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.689Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.689Z]                         try:
[2024-03-07T16:33:08.689Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.689Z]                             # which is the desired response.
[2024-03-07T16:33:08.689Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.689Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.689Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.689Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.689Z]                         except StopIteration:
[2024-03-07T16:33:08.689Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.689Z]                     else:
[2024-03-07T16:33:08.689Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.689Z]                         if res is not None:
[2024-03-07T16:33:08.689Z]                             results.append(res)
[2024-03-07T16:33:08.689Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.689Z]                                 break
[2024-03-07T16:33:08.689Z]             except BaseException as exc:
[2024-03-07T16:33:08.689Z]                 exception = exc
[2024-03-07T16:33:08.689Z]         finally:
[2024-03-07T16:33:08.689Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.689Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.689Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.689Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.689Z]                 else:
[2024-03-07T16:33:08.689Z]                     result = results
[2024-03-07T16:33:08.689Z]     
[2024-03-07T16:33:08.689Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.689Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.689Z]                     try:
[2024-03-07T16:33:08.689Z]                         if exception is not None:
[2024-03-07T16:33:08.689Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.689Z] 
[2024-03-07T16:33:08.689Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.689Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.689Z] 
[2024-03-07T16:33:08.689Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.689Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.689Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.689Z] 
[2024-03-07T16:33:08.690Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.690Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.690Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.690Z]             try:
[2024-03-07T16:33:08.690Z] >               yield
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.690Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.690Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.690Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z]     def _multicall(
[2024-03-07T16:33:08.690Z]         hook_name: str,
[2024-03-07T16:33:08.690Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.690Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.690Z]         firstresult: bool,
[2024-03-07T16:33:08.690Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.690Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.690Z]         result(s).
[2024-03-07T16:33:08.690Z]     
[2024-03-07T16:33:08.690Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.690Z]         """
[2024-03-07T16:33:08.690Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.690Z]         results: list[object] = []
[2024-03-07T16:33:08.690Z]         exception = None
[2024-03-07T16:33:08.690Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.690Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.690Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.690Z]             try:
[2024-03-07T16:33:08.690Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.690Z]                     try:
[2024-03-07T16:33:08.690Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.690Z]                     except KeyError:
[2024-03-07T16:33:08.690Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.690Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.690Z]                                 raise HookCallError(
[2024-03-07T16:33:08.690Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.690Z]                                 )
[2024-03-07T16:33:08.690Z]     
[2024-03-07T16:33:08.690Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.690Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.690Z]                         try:
[2024-03-07T16:33:08.690Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.690Z]                             # which is the desired response.
[2024-03-07T16:33:08.690Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.690Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.690Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.690Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.690Z]                         except StopIteration:
[2024-03-07T16:33:08.690Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.690Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.690Z]                         try:
[2024-03-07T16:33:08.690Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.690Z]                             # which is the desired response.
[2024-03-07T16:33:08.690Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.690Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.690Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.690Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.690Z]                         except StopIteration:
[2024-03-07T16:33:08.690Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.690Z]                     else:
[2024-03-07T16:33:08.690Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.690Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.690Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.690Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.690Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.690Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.690Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.690Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.690Z]     
[2024-03-07T16:33:08.690Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.690Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.690Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.690Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.690Z]             if exc:
[2024-03-07T16:33:08.690Z] >               raise exc
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.690Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.690Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abbb08550>
[2024-03-07T16:33:08.690Z] when = 'setup'
[2024-03-07T16:33:08.690Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z]     @classmethod
[2024-03-07T16:33:08.690Z]     def from_call(
[2024-03-07T16:33:08.690Z]         cls,
[2024-03-07T16:33:08.690Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.690Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.690Z]         reraise: Optional[
[2024-03-07T16:33:08.690Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.690Z]         ] = None,
[2024-03-07T16:33:08.690Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.690Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.690Z]     
[2024-03-07T16:33:08.690Z]         :param func:
[2024-03-07T16:33:08.690Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.690Z]         :param when:
[2024-03-07T16:33:08.690Z]             The phase in which the function is called.
[2024-03-07T16:33:08.690Z]         :param reraise:
[2024-03-07T16:33:08.690Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.690Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.690Z]         """
[2024-03-07T16:33:08.690Z]         excinfo = None
[2024-03-07T16:33:08.690Z]         start = timing.time()
[2024-03-07T16:33:08.690Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.690Z]         try:
[2024-03-07T16:33:08.690Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.690Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.690Z]     )
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.690Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.690Z] kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.690Z] 
[2024-03-07T16:33:08.690Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.690Z]         """Call the hook.
[2024-03-07T16:33:08.690Z]     
[2024-03-07T16:33:08.690Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.691Z]         specification.
[2024-03-07T16:33:08.691Z]     
[2024-03-07T16:33:08.691Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.691Z]         :ref:`calling`.
[2024-03-07T16:33:08.691Z]         """
[2024-03-07T16:33:08.691Z]         assert (
[2024-03-07T16:33:08.691Z]             not self.is_historic()
[2024-03-07T16:33:08.691Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.691Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.691Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.691Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.691Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.691Z] 
[2024-03-07T16:33:08.691Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.691Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.691Z] 
[2024-03-07T16:33:08.691Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.691Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.691Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.691Z] kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.691Z] 
[2024-03-07T16:33:08.691Z]     def _hookexec(
[2024-03-07T16:33:08.691Z]         self,
[2024-03-07T16:33:08.691Z]         hook_name: str,
[2024-03-07T16:33:08.691Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.691Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.691Z]         firstresult: bool,
[2024-03-07T16:33:08.691Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.691Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.691Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.691Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.691Z] 
[2024-03-07T16:33:08.691Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.691Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.691Z] 
[2024-03-07T16:33:08.691Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.691Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.691Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.691Z] 
[2024-03-07T16:33:08.691Z]     def _multicall(
[2024-03-07T16:33:08.691Z]         hook_name: str,
[2024-03-07T16:33:08.691Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.691Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.691Z]         firstresult: bool,
[2024-03-07T16:33:08.691Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.691Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.691Z]         result(s).
[2024-03-07T16:33:08.691Z]     
[2024-03-07T16:33:08.691Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.691Z]         """
[2024-03-07T16:33:08.691Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.691Z]         results: list[object] = []
[2024-03-07T16:33:08.691Z]         exception = None
[2024-03-07T16:33:08.691Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.691Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.691Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.691Z]             try:
[2024-03-07T16:33:08.691Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.691Z]                     try:
[2024-03-07T16:33:08.691Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.691Z]                     except KeyError:
[2024-03-07T16:33:08.691Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.691Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.691Z]                                 raise HookCallError(
[2024-03-07T16:33:08.691Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.691Z]                                 )
[2024-03-07T16:33:08.691Z]     
[2024-03-07T16:33:08.691Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.691Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.691Z]                         try:
[2024-03-07T16:33:08.691Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.691Z]                             # which is the desired response.
[2024-03-07T16:33:08.691Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.691Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.691Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.691Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.691Z]                         except StopIteration:
[2024-03-07T16:33:08.691Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.691Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.691Z]                         try:
[2024-03-07T16:33:08.691Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.691Z]                             # which is the desired response.
[2024-03-07T16:33:08.691Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.691Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.691Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.691Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.691Z]                         except StopIteration:
[2024-03-07T16:33:08.691Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.691Z]                     else:
[2024-03-07T16:33:08.691Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.691Z]                         if res is not None:
[2024-03-07T16:33:08.691Z]                             results.append(res)
[2024-03-07T16:33:08.691Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.691Z]                                 break
[2024-03-07T16:33:08.691Z]             except BaseException as exc:
[2024-03-07T16:33:08.691Z]                 exception = exc
[2024-03-07T16:33:08.691Z]         finally:
[2024-03-07T16:33:08.691Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.691Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.691Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.691Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.691Z]                 else:
[2024-03-07T16:33:08.691Z]                     result = results
[2024-03-07T16:33:08.691Z]     
[2024-03-07T16:33:08.691Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.691Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.691Z]                     try:
[2024-03-07T16:33:08.691Z]                         if exception is not None:
[2024-03-07T16:33:08.691Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.691Z]                         else:
[2024-03-07T16:33:08.691Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.691Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.691Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.691Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.691Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.691Z]                     except StopIteration as si:
[2024-03-07T16:33:08.691Z]                         result = si.value
[2024-03-07T16:33:08.691Z]                         exception = None
[2024-03-07T16:33:08.691Z]                         continue
[2024-03-07T16:33:08.691Z]                     except BaseException as e:
[2024-03-07T16:33:08.691Z]                         exception = e
[2024-03-07T16:33:08.691Z]                         continue
[2024-03-07T16:33:08.691Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.691Z]     
[2024-03-07T16:33:08.691Z]                 if exception is not None:
[2024-03-07T16:33:08.691Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.691Z] 
[2024-03-07T16:33:08.691Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.691Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.691Z] 
[2024-03-07T16:33:08.691Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.691Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.691Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.691Z] 
[2024-03-07T16:33:08.691Z]     def _multicall(
[2024-03-07T16:33:08.691Z]         hook_name: str,
[2024-03-07T16:33:08.691Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.691Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.691Z]         firstresult: bool,
[2024-03-07T16:33:08.691Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.691Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.691Z]         result(s).
[2024-03-07T16:33:08.691Z]     
[2024-03-07T16:33:08.691Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.692Z]         """
[2024-03-07T16:33:08.692Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.692Z]         results: list[object] = []
[2024-03-07T16:33:08.692Z]         exception = None
[2024-03-07T16:33:08.692Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.692Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.692Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.692Z]             try:
[2024-03-07T16:33:08.692Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.692Z]                     try:
[2024-03-07T16:33:08.692Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.692Z]                     except KeyError:
[2024-03-07T16:33:08.692Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.692Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.692Z]                                 raise HookCallError(
[2024-03-07T16:33:08.692Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.692Z]                                 )
[2024-03-07T16:33:08.692Z]     
[2024-03-07T16:33:08.692Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.692Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.692Z]                         try:
[2024-03-07T16:33:08.692Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.692Z]                             # which is the desired response.
[2024-03-07T16:33:08.692Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.692Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.692Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.692Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.692Z]                         except StopIteration:
[2024-03-07T16:33:08.692Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.692Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.692Z]                         try:
[2024-03-07T16:33:08.692Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.692Z]                             # which is the desired response.
[2024-03-07T16:33:08.692Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.692Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.692Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.692Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.692Z]                         except StopIteration:
[2024-03-07T16:33:08.692Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.692Z]                     else:
[2024-03-07T16:33:08.692Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.692Z]                         if res is not None:
[2024-03-07T16:33:08.692Z]                             results.append(res)
[2024-03-07T16:33:08.692Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.692Z]                                 break
[2024-03-07T16:33:08.692Z]             except BaseException as exc:
[2024-03-07T16:33:08.692Z]                 exception = exc
[2024-03-07T16:33:08.692Z]         finally:
[2024-03-07T16:33:08.692Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.692Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.692Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.692Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.692Z]                 else:
[2024-03-07T16:33:08.692Z]                     result = results
[2024-03-07T16:33:08.692Z]     
[2024-03-07T16:33:08.692Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.692Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.692Z]                     try:
[2024-03-07T16:33:08.692Z]                         if exception is not None:
[2024-03-07T16:33:08.692Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.692Z] 
[2024-03-07T16:33:08.692Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.692Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.692Z] 
[2024-03-07T16:33:08.692Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.692Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.692Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.692Z] 
[2024-03-07T16:33:08.692Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.692Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.692Z] 
[2024-03-07T16:33:08.692Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.692Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.692Z]             try:
[2024-03-07T16:33:08.692Z] >               yield
[2024-03-07T16:33:08.692Z] 
[2024-03-07T16:33:08.692Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.692Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.692Z] 
[2024-03-07T16:33:08.692Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.692Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.692Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.692Z] 
[2024-03-07T16:33:08.692Z]     def _multicall(
[2024-03-07T16:33:08.692Z]         hook_name: str,
[2024-03-07T16:33:08.692Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.692Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.692Z]         firstresult: bool,
[2024-03-07T16:33:08.692Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.692Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.692Z]         result(s).
[2024-03-07T16:33:08.692Z]     
[2024-03-07T16:33:08.692Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.692Z]         """
[2024-03-07T16:33:08.692Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.692Z]         results: list[object] = []
[2024-03-07T16:33:08.692Z]         exception = None
[2024-03-07T16:33:08.692Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.692Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.692Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.692Z]             try:
[2024-03-07T16:33:08.692Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.692Z]                     try:
[2024-03-07T16:33:08.692Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.692Z]                     except KeyError:
[2024-03-07T16:33:08.692Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.692Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.692Z]                                 raise HookCallError(
[2024-03-07T16:33:08.692Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.692Z]                                 )
[2024-03-07T16:33:08.692Z]     
[2024-03-07T16:33:08.692Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.692Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.692Z]                         try:
[2024-03-07T16:33:08.692Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.692Z]                             # which is the desired response.
[2024-03-07T16:33:08.692Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.692Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.692Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.692Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.692Z]                         except StopIteration:
[2024-03-07T16:33:08.692Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.692Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.692Z]                         try:
[2024-03-07T16:33:08.692Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.692Z]                             # which is the desired response.
[2024-03-07T16:33:08.692Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.692Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.692Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.692Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.692Z]                         except StopIteration:
[2024-03-07T16:33:08.692Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.692Z]                     else:
[2024-03-07T16:33:08.692Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.692Z]                         if res is not None:
[2024-03-07T16:33:08.692Z]                             results.append(res)
[2024-03-07T16:33:08.692Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.692Z]                                 break
[2024-03-07T16:33:08.692Z]             except BaseException as exc:
[2024-03-07T16:33:08.693Z]                 exception = exc
[2024-03-07T16:33:08.693Z]         finally:
[2024-03-07T16:33:08.693Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.693Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.693Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.693Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.693Z]                 else:
[2024-03-07T16:33:08.693Z]                     result = results
[2024-03-07T16:33:08.693Z]     
[2024-03-07T16:33:08.693Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.693Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.693Z]                     try:
[2024-03-07T16:33:08.693Z]                         if exception is not None:
[2024-03-07T16:33:08.693Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.693Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.693Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.693Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.693Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.693Z]     
[2024-03-07T16:33:08.693Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.693Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.693Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.693Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.693Z] item = <IPyNbCell Cell 2>, when = 'setup'
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.693Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.693Z]         with catching_logs(
[2024-03-07T16:33:08.693Z]             self.caplog_handler,
[2024-03-07T16:33:08.693Z]             level=self.log_level,
[2024-03-07T16:33:08.693Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.693Z]             self.report_handler,
[2024-03-07T16:33:08.693Z]             level=self.log_level,
[2024-03-07T16:33:08.693Z]         ) as report_handler:
[2024-03-07T16:33:08.693Z]             caplog_handler.reset()
[2024-03-07T16:33:08.693Z]             report_handler.reset()
[2024-03-07T16:33:08.693Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.693Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.693Z]     
[2024-03-07T16:33:08.693Z]             try:
[2024-03-07T16:33:08.693Z] >               yield
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.693Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.693Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.693Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z]     def _multicall(
[2024-03-07T16:33:08.693Z]         hook_name: str,
[2024-03-07T16:33:08.693Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.693Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.693Z]         firstresult: bool,
[2024-03-07T16:33:08.693Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.693Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.693Z]         result(s).
[2024-03-07T16:33:08.693Z]     
[2024-03-07T16:33:08.693Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.693Z]         """
[2024-03-07T16:33:08.693Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.693Z]         results: list[object] = []
[2024-03-07T16:33:08.693Z]         exception = None
[2024-03-07T16:33:08.693Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.693Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.693Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.693Z]             try:
[2024-03-07T16:33:08.693Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.693Z]                     try:
[2024-03-07T16:33:08.693Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.693Z]                     except KeyError:
[2024-03-07T16:33:08.693Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.693Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.693Z]                                 raise HookCallError(
[2024-03-07T16:33:08.693Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.693Z]                                 )
[2024-03-07T16:33:08.693Z]     
[2024-03-07T16:33:08.693Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.693Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.693Z]                         try:
[2024-03-07T16:33:08.693Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.693Z]                             # which is the desired response.
[2024-03-07T16:33:08.693Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.693Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.693Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.693Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.693Z]                         except StopIteration:
[2024-03-07T16:33:08.693Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.693Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.693Z]                         try:
[2024-03-07T16:33:08.693Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.693Z]                             # which is the desired response.
[2024-03-07T16:33:08.693Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.693Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.693Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.693Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.693Z]                         except StopIteration:
[2024-03-07T16:33:08.693Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.693Z]                     else:
[2024-03-07T16:33:08.693Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.693Z]                         if res is not None:
[2024-03-07T16:33:08.693Z]                             results.append(res)
[2024-03-07T16:33:08.693Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.693Z]                                 break
[2024-03-07T16:33:08.693Z]             except BaseException as exc:
[2024-03-07T16:33:08.693Z]                 exception = exc
[2024-03-07T16:33:08.693Z]         finally:
[2024-03-07T16:33:08.693Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.693Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.693Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.693Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.693Z]                 else:
[2024-03-07T16:33:08.693Z]                     result = results
[2024-03-07T16:33:08.693Z]     
[2024-03-07T16:33:08.693Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.693Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.693Z]                     try:
[2024-03-07T16:33:08.693Z]                         if exception is not None:
[2024-03-07T16:33:08.693Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.693Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.693Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.693Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.693Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.693Z] >           return (yield)
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.693Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.693Z] 
[2024-03-07T16:33:08.693Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.694Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.694Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.694Z] 
[2024-03-07T16:33:08.694Z]     def _multicall(
[2024-03-07T16:33:08.694Z]         hook_name: str,
[2024-03-07T16:33:08.694Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.694Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.694Z]         firstresult: bool,
[2024-03-07T16:33:08.694Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.694Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.694Z]         result(s).
[2024-03-07T16:33:08.694Z]     
[2024-03-07T16:33:08.694Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.694Z]         """
[2024-03-07T16:33:08.694Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.694Z]         results: list[object] = []
[2024-03-07T16:33:08.694Z]         exception = None
[2024-03-07T16:33:08.694Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.694Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.694Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.694Z]             try:
[2024-03-07T16:33:08.694Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.694Z]                     try:
[2024-03-07T16:33:08.694Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.694Z]                     except KeyError:
[2024-03-07T16:33:08.694Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.694Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.694Z]                                 raise HookCallError(
[2024-03-07T16:33:08.694Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.694Z]                                 )
[2024-03-07T16:33:08.694Z]     
[2024-03-07T16:33:08.694Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.694Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.694Z]                         try:
[2024-03-07T16:33:08.694Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.694Z]                             # which is the desired response.
[2024-03-07T16:33:08.694Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.694Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.694Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.694Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.694Z]                         except StopIteration:
[2024-03-07T16:33:08.694Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.694Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.694Z]                         try:
[2024-03-07T16:33:08.694Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.694Z]                             # which is the desired response.
[2024-03-07T16:33:08.694Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.694Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.694Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.694Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.694Z]                         except StopIteration:
[2024-03-07T16:33:08.694Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.694Z]                     else:
[2024-03-07T16:33:08.694Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.694Z]                         if res is not None:
[2024-03-07T16:33:08.694Z]                             results.append(res)
[2024-03-07T16:33:08.694Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.694Z]                                 break
[2024-03-07T16:33:08.694Z]             except BaseException as exc:
[2024-03-07T16:33:08.694Z]                 exception = exc
[2024-03-07T16:33:08.694Z]         finally:
[2024-03-07T16:33:08.694Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.694Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.694Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.694Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.694Z]                 else:
[2024-03-07T16:33:08.694Z]                     result = results
[2024-03-07T16:33:08.694Z]     
[2024-03-07T16:33:08.694Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.694Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.694Z]                     try:
[2024-03-07T16:33:08.694Z]                         if exception is not None:
[2024-03-07T16:33:08.694Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.694Z] 
[2024-03-07T16:33:08.694Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.694Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.694Z] 
[2024-03-07T16:33:08.694Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.694Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.694Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.694Z] 
[2024-03-07T16:33:08.694Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.694Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.694Z] 
[2024-03-07T16:33:08.694Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.694Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.694Z]             try:
[2024-03-07T16:33:08.694Z] >               yield
[2024-03-07T16:33:08.694Z] 
[2024-03-07T16:33:08.694Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.694Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.694Z] 
[2024-03-07T16:33:08.694Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.694Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.694Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.694Z] 
[2024-03-07T16:33:08.694Z]     def _multicall(
[2024-03-07T16:33:08.694Z]         hook_name: str,
[2024-03-07T16:33:08.694Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.694Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.694Z]         firstresult: bool,
[2024-03-07T16:33:08.694Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.694Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.694Z]         result(s).
[2024-03-07T16:33:08.694Z]     
[2024-03-07T16:33:08.694Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.694Z]         """
[2024-03-07T16:33:08.694Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.694Z]         results: list[object] = []
[2024-03-07T16:33:08.694Z]         exception = None
[2024-03-07T16:33:08.694Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.694Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.694Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.694Z]             try:
[2024-03-07T16:33:08.694Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.694Z]                     try:
[2024-03-07T16:33:08.694Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.694Z]                     except KeyError:
[2024-03-07T16:33:08.694Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.694Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.694Z]                                 raise HookCallError(
[2024-03-07T16:33:08.694Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.694Z]                                 )
[2024-03-07T16:33:08.694Z]     
[2024-03-07T16:33:08.694Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.694Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.694Z]                         try:
[2024-03-07T16:33:08.694Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.694Z]                             # which is the desired response.
[2024-03-07T16:33:08.694Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.694Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.694Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.694Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.694Z]                         except StopIteration:
[2024-03-07T16:33:08.694Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.694Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.694Z]                         try:
[2024-03-07T16:33:08.694Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.694Z]                             # which is the desired response.
[2024-03-07T16:33:08.694Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.694Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.694Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.694Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.694Z]                         except StopIteration:
[2024-03-07T16:33:08.695Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.695Z]                     else:
[2024-03-07T16:33:08.695Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.695Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.695Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.695Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.695Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.695Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.695Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.695Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.695Z]     
[2024-03-07T16:33:08.695Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.695Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.695Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.695Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.695Z]             if exc:
[2024-03-07T16:33:08.695Z] >               raise exc
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.695Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.695Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abc051900>
[2024-03-07T16:33:08.695Z] when = 'setup'
[2024-03-07T16:33:08.695Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z]     @classmethod
[2024-03-07T16:33:08.695Z]     def from_call(
[2024-03-07T16:33:08.695Z]         cls,
[2024-03-07T16:33:08.695Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.695Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.695Z]         reraise: Optional[
[2024-03-07T16:33:08.695Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.695Z]         ] = None,
[2024-03-07T16:33:08.695Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.695Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.695Z]     
[2024-03-07T16:33:08.695Z]         :param func:
[2024-03-07T16:33:08.695Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.695Z]         :param when:
[2024-03-07T16:33:08.695Z]             The phase in which the function is called.
[2024-03-07T16:33:08.695Z]         :param reraise:
[2024-03-07T16:33:08.695Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.695Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.695Z]         """
[2024-03-07T16:33:08.695Z]         excinfo = None
[2024-03-07T16:33:08.695Z]         start = timing.time()
[2024-03-07T16:33:08.695Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.695Z]         try:
[2024-03-07T16:33:08.695Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.695Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.695Z]     )
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.695Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.695Z] kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.695Z]         """Call the hook.
[2024-03-07T16:33:08.695Z]     
[2024-03-07T16:33:08.695Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.695Z]         specification.
[2024-03-07T16:33:08.695Z]     
[2024-03-07T16:33:08.695Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.695Z]         :ref:`calling`.
[2024-03-07T16:33:08.695Z]         """
[2024-03-07T16:33:08.695Z]         assert (
[2024-03-07T16:33:08.695Z]             not self.is_historic()
[2024-03-07T16:33:08.695Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.695Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.695Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.695Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.695Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.695Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.695Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.695Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.695Z] kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z]     def _hookexec(
[2024-03-07T16:33:08.695Z]         self,
[2024-03-07T16:33:08.695Z]         hook_name: str,
[2024-03-07T16:33:08.695Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.695Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.695Z]         firstresult: bool,
[2024-03-07T16:33:08.695Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.695Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.695Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.695Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.695Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.695Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.695Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.695Z] 
[2024-03-07T16:33:08.695Z]     def _multicall(
[2024-03-07T16:33:08.695Z]         hook_name: str,
[2024-03-07T16:33:08.695Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.695Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.695Z]         firstresult: bool,
[2024-03-07T16:33:08.695Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.695Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.695Z]         result(s).
[2024-03-07T16:33:08.695Z]     
[2024-03-07T16:33:08.695Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.695Z]         """
[2024-03-07T16:33:08.695Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.695Z]         results: list[object] = []
[2024-03-07T16:33:08.695Z]         exception = None
[2024-03-07T16:33:08.695Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.695Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.695Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.695Z]             try:
[2024-03-07T16:33:08.695Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.695Z]                     try:
[2024-03-07T16:33:08.695Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.695Z]                     except KeyError:
[2024-03-07T16:33:08.695Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.695Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.695Z]                                 raise HookCallError(
[2024-03-07T16:33:08.695Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.695Z]                                 )
[2024-03-07T16:33:08.695Z]     
[2024-03-07T16:33:08.695Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.695Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.695Z]                         try:
[2024-03-07T16:33:08.695Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.696Z]                             # which is the desired response.
[2024-03-07T16:33:08.696Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.696Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.696Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.696Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.696Z]                         except StopIteration:
[2024-03-07T16:33:08.696Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.696Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.696Z]                         try:
[2024-03-07T16:33:08.696Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.696Z]                             # which is the desired response.
[2024-03-07T16:33:08.696Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.696Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.696Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.696Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.696Z]                         except StopIteration:
[2024-03-07T16:33:08.696Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.696Z]                     else:
[2024-03-07T16:33:08.696Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.696Z]                         if res is not None:
[2024-03-07T16:33:08.696Z]                             results.append(res)
[2024-03-07T16:33:08.696Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.696Z]                                 break
[2024-03-07T16:33:08.696Z]             except BaseException as exc:
[2024-03-07T16:33:08.696Z]                 exception = exc
[2024-03-07T16:33:08.696Z]         finally:
[2024-03-07T16:33:08.696Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.696Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.696Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.696Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.696Z]                 else:
[2024-03-07T16:33:08.696Z]                     result = results
[2024-03-07T16:33:08.696Z]     
[2024-03-07T16:33:08.696Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.696Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.696Z]                     try:
[2024-03-07T16:33:08.696Z]                         if exception is not None:
[2024-03-07T16:33:08.696Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.696Z]                         else:
[2024-03-07T16:33:08.696Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.696Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.696Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.696Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.696Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.696Z]                     except StopIteration as si:
[2024-03-07T16:33:08.696Z]                         result = si.value
[2024-03-07T16:33:08.696Z]                         exception = None
[2024-03-07T16:33:08.696Z]                         continue
[2024-03-07T16:33:08.696Z]                     except BaseException as e:
[2024-03-07T16:33:08.696Z]                         exception = e
[2024-03-07T16:33:08.696Z]                         continue
[2024-03-07T16:33:08.696Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.696Z]     
[2024-03-07T16:33:08.696Z]                 if exception is not None:
[2024-03-07T16:33:08.696Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.696Z] 
[2024-03-07T16:33:08.696Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.696Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.696Z] 
[2024-03-07T16:33:08.696Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.696Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.696Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.696Z] 
[2024-03-07T16:33:08.696Z]     def _multicall(
[2024-03-07T16:33:08.696Z]         hook_name: str,
[2024-03-07T16:33:08.696Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.696Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.696Z]         firstresult: bool,
[2024-03-07T16:33:08.696Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.696Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.696Z]         result(s).
[2024-03-07T16:33:08.696Z]     
[2024-03-07T16:33:08.696Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.696Z]         """
[2024-03-07T16:33:08.696Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.696Z]         results: list[object] = []
[2024-03-07T16:33:08.696Z]         exception = None
[2024-03-07T16:33:08.696Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.696Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.696Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.696Z]             try:
[2024-03-07T16:33:08.696Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.696Z]                     try:
[2024-03-07T16:33:08.696Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.696Z]                     except KeyError:
[2024-03-07T16:33:08.696Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.696Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.696Z]                                 raise HookCallError(
[2024-03-07T16:33:08.696Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.696Z]                                 )
[2024-03-07T16:33:08.696Z]     
[2024-03-07T16:33:08.696Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.696Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.696Z]                         try:
[2024-03-07T16:33:08.696Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.696Z]                             # which is the desired response.
[2024-03-07T16:33:08.696Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.696Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.696Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.696Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.696Z]                         except StopIteration:
[2024-03-07T16:33:08.696Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.696Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.696Z]                         try:
[2024-03-07T16:33:08.696Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.696Z]                             # which is the desired response.
[2024-03-07T16:33:08.696Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.696Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.696Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.696Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.696Z]                         except StopIteration:
[2024-03-07T16:33:08.696Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.696Z]                     else:
[2024-03-07T16:33:08.696Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.696Z]                         if res is not None:
[2024-03-07T16:33:08.696Z]                             results.append(res)
[2024-03-07T16:33:08.696Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.696Z]                                 break
[2024-03-07T16:33:08.696Z]             except BaseException as exc:
[2024-03-07T16:33:08.696Z]                 exception = exc
[2024-03-07T16:33:08.696Z]         finally:
[2024-03-07T16:33:08.696Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.696Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.696Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.696Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.696Z]                 else:
[2024-03-07T16:33:08.696Z]                     result = results
[2024-03-07T16:33:08.696Z]     
[2024-03-07T16:33:08.696Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.696Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.696Z]                     try:
[2024-03-07T16:33:08.696Z]                         if exception is not None:
[2024-03-07T16:33:08.696Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.696Z] 
[2024-03-07T16:33:08.696Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.696Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.696Z] 
[2024-03-07T16:33:08.696Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.696Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.697Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.697Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.697Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.697Z]             try:
[2024-03-07T16:33:08.697Z] >               yield
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.697Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.697Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.697Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z]     def _multicall(
[2024-03-07T16:33:08.697Z]         hook_name: str,
[2024-03-07T16:33:08.697Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.697Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.697Z]         firstresult: bool,
[2024-03-07T16:33:08.697Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.697Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.697Z]         result(s).
[2024-03-07T16:33:08.697Z]     
[2024-03-07T16:33:08.697Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.697Z]         """
[2024-03-07T16:33:08.697Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.697Z]         results: list[object] = []
[2024-03-07T16:33:08.697Z]         exception = None
[2024-03-07T16:33:08.697Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.697Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.697Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.697Z]             try:
[2024-03-07T16:33:08.697Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.697Z]                     try:
[2024-03-07T16:33:08.697Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.697Z]                     except KeyError:
[2024-03-07T16:33:08.697Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.697Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.697Z]                                 raise HookCallError(
[2024-03-07T16:33:08.697Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.697Z]                                 )
[2024-03-07T16:33:08.697Z]     
[2024-03-07T16:33:08.697Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.697Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.697Z]                         try:
[2024-03-07T16:33:08.697Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.697Z]                             # which is the desired response.
[2024-03-07T16:33:08.697Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.697Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.697Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.697Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.697Z]                         except StopIteration:
[2024-03-07T16:33:08.697Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.697Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.697Z]                         try:
[2024-03-07T16:33:08.697Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.697Z]                             # which is the desired response.
[2024-03-07T16:33:08.697Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.697Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.697Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.697Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.697Z]                         except StopIteration:
[2024-03-07T16:33:08.697Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.697Z]                     else:
[2024-03-07T16:33:08.697Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.697Z]                         if res is not None:
[2024-03-07T16:33:08.697Z]                             results.append(res)
[2024-03-07T16:33:08.697Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.697Z]                                 break
[2024-03-07T16:33:08.697Z]             except BaseException as exc:
[2024-03-07T16:33:08.697Z]                 exception = exc
[2024-03-07T16:33:08.697Z]         finally:
[2024-03-07T16:33:08.697Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.697Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.697Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.697Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.697Z]                 else:
[2024-03-07T16:33:08.697Z]                     result = results
[2024-03-07T16:33:08.697Z]     
[2024-03-07T16:33:08.697Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.697Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.697Z]                     try:
[2024-03-07T16:33:08.697Z]                         if exception is not None:
[2024-03-07T16:33:08.697Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.697Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.697Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.697Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.697Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.697Z]     
[2024-03-07T16:33:08.697Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.697Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.697Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.697Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.697Z] item = <IPyNbCell Cell 1>, when = 'setup'
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.697Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.697Z]         with catching_logs(
[2024-03-07T16:33:08.697Z]             self.caplog_handler,
[2024-03-07T16:33:08.697Z]             level=self.log_level,
[2024-03-07T16:33:08.697Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.697Z]             self.report_handler,
[2024-03-07T16:33:08.697Z]             level=self.log_level,
[2024-03-07T16:33:08.697Z]         ) as report_handler:
[2024-03-07T16:33:08.697Z]             caplog_handler.reset()
[2024-03-07T16:33:08.697Z]             report_handler.reset()
[2024-03-07T16:33:08.697Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.697Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.697Z]     
[2024-03-07T16:33:08.697Z]             try:
[2024-03-07T16:33:08.697Z] >               yield
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.697Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.697Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.697Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.697Z] 
[2024-03-07T16:33:08.697Z]     def _multicall(
[2024-03-07T16:33:08.697Z]         hook_name: str,
[2024-03-07T16:33:08.697Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.697Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.697Z]         firstresult: bool,
[2024-03-07T16:33:08.697Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.697Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.697Z]         result(s).
[2024-03-07T16:33:08.697Z]     
[2024-03-07T16:33:08.697Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.697Z]         """
[2024-03-07T16:33:08.697Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.697Z]         results: list[object] = []
[2024-03-07T16:33:08.697Z]         exception = None
[2024-03-07T16:33:08.697Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.697Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.697Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.697Z]             try:
[2024-03-07T16:33:08.697Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.697Z]                     try:
[2024-03-07T16:33:08.698Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.698Z]                     except KeyError:
[2024-03-07T16:33:08.698Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.698Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.698Z]                                 raise HookCallError(
[2024-03-07T16:33:08.698Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.698Z]                                 )
[2024-03-07T16:33:08.698Z]     
[2024-03-07T16:33:08.698Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.698Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.698Z]                         try:
[2024-03-07T16:33:08.698Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.698Z]                             # which is the desired response.
[2024-03-07T16:33:08.698Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.698Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.698Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.698Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.698Z]                         except StopIteration:
[2024-03-07T16:33:08.698Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.698Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.698Z]                         try:
[2024-03-07T16:33:08.698Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.698Z]                             # which is the desired response.
[2024-03-07T16:33:08.698Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.698Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.698Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.698Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.698Z]                         except StopIteration:
[2024-03-07T16:33:08.698Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.698Z]                     else:
[2024-03-07T16:33:08.698Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.698Z]                         if res is not None:
[2024-03-07T16:33:08.698Z]                             results.append(res)
[2024-03-07T16:33:08.698Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.698Z]                                 break
[2024-03-07T16:33:08.698Z]             except BaseException as exc:
[2024-03-07T16:33:08.698Z]                 exception = exc
[2024-03-07T16:33:08.698Z]         finally:
[2024-03-07T16:33:08.698Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.698Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.698Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.698Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.698Z]                 else:
[2024-03-07T16:33:08.698Z]                     result = results
[2024-03-07T16:33:08.698Z]     
[2024-03-07T16:33:08.698Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.698Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.698Z]                     try:
[2024-03-07T16:33:08.698Z]                         if exception is not None:
[2024-03-07T16:33:08.698Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.698Z] 
[2024-03-07T16:33:08.698Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.698Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.698Z] 
[2024-03-07T16:33:08.698Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.698Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.698Z] 
[2024-03-07T16:33:08.698Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.698Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.698Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.698Z] >           return (yield)
[2024-03-07T16:33:08.698Z] 
[2024-03-07T16:33:08.698Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.698Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.698Z] 
[2024-03-07T16:33:08.698Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.698Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.698Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.698Z] 
[2024-03-07T16:33:08.698Z]     def _multicall(
[2024-03-07T16:33:08.698Z]         hook_name: str,
[2024-03-07T16:33:08.698Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.698Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.698Z]         firstresult: bool,
[2024-03-07T16:33:08.698Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.698Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.698Z]         result(s).
[2024-03-07T16:33:08.698Z]     
[2024-03-07T16:33:08.698Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.698Z]         """
[2024-03-07T16:33:08.698Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.698Z]         results: list[object] = []
[2024-03-07T16:33:08.698Z]         exception = None
[2024-03-07T16:33:08.698Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.698Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.698Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.698Z]             try:
[2024-03-07T16:33:08.698Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.698Z]                     try:
[2024-03-07T16:33:08.698Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.698Z]                     except KeyError:
[2024-03-07T16:33:08.698Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.698Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.698Z]                                 raise HookCallError(
[2024-03-07T16:33:08.698Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.698Z]                                 )
[2024-03-07T16:33:08.698Z]     
[2024-03-07T16:33:08.698Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.698Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.698Z]                         try:
[2024-03-07T16:33:08.698Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.698Z]                             # which is the desired response.
[2024-03-07T16:33:08.698Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.698Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.698Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.698Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.698Z]                         except StopIteration:
[2024-03-07T16:33:08.698Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.698Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.698Z]                         try:
[2024-03-07T16:33:08.698Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.698Z]                             # which is the desired response.
[2024-03-07T16:33:08.698Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.698Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.698Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.698Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.698Z]                         except StopIteration:
[2024-03-07T16:33:08.698Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.698Z]                     else:
[2024-03-07T16:33:08.698Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.698Z]                         if res is not None:
[2024-03-07T16:33:08.698Z]                             results.append(res)
[2024-03-07T16:33:08.698Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.698Z]                                 break
[2024-03-07T16:33:08.698Z]             except BaseException as exc:
[2024-03-07T16:33:08.698Z]                 exception = exc
[2024-03-07T16:33:08.698Z]         finally:
[2024-03-07T16:33:08.698Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.698Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.698Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.698Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.698Z]                 else:
[2024-03-07T16:33:08.698Z]                     result = results
[2024-03-07T16:33:08.698Z]     
[2024-03-07T16:33:08.698Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.699Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.699Z]                     try:
[2024-03-07T16:33:08.699Z]                         if exception is not None:
[2024-03-07T16:33:08.699Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.699Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.699Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.699Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.699Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.699Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.699Z]             try:
[2024-03-07T16:33:08.699Z] >               yield
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.699Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.699Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.699Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z]     def _multicall(
[2024-03-07T16:33:08.699Z]         hook_name: str,
[2024-03-07T16:33:08.699Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.699Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.699Z]         firstresult: bool,
[2024-03-07T16:33:08.699Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.699Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.699Z]         result(s).
[2024-03-07T16:33:08.699Z]     
[2024-03-07T16:33:08.699Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.699Z]         """
[2024-03-07T16:33:08.699Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.699Z]         results: list[object] = []
[2024-03-07T16:33:08.699Z]         exception = None
[2024-03-07T16:33:08.699Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.699Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.699Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.699Z]             try:
[2024-03-07T16:33:08.699Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.699Z]                     try:
[2024-03-07T16:33:08.699Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.699Z]                     except KeyError:
[2024-03-07T16:33:08.699Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.699Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.699Z]                                 raise HookCallError(
[2024-03-07T16:33:08.699Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.699Z]                                 )
[2024-03-07T16:33:08.699Z]     
[2024-03-07T16:33:08.699Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.699Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.699Z]                         try:
[2024-03-07T16:33:08.699Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.699Z]                             # which is the desired response.
[2024-03-07T16:33:08.699Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.699Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.699Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.699Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.699Z]                         except StopIteration:
[2024-03-07T16:33:08.699Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.699Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.699Z]                         try:
[2024-03-07T16:33:08.699Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.699Z]                             # which is the desired response.
[2024-03-07T16:33:08.699Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.699Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.699Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.699Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.699Z]                         except StopIteration:
[2024-03-07T16:33:08.699Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.699Z]                     else:
[2024-03-07T16:33:08.699Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.699Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.699Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.699Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.699Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.699Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.699Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.699Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.699Z]     
[2024-03-07T16:33:08.699Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.699Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.699Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.699Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.699Z]             if exc:
[2024-03-07T16:33:08.699Z] >               raise exc
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.699Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.699Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abbb0b520>
[2024-03-07T16:33:08.699Z] when = 'setup'
[2024-03-07T16:33:08.699Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z]     @classmethod
[2024-03-07T16:33:08.699Z]     def from_call(
[2024-03-07T16:33:08.699Z]         cls,
[2024-03-07T16:33:08.699Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.699Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.699Z]         reraise: Optional[
[2024-03-07T16:33:08.699Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.699Z]         ] = None,
[2024-03-07T16:33:08.699Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.699Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.699Z]     
[2024-03-07T16:33:08.699Z]         :param func:
[2024-03-07T16:33:08.699Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.699Z]         :param when:
[2024-03-07T16:33:08.699Z]             The phase in which the function is called.
[2024-03-07T16:33:08.699Z]         :param reraise:
[2024-03-07T16:33:08.699Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.699Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.699Z]         """
[2024-03-07T16:33:08.699Z]         excinfo = None
[2024-03-07T16:33:08.699Z]         start = timing.time()
[2024-03-07T16:33:08.699Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.699Z]         try:
[2024-03-07T16:33:08.699Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.699Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.699Z] 
[2024-03-07T16:33:08.699Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.699Z]     )
[2024-03-07T16:33:08.700Z] 
[2024-03-07T16:33:08.700Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.700Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.700Z] 
[2024-03-07T16:33:08.700Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.700Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.700Z] 
[2024-03-07T16:33:08.700Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.700Z]         """Call the hook.
[2024-03-07T16:33:08.700Z]     
[2024-03-07T16:33:08.700Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.700Z]         specification.
[2024-03-07T16:33:08.700Z]     
[2024-03-07T16:33:08.700Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.700Z]         :ref:`calling`.
[2024-03-07T16:33:08.700Z]         """
[2024-03-07T16:33:08.700Z]         assert (
[2024-03-07T16:33:08.700Z]             not self.is_historic()
[2024-03-07T16:33:08.700Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.700Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.700Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.700Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.700Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.700Z] 
[2024-03-07T16:33:08.700Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.700Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.700Z] 
[2024-03-07T16:33:08.700Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.700Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.700Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.700Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.700Z] 
[2024-03-07T16:33:08.700Z]     def _hookexec(
[2024-03-07T16:33:08.700Z]         self,
[2024-03-07T16:33:08.700Z]         hook_name: str,
[2024-03-07T16:33:08.700Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.700Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.700Z]         firstresult: bool,
[2024-03-07T16:33:08.700Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.700Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.700Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.700Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.700Z] 
[2024-03-07T16:33:08.700Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.700Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.700Z] 
[2024-03-07T16:33:08.700Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.700Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.700Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.700Z] 
[2024-03-07T16:33:08.700Z]     def _multicall(
[2024-03-07T16:33:08.700Z]         hook_name: str,
[2024-03-07T16:33:08.700Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.700Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.700Z]         firstresult: bool,
[2024-03-07T16:33:08.700Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.700Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.700Z]         result(s).
[2024-03-07T16:33:08.700Z]     
[2024-03-07T16:33:08.700Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.700Z]         """
[2024-03-07T16:33:08.700Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.700Z]         results: list[object] = []
[2024-03-07T16:33:08.700Z]         exception = None
[2024-03-07T16:33:08.700Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.700Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.700Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.700Z]             try:
[2024-03-07T16:33:08.700Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.700Z]                     try:
[2024-03-07T16:33:08.700Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.700Z]                     except KeyError:
[2024-03-07T16:33:08.700Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.700Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.700Z]                                 raise HookCallError(
[2024-03-07T16:33:08.700Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.700Z]                                 )
[2024-03-07T16:33:08.700Z]     
[2024-03-07T16:33:08.700Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.700Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.700Z]                         try:
[2024-03-07T16:33:08.700Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.700Z]                             # which is the desired response.
[2024-03-07T16:33:08.700Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.700Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.700Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.700Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.700Z]                         except StopIteration:
[2024-03-07T16:33:08.700Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.700Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.700Z]                         try:
[2024-03-07T16:33:08.700Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.700Z]                             # which is the desired response.
[2024-03-07T16:33:08.700Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.700Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.700Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.700Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.700Z]                         except StopIteration:
[2024-03-07T16:33:08.700Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.700Z]                     else:
[2024-03-07T16:33:08.700Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.700Z]                         if res is not None:
[2024-03-07T16:33:08.700Z]                             results.append(res)
[2024-03-07T16:33:08.700Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.700Z]                                 break
[2024-03-07T16:33:08.700Z]             except BaseException as exc:
[2024-03-07T16:33:08.700Z]                 exception = exc
[2024-03-07T16:33:08.700Z]         finally:
[2024-03-07T16:33:08.700Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.700Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.700Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.700Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.700Z]                 else:
[2024-03-07T16:33:08.700Z]                     result = results
[2024-03-07T16:33:08.700Z]     
[2024-03-07T16:33:08.700Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.700Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.700Z]                     try:
[2024-03-07T16:33:08.700Z]                         if exception is not None:
[2024-03-07T16:33:08.700Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.700Z]                         else:
[2024-03-07T16:33:08.700Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.700Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.700Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.700Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.700Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.700Z]                     except StopIteration as si:
[2024-03-07T16:33:08.700Z]                         result = si.value
[2024-03-07T16:33:08.700Z]                         exception = None
[2024-03-07T16:33:08.700Z]                         continue
[2024-03-07T16:33:08.700Z]                     except BaseException as e:
[2024-03-07T16:33:08.700Z]                         exception = e
[2024-03-07T16:33:08.700Z]                         continue
[2024-03-07T16:33:08.700Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.700Z]     
[2024-03-07T16:33:08.700Z]                 if exception is not None:
[2024-03-07T16:33:08.700Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.700Z] 
[2024-03-07T16:33:08.700Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.701Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.701Z] 
[2024-03-07T16:33:08.701Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.701Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.701Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.701Z] 
[2024-03-07T16:33:08.701Z]     def _multicall(
[2024-03-07T16:33:08.701Z]         hook_name: str,
[2024-03-07T16:33:08.701Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.701Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.701Z]         firstresult: bool,
[2024-03-07T16:33:08.701Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.701Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.701Z]         result(s).
[2024-03-07T16:33:08.701Z]     
[2024-03-07T16:33:08.701Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.701Z]         """
[2024-03-07T16:33:08.701Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.701Z]         results: list[object] = []
[2024-03-07T16:33:08.701Z]         exception = None
[2024-03-07T16:33:08.701Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.701Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.701Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.701Z]             try:
[2024-03-07T16:33:08.701Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.701Z]                     try:
[2024-03-07T16:33:08.701Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.701Z]                     except KeyError:
[2024-03-07T16:33:08.701Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.701Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.701Z]                                 raise HookCallError(
[2024-03-07T16:33:08.701Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.701Z]                                 )
[2024-03-07T16:33:08.701Z]     
[2024-03-07T16:33:08.701Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.701Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.701Z]                         try:
[2024-03-07T16:33:08.701Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.701Z]                             # which is the desired response.
[2024-03-07T16:33:08.701Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.701Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.701Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.701Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.701Z]                         except StopIteration:
[2024-03-07T16:33:08.701Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.701Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.701Z]                         try:
[2024-03-07T16:33:08.701Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.701Z]                             # which is the desired response.
[2024-03-07T16:33:08.701Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.701Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.701Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.701Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.701Z]                         except StopIteration:
[2024-03-07T16:33:08.701Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.701Z]                     else:
[2024-03-07T16:33:08.701Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.701Z]                         if res is not None:
[2024-03-07T16:33:08.701Z]                             results.append(res)
[2024-03-07T16:33:08.701Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.701Z]                                 break
[2024-03-07T16:33:08.701Z]             except BaseException as exc:
[2024-03-07T16:33:08.701Z]                 exception = exc
[2024-03-07T16:33:08.701Z]         finally:
[2024-03-07T16:33:08.701Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.701Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.701Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.701Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.701Z]                 else:
[2024-03-07T16:33:08.701Z]                     result = results
[2024-03-07T16:33:08.701Z]     
[2024-03-07T16:33:08.701Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.701Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.701Z]                     try:
[2024-03-07T16:33:08.701Z]                         if exception is not None:
[2024-03-07T16:33:08.701Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.701Z] 
[2024-03-07T16:33:08.701Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.701Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.701Z] 
[2024-03-07T16:33:08.701Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.701Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.701Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.701Z] 
[2024-03-07T16:33:08.701Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.701Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.701Z] 
[2024-03-07T16:33:08.701Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.701Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.701Z]             try:
[2024-03-07T16:33:08.701Z] >               yield
[2024-03-07T16:33:08.701Z] 
[2024-03-07T16:33:08.701Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.701Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.701Z] 
[2024-03-07T16:33:08.701Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.701Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.701Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.701Z] 
[2024-03-07T16:33:08.701Z]     def _multicall(
[2024-03-07T16:33:08.701Z]         hook_name: str,
[2024-03-07T16:33:08.701Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.701Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.701Z]         firstresult: bool,
[2024-03-07T16:33:08.701Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.701Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.701Z]         result(s).
[2024-03-07T16:33:08.701Z]     
[2024-03-07T16:33:08.701Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.701Z]         """
[2024-03-07T16:33:08.701Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.701Z]         results: list[object] = []
[2024-03-07T16:33:08.701Z]         exception = None
[2024-03-07T16:33:08.701Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.701Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.701Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.701Z]             try:
[2024-03-07T16:33:08.701Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.701Z]                     try:
[2024-03-07T16:33:08.701Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.701Z]                     except KeyError:
[2024-03-07T16:33:08.701Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.701Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.701Z]                                 raise HookCallError(
[2024-03-07T16:33:08.701Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.701Z]                                 )
[2024-03-07T16:33:08.701Z]     
[2024-03-07T16:33:08.701Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.701Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.701Z]                         try:
[2024-03-07T16:33:08.701Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.701Z]                             # which is the desired response.
[2024-03-07T16:33:08.701Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.701Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.701Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.701Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.701Z]                         except StopIteration:
[2024-03-07T16:33:08.702Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.702Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.702Z]                         try:
[2024-03-07T16:33:08.702Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.702Z]                             # which is the desired response.
[2024-03-07T16:33:08.702Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.702Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.702Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.702Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.702Z]                         except StopIteration:
[2024-03-07T16:33:08.702Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.702Z]                     else:
[2024-03-07T16:33:08.702Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.702Z]                         if res is not None:
[2024-03-07T16:33:08.702Z]                             results.append(res)
[2024-03-07T16:33:08.702Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.702Z]                                 break
[2024-03-07T16:33:08.702Z]             except BaseException as exc:
[2024-03-07T16:33:08.702Z]                 exception = exc
[2024-03-07T16:33:08.702Z]         finally:
[2024-03-07T16:33:08.702Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.702Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.702Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.702Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.702Z]                 else:
[2024-03-07T16:33:08.702Z]                     result = results
[2024-03-07T16:33:08.702Z]     
[2024-03-07T16:33:08.702Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.702Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.702Z]                     try:
[2024-03-07T16:33:08.702Z]                         if exception is not None:
[2024-03-07T16:33:08.702Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.702Z] 
[2024-03-07T16:33:08.702Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.702Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.702Z] 
[2024-03-07T16:33:08.702Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.702Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.702Z] 
[2024-03-07T16:33:08.702Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.702Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.702Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.702Z]     
[2024-03-07T16:33:08.702Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.702Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.702Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.702Z] 
[2024-03-07T16:33:08.702Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.702Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.702Z] 
[2024-03-07T16:33:08.702Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.702Z] item = <IPyNbCell Cell 0>, when = 'setup'
[2024-03-07T16:33:08.702Z] 
[2024-03-07T16:33:08.702Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.702Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.702Z]         with catching_logs(
[2024-03-07T16:33:08.702Z]             self.caplog_handler,
[2024-03-07T16:33:08.702Z]             level=self.log_level,
[2024-03-07T16:33:08.702Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.702Z]             self.report_handler,
[2024-03-07T16:33:08.702Z]             level=self.log_level,
[2024-03-07T16:33:08.702Z]         ) as report_handler:
[2024-03-07T16:33:08.702Z]             caplog_handler.reset()
[2024-03-07T16:33:08.702Z]             report_handler.reset()
[2024-03-07T16:33:08.702Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.702Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.702Z]     
[2024-03-07T16:33:08.702Z]             try:
[2024-03-07T16:33:08.702Z] >               yield
[2024-03-07T16:33:08.702Z] 
[2024-03-07T16:33:08.702Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.702Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.702Z] 
[2024-03-07T16:33:08.702Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.702Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.702Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.702Z] 
[2024-03-07T16:33:08.702Z]     def _multicall(
[2024-03-07T16:33:08.702Z]         hook_name: str,
[2024-03-07T16:33:08.702Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.702Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.702Z]         firstresult: bool,
[2024-03-07T16:33:08.702Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.702Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.702Z]         result(s).
[2024-03-07T16:33:08.702Z]     
[2024-03-07T16:33:08.702Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.702Z]         """
[2024-03-07T16:33:08.702Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.702Z]         results: list[object] = []
[2024-03-07T16:33:08.702Z]         exception = None
[2024-03-07T16:33:08.702Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.702Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.702Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.702Z]             try:
[2024-03-07T16:33:08.702Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.702Z]                     try:
[2024-03-07T16:33:08.702Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.702Z]                     except KeyError:
[2024-03-07T16:33:08.702Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.702Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.702Z]                                 raise HookCallError(
[2024-03-07T16:33:08.702Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.702Z]                                 )
[2024-03-07T16:33:08.702Z]     
[2024-03-07T16:33:08.702Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.702Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.702Z]                         try:
[2024-03-07T16:33:08.702Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.702Z]                             # which is the desired response.
[2024-03-07T16:33:08.702Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.702Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.702Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.702Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.702Z]                         except StopIteration:
[2024-03-07T16:33:08.702Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.702Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.702Z]                         try:
[2024-03-07T16:33:08.702Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.702Z]                             # which is the desired response.
[2024-03-07T16:33:08.702Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.702Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.702Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.702Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.702Z]                         except StopIteration:
[2024-03-07T16:33:08.702Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.702Z]                     else:
[2024-03-07T16:33:08.702Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.702Z]                         if res is not None:
[2024-03-07T16:33:08.702Z]                             results.append(res)
[2024-03-07T16:33:08.702Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.702Z]                                 break
[2024-03-07T16:33:08.702Z]             except BaseException as exc:
[2024-03-07T16:33:08.702Z]                 exception = exc
[2024-03-07T16:33:08.702Z]         finally:
[2024-03-07T16:33:08.703Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.703Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.703Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.703Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.703Z]                 else:
[2024-03-07T16:33:08.703Z]                     result = results
[2024-03-07T16:33:08.703Z]     
[2024-03-07T16:33:08.703Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.703Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.703Z]                     try:
[2024-03-07T16:33:08.703Z]                         if exception is not None:
[2024-03-07T16:33:08.703Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.703Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.703Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.703Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.703Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.703Z] >           return (yield)
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.703Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.703Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.703Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z]     def _multicall(
[2024-03-07T16:33:08.703Z]         hook_name: str,
[2024-03-07T16:33:08.703Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.703Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.703Z]         firstresult: bool,
[2024-03-07T16:33:08.703Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.703Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.703Z]         result(s).
[2024-03-07T16:33:08.703Z]     
[2024-03-07T16:33:08.703Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.703Z]         """
[2024-03-07T16:33:08.703Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.703Z]         results: list[object] = []
[2024-03-07T16:33:08.703Z]         exception = None
[2024-03-07T16:33:08.703Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.703Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.703Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.703Z]             try:
[2024-03-07T16:33:08.703Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.703Z]                     try:
[2024-03-07T16:33:08.703Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.703Z]                     except KeyError:
[2024-03-07T16:33:08.703Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.703Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.703Z]                                 raise HookCallError(
[2024-03-07T16:33:08.703Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.703Z]                                 )
[2024-03-07T16:33:08.703Z]     
[2024-03-07T16:33:08.703Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.703Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.703Z]                         try:
[2024-03-07T16:33:08.703Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.703Z]                             # which is the desired response.
[2024-03-07T16:33:08.703Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.703Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.703Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.703Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.703Z]                         except StopIteration:
[2024-03-07T16:33:08.703Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.703Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.703Z]                         try:
[2024-03-07T16:33:08.703Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.703Z]                             # which is the desired response.
[2024-03-07T16:33:08.703Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.703Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.703Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.703Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.703Z]                         except StopIteration:
[2024-03-07T16:33:08.703Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.703Z]                     else:
[2024-03-07T16:33:08.703Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.703Z]                         if res is not None:
[2024-03-07T16:33:08.703Z]                             results.append(res)
[2024-03-07T16:33:08.703Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.703Z]                                 break
[2024-03-07T16:33:08.703Z]             except BaseException as exc:
[2024-03-07T16:33:08.703Z]                 exception = exc
[2024-03-07T16:33:08.703Z]         finally:
[2024-03-07T16:33:08.703Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.703Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.703Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.703Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.703Z]                 else:
[2024-03-07T16:33:08.703Z]                     result = results
[2024-03-07T16:33:08.703Z]     
[2024-03-07T16:33:08.703Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.703Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.703Z]                     try:
[2024-03-07T16:33:08.703Z]                         if exception is not None:
[2024-03-07T16:33:08.703Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.703Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.703Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.703Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.703Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.703Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.703Z]             try:
[2024-03-07T16:33:08.703Z] >               yield
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.703Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.703Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.703Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.703Z] 
[2024-03-07T16:33:08.703Z]     def _multicall(
[2024-03-07T16:33:08.703Z]         hook_name: str,
[2024-03-07T16:33:08.703Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.703Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.703Z]         firstresult: bool,
[2024-03-07T16:33:08.703Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.703Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.703Z]         result(s).
[2024-03-07T16:33:08.703Z]     
[2024-03-07T16:33:08.703Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.703Z]         """
[2024-03-07T16:33:08.703Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.703Z]         results: list[object] = []
[2024-03-07T16:33:08.703Z]         exception = None
[2024-03-07T16:33:08.703Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.703Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.703Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.703Z]             try:
[2024-03-07T16:33:08.703Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.703Z]                     try:
[2024-03-07T16:33:08.703Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.703Z]                     except KeyError:
[2024-03-07T16:33:08.703Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.704Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.704Z]                                 raise HookCallError(
[2024-03-07T16:33:08.704Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.704Z]                                 )
[2024-03-07T16:33:08.704Z]     
[2024-03-07T16:33:08.704Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.704Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.704Z]                         try:
[2024-03-07T16:33:08.704Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.704Z]                             # which is the desired response.
[2024-03-07T16:33:08.704Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.704Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.704Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.704Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.704Z]                         except StopIteration:
[2024-03-07T16:33:08.704Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.704Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.704Z]                         try:
[2024-03-07T16:33:08.704Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.704Z]                             # which is the desired response.
[2024-03-07T16:33:08.704Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.704Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.704Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.704Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.704Z]                         except StopIteration:
[2024-03-07T16:33:08.704Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.704Z]                     else:
[2024-03-07T16:33:08.704Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.704Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.704Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.704Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.704Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.704Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.704Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.704Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.704Z]     
[2024-03-07T16:33:08.704Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.704Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.704Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.704Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.704Z]             if exc:
[2024-03-07T16:33:08.704Z]                 raise exc
[2024-03-07T16:33:08.704Z]     
[2024-03-07T16:33:08.704Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.704Z]             assert col not in self.stack
[2024-03-07T16:33:08.704Z]             # Push onto the stack.
[2024-03-07T16:33:08.704Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.704Z]             try:
[2024-03-07T16:33:08.704Z]                 col.setup()
[2024-03-07T16:33:08.704Z]             except TEST_OUTCOME as exc:
[2024-03-07T16:33:08.704Z]                 self.stack[col] = (self.stack[col][0], exc)
[2024-03-07T16:33:08.704Z] >               raise exc
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:514: 
[2024-03-07T16:33:08.704Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.704Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.704Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.704Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.704Z]     
[2024-03-07T16:33:08.704Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.704Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.704Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.704Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.704Z]             if exc:
[2024-03-07T16:33:08.704Z]                 raise exc
[2024-03-07T16:33:08.704Z]     
[2024-03-07T16:33:08.704Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.704Z]             assert col not in self.stack
[2024-03-07T16:33:08.704Z]             # Push onto the stack.
[2024-03-07T16:33:08.704Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.704Z]             try:
[2024-03-07T16:33:08.704Z] >               col.setup()
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:511: 
[2024-03-07T16:33:08.704Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z] self = <IPyNbFile 06_Raven_calibration.ipynb>
[2024-03-07T16:33:08.704Z] 
[2024-03-07T16:33:08.704Z]     def setup(self):
[2024-03-07T16:33:08.704Z]         """
[2024-03-07T16:33:08.704Z]         Called by pytest to setup the collector cells in .
[2024-03-07T16:33:08.704Z]         Here we start a kernel and setup the sanitize patterns.
[2024-03-07T16:33:08.704Z]         """
[2024-03-07T16:33:08.704Z]         # we've already checked that --nbval-current-env and
[2024-03-07T16:33:08.704Z]         # --nbval-kernel-name were not both supplied
[2024-03-07T16:33:08.704Z]         if self.parent.config.option.nbval_current_env:
[2024-03-07T16:33:08.704Z]             kernel_name = CURRENT_ENV_KERNEL_NAME
[2024-03-07T16:33:08.704Z]         elif self.parent.config.option.nbval_kernel_name:
[2024-03-07T16:33:08.704Z]             kernel_name = self.parent.config.option.nbval_kernel_name
[2024-03-07T16:33:08.704Z]         else:
[2024-03-07T16:33:08.704Z]             kernel_name = self.nb.metadata.get(
[2024-03-07T16:33:08.704Z]                 'kernelspec', {}).get('name', 'python')
[2024-03-07T16:33:08.704Z] >       self.kernel = RunningKernel(
[2024-03-07T16:33:08.704Z]             kernel_name,
[2024-03-07T16:33:08.705Z]             cwd=str(self.fspath.dirname),
[2024-03-07T16:33:08.705Z]             startup_timeout=self.config.option.nbval_kernel_startup_timeout,
[2024-03-07T16:33:08.705Z]         )
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/plugin.py:264: 
[2024-03-07T16:33:08.705Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] self = <nbval.kernel.RunningKernel object at 0x7f0abb8c4d60>
[2024-03-07T16:33:08.705Z] kernel_name = 'python'
[2024-03-07T16:33:08.705Z] cwd = '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks'
[2024-03-07T16:33:08.705Z] startup_timeout = 60
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z]     def __init__(self, kernel_name, cwd=None, startup_timeout=60):
[2024-03-07T16:33:08.705Z]         """
[2024-03-07T16:33:08.705Z]         Initialise a new kernel
[2024-03-07T16:33:08.705Z]         specify that matplotlib is inline and connect the stderr.
[2024-03-07T16:33:08.705Z]         Stores the active kernel process and its manager.
[2024-03-07T16:33:08.705Z]         """
[2024-03-07T16:33:08.705Z]     
[2024-03-07T16:33:08.705Z] >       self.km, self.kc = start_new_kernel(
[2024-03-07T16:33:08.705Z]             startup_timeout=startup_timeout,
[2024-03-07T16:33:08.705Z]             kernel_name=kernel_name,
[2024-03-07T16:33:08.705Z]             stderr=open(os.devnull, 'w'),
[2024-03-07T16:33:08.705Z]             cwd=cwd,
[2024-03-07T16:33:08.705Z]         )
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:85: 
[2024-03-07T16:33:08.705Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] startup_timeout = 60, kernel_name = 'python'
[2024-03-07T16:33:08.705Z] kwargs = {'cwd': '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks', 'stderr': <_io.TextIOWrapper name='/dev/null' mode='w' encoding='UTF-8'>}
[2024-03-07T16:33:08.705Z] km = <jupyter_client.manager.KernelManager object at 0x7f0abb8c7580>
[2024-03-07T16:33:08.705Z] kc = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z]     def start_new_kernel(startup_timeout=60, kernel_name='python', **kwargs):
[2024-03-07T16:33:08.705Z]         """Start a new kernel, and return its Manager and Client"""
[2024-03-07T16:33:08.705Z]         logger.debug('Starting new kernel: "%s"' % kernel_name)
[2024-03-07T16:33:08.705Z]         km = KernelManager(kernel_name=kernel_name,
[2024-03-07T16:33:08.705Z]                            kernel_spec_manager=NbvalKernelspecManager())
[2024-03-07T16:33:08.705Z]         km.start_kernel(**kwargs)
[2024-03-07T16:33:08.705Z]         kc = km.client()
[2024-03-07T16:33:08.705Z]         kc.start_channels()
[2024-03-07T16:33:08.705Z]         try:
[2024-03-07T16:33:08.705Z] >           kc.wait_for_ready(timeout=startup_timeout)
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:57: 
[2024-03-07T16:33:08.705Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.705Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.705Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.705Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.705Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.705Z]         try:
[2024-03-07T16:33:08.705Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.705Z]         except RuntimeError:
[2024-03-07T16:33:08.705Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.705Z]             try:
[2024-03-07T16:33:08.705Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.705Z]             except RuntimeError:
[2024-03-07T16:33:08.705Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.705Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.705Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.705Z]     
[2024-03-07T16:33:08.705Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.705Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.705Z]         try:
[2024-03-07T16:33:08.705Z]             return loop.run_until_complete(future)
[2024-03-07T16:33:08.705Z]         except BaseException as e:
[2024-03-07T16:33:08.705Z]             future.cancel()
[2024-03-07T16:33:08.705Z] >           raise e
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:30: 
[2024-03-07T16:33:08.705Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.705Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.705Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.705Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.705Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.705Z]         try:
[2024-03-07T16:33:08.705Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.705Z]         except RuntimeError:
[2024-03-07T16:33:08.705Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.705Z]             try:
[2024-03-07T16:33:08.705Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.705Z]             except RuntimeError:
[2024-03-07T16:33:08.705Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.705Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.705Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.705Z]     
[2024-03-07T16:33:08.705Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.705Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.705Z]         try:
[2024-03-07T16:33:08.705Z] >           return loop.run_until_complete(future)
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:27: 
[2024-03-07T16:33:08.705Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] self = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.705Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z]     def run_until_complete(self, future):
[2024-03-07T16:33:08.705Z]         with manage_run(self):
[2024-03-07T16:33:08.705Z]             f = asyncio.ensure_future(future, loop=self)
[2024-03-07T16:33:08.705Z]             if f is not future:
[2024-03-07T16:33:08.705Z]                 f._log_destroy_pending = False
[2024-03-07T16:33:08.705Z]             while not f.done():
[2024-03-07T16:33:08.705Z]                 self._run_once()
[2024-03-07T16:33:08.705Z]                 if self._stopping:
[2024-03-07T16:33:08.705Z]                     break
[2024-03-07T16:33:08.705Z]             if not f.done():
[2024-03-07T16:33:08.705Z]                 raise RuntimeError(
[2024-03-07T16:33:08.705Z]                     'Event loop stopped before Future completed.')
[2024-03-07T16:33:08.705Z] >           return f.result()
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py:98: 
[2024-03-07T16:33:08.705Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] self = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z]     def result(self):
[2024-03-07T16:33:08.705Z]         """Return the result this future represents.
[2024-03-07T16:33:08.705Z]     
[2024-03-07T16:33:08.705Z]         If the future has been cancelled, raises CancelledError.  If the
[2024-03-07T16:33:08.705Z]         future's result isn't yet available, raises InvalidStateError.  If
[2024-03-07T16:33:08.705Z]         the future is done and has an exception set, this exception is raised.
[2024-03-07T16:33:08.705Z]         """
[2024-03-07T16:33:08.705Z]         if self._state == _CANCELLED:
[2024-03-07T16:33:08.705Z]             exc = self._make_cancelled_error()
[2024-03-07T16:33:08.705Z]             raise exc
[2024-03-07T16:33:08.705Z]         if self._state != _FINISHED:
[2024-03-07T16:33:08.705Z]             raise exceptions.InvalidStateError('Result is not ready.')
[2024-03-07T16:33:08.705Z]         self.__log_traceback = False
[2024-03-07T16:33:08.705Z]         if self._exception is not None:
[2024-03-07T16:33:08.705Z] >           raise self._exception.with_traceback(self._exception_tb)
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.705Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/futures.py:201: 
[2024-03-07T16:33:08.705Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.705Z] 
[2024-03-07T16:33:08.706Z] self = None
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z]     def __step(self, exc=None):
[2024-03-07T16:33:08.706Z]         if self.done():
[2024-03-07T16:33:08.706Z]             raise exceptions.InvalidStateError(
[2024-03-07T16:33:08.706Z]                 f'_step(): already done: {self!r}, {exc!r}')
[2024-03-07T16:33:08.706Z]         if self._must_cancel:
[2024-03-07T16:33:08.706Z]             if not isinstance(exc, exceptions.CancelledError):
[2024-03-07T16:33:08.706Z]                 exc = self._make_cancelled_error()
[2024-03-07T16:33:08.706Z]             self._must_cancel = False
[2024-03-07T16:33:08.706Z]         coro = self._coro
[2024-03-07T16:33:08.706Z]         self._fut_waiter = None
[2024-03-07T16:33:08.706Z]     
[2024-03-07T16:33:08.706Z]         _enter_task(self._loop, self)
[2024-03-07T16:33:08.706Z]         # Call either coro.throw(exc) or coro.send(None).
[2024-03-07T16:33:08.706Z]         try:
[2024-03-07T16:33:08.706Z]             if exc is None:
[2024-03-07T16:33:08.706Z]                 # We use the `send` method directly, because coroutines
[2024-03-07T16:33:08.706Z]                 # don't have `__iter__` and `__next__` methods.
[2024-03-07T16:33:08.706Z] >               result = coro.send(None)
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/tasks.py:232: 
[2024-03-07T16:33:08.706Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z] self = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.706Z] timeout = 60
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z]     async def _async_wait_for_ready(self, timeout: t.Optional[float] = None) -> None:
[2024-03-07T16:33:08.706Z]         """Waits for a response when a client is blocked
[2024-03-07T16:33:08.706Z]     
[2024-03-07T16:33:08.706Z]         - Sets future time for timeout
[2024-03-07T16:33:08.706Z]         - Blocks on shell channel until a message is received
[2024-03-07T16:33:08.706Z]         - Exit if the kernel has died
[2024-03-07T16:33:08.706Z]         - If client times out before receiving a message from the kernel, send RuntimeError
[2024-03-07T16:33:08.706Z]         - Flush the IOPub channel
[2024-03-07T16:33:08.706Z]         """
[2024-03-07T16:33:08.706Z]         if timeout is None:
[2024-03-07T16:33:08.706Z]             timeout = float("inf")
[2024-03-07T16:33:08.706Z]         abs_timeout = time.time() + timeout
[2024-03-07T16:33:08.706Z]     
[2024-03-07T16:33:08.706Z]         from .manager import KernelManager
[2024-03-07T16:33:08.706Z]     
[2024-03-07T16:33:08.706Z]         if not isinstance(self.parent, KernelManager):
[2024-03-07T16:33:08.706Z]             # This Client was not created by a KernelManager,
[2024-03-07T16:33:08.706Z]             # so wait for kernel to become responsive to heartbeats
[2024-03-07T16:33:08.706Z]             # before checking for kernel_info reply
[2024-03-07T16:33:08.706Z]             while not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.706Z]                 if time.time() > abs_timeout:
[2024-03-07T16:33:08.706Z]                     raise RuntimeError(
[2024-03-07T16:33:08.706Z]                         "Kernel didn't respond to heartbeats in %d seconds and timed out" % timeout
[2024-03-07T16:33:08.706Z]                     )
[2024-03-07T16:33:08.706Z]                 await asyncio.sleep(0.2)
[2024-03-07T16:33:08.706Z]     
[2024-03-07T16:33:08.706Z]         # Wait for kernel info reply on shell channel
[2024-03-07T16:33:08.706Z]         while True:
[2024-03-07T16:33:08.706Z]             self.kernel_info()
[2024-03-07T16:33:08.706Z]             try:
[2024-03-07T16:33:08.706Z]                 msg = await self.shell_channel.get_msg(timeout=1)
[2024-03-07T16:33:08.706Z]             except Empty:
[2024-03-07T16:33:08.706Z]                 pass
[2024-03-07T16:33:08.706Z]             else:
[2024-03-07T16:33:08.706Z]                 if msg["msg_type"] == "kernel_info_reply":
[2024-03-07T16:33:08.706Z]                     # Checking that IOPub is connected. If it is not connected, start over.
[2024-03-07T16:33:08.706Z]                     try:
[2024-03-07T16:33:08.706Z]                         await self.iopub_channel.get_msg(timeout=0.2)
[2024-03-07T16:33:08.706Z]                     except Empty:
[2024-03-07T16:33:08.706Z]                         pass
[2024-03-07T16:33:08.706Z]                     else:
[2024-03-07T16:33:08.706Z]                         self._handle_kernel_info_reply(msg)
[2024-03-07T16:33:08.706Z]                         break
[2024-03-07T16:33:08.706Z]     
[2024-03-07T16:33:08.706Z]             if not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.706Z]                 raise RuntimeError("Kernel died before replying to kernel_info")
[2024-03-07T16:33:08.706Z]     
[2024-03-07T16:33:08.706Z]             # Check if current time is ready check time plus timeout
[2024-03-07T16:33:08.706Z]             if time.time() > abs_timeout:
[2024-03-07T16:33:08.706Z] >               raise RuntimeError("Kernel didn't respond in %d seconds" % timeout)
[2024-03-07T16:33:08.706Z] E               RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:206: RuntimeError
[2024-03-07T16:33:08.706Z] _ ERROR at setup of RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 5 _
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.706Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abc051ea0>
[2024-03-07T16:33:08.706Z] when = 'setup'
[2024-03-07T16:33:08.706Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z]     @classmethod
[2024-03-07T16:33:08.706Z]     def from_call(
[2024-03-07T16:33:08.706Z]         cls,
[2024-03-07T16:33:08.706Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.706Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.706Z]         reraise: Optional[
[2024-03-07T16:33:08.706Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.706Z]         ] = None,
[2024-03-07T16:33:08.706Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.706Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.706Z]     
[2024-03-07T16:33:08.706Z]         :param func:
[2024-03-07T16:33:08.706Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.706Z]         :param when:
[2024-03-07T16:33:08.706Z]             The phase in which the function is called.
[2024-03-07T16:33:08.706Z]         :param reraise:
[2024-03-07T16:33:08.706Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.706Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.706Z]         """
[2024-03-07T16:33:08.706Z]         excinfo = None
[2024-03-07T16:33:08.706Z]         start = timing.time()
[2024-03-07T16:33:08.706Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.706Z]         try:
[2024-03-07T16:33:08.706Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.706Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.706Z]     )
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.706Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.706Z] kwargs = {'item': <IPyNbCell Cell 5>}, firstresult = False
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.706Z]         """Call the hook.
[2024-03-07T16:33:08.706Z]     
[2024-03-07T16:33:08.706Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.706Z]         specification.
[2024-03-07T16:33:08.706Z]     
[2024-03-07T16:33:08.706Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.706Z]         :ref:`calling`.
[2024-03-07T16:33:08.706Z]         """
[2024-03-07T16:33:08.706Z]         assert (
[2024-03-07T16:33:08.706Z]             not self.is_historic()
[2024-03-07T16:33:08.706Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.706Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.706Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.706Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.706Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.706Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.706Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.706Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.706Z] kwargs = {'item': <IPyNbCell Cell 5>}, firstresult = False
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z]     def _hookexec(
[2024-03-07T16:33:08.706Z]         self,
[2024-03-07T16:33:08.706Z]         hook_name: str,
[2024-03-07T16:33:08.706Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.706Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.706Z]         firstresult: bool,
[2024-03-07T16:33:08.706Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.706Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.706Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.706Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.706Z] 
[2024-03-07T16:33:08.706Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.707Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.707Z] 
[2024-03-07T16:33:08.707Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.707Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.707Z] caller_kwargs = {'item': <IPyNbCell Cell 5>}, firstresult = False
[2024-03-07T16:33:08.707Z] 
[2024-03-07T16:33:08.707Z]     def _multicall(
[2024-03-07T16:33:08.707Z]         hook_name: str,
[2024-03-07T16:33:08.707Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.707Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.707Z]         firstresult: bool,
[2024-03-07T16:33:08.707Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.707Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.707Z]         result(s).
[2024-03-07T16:33:08.707Z]     
[2024-03-07T16:33:08.707Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.707Z]         """
[2024-03-07T16:33:08.707Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.707Z]         results: list[object] = []
[2024-03-07T16:33:08.707Z]         exception = None
[2024-03-07T16:33:08.707Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.707Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.707Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.707Z]             try:
[2024-03-07T16:33:08.707Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.707Z]                     try:
[2024-03-07T16:33:08.707Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.707Z]                     except KeyError:
[2024-03-07T16:33:08.707Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.707Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.707Z]                                 raise HookCallError(
[2024-03-07T16:33:08.707Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.707Z]                                 )
[2024-03-07T16:33:08.707Z]     
[2024-03-07T16:33:08.707Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.707Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.707Z]                         try:
[2024-03-07T16:33:08.707Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.707Z]                             # which is the desired response.
[2024-03-07T16:33:08.707Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.707Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.707Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.707Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.707Z]                         except StopIteration:
[2024-03-07T16:33:08.707Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.707Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.707Z]                         try:
[2024-03-07T16:33:08.707Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.707Z]                             # which is the desired response.
[2024-03-07T16:33:08.707Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.707Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.707Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.707Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.707Z]                         except StopIteration:
[2024-03-07T16:33:08.707Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.707Z]                     else:
[2024-03-07T16:33:08.707Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.707Z]                         if res is not None:
[2024-03-07T16:33:08.707Z]                             results.append(res)
[2024-03-07T16:33:08.707Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.707Z]                                 break
[2024-03-07T16:33:08.707Z]             except BaseException as exc:
[2024-03-07T16:33:08.707Z]                 exception = exc
[2024-03-07T16:33:08.707Z]         finally:
[2024-03-07T16:33:08.707Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.707Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.707Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.707Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.707Z]                 else:
[2024-03-07T16:33:08.707Z]                     result = results
[2024-03-07T16:33:08.707Z]     
[2024-03-07T16:33:08.707Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.707Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.707Z]                     try:
[2024-03-07T16:33:08.707Z]                         if exception is not None:
[2024-03-07T16:33:08.707Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.707Z]                         else:
[2024-03-07T16:33:08.707Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.707Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.707Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.707Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.707Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.707Z]                     except StopIteration as si:
[2024-03-07T16:33:08.707Z]                         result = si.value
[2024-03-07T16:33:08.707Z]                         exception = None
[2024-03-07T16:33:08.707Z]                         continue
[2024-03-07T16:33:08.707Z]                     except BaseException as e:
[2024-03-07T16:33:08.707Z]                         exception = e
[2024-03-07T16:33:08.707Z]                         continue
[2024-03-07T16:33:08.707Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.707Z]     
[2024-03-07T16:33:08.707Z]                 if exception is not None:
[2024-03-07T16:33:08.707Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.707Z] 
[2024-03-07T16:33:08.707Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.707Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.707Z] 
[2024-03-07T16:33:08.707Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.707Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.707Z] caller_kwargs = {'item': <IPyNbCell Cell 5>}, firstresult = False
[2024-03-07T16:33:08.707Z] 
[2024-03-07T16:33:08.707Z]     def _multicall(
[2024-03-07T16:33:08.707Z]         hook_name: str,
[2024-03-07T16:33:08.707Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.707Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.707Z]         firstresult: bool,
[2024-03-07T16:33:08.707Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.707Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.707Z]         result(s).
[2024-03-07T16:33:08.707Z]     
[2024-03-07T16:33:08.707Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.707Z]         """
[2024-03-07T16:33:08.707Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.707Z]         results: list[object] = []
[2024-03-07T16:33:08.707Z]         exception = None
[2024-03-07T16:33:08.707Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.707Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.707Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.707Z]             try:
[2024-03-07T16:33:08.707Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.707Z]                     try:
[2024-03-07T16:33:08.707Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.707Z]                     except KeyError:
[2024-03-07T16:33:08.707Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.707Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.707Z]                                 raise HookCallError(
[2024-03-07T16:33:08.707Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.707Z]                                 )
[2024-03-07T16:33:08.707Z]     
[2024-03-07T16:33:08.707Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.707Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.707Z]                         try:
[2024-03-07T16:33:08.707Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.707Z]                             # which is the desired response.
[2024-03-07T16:33:08.707Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.707Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.707Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.707Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.707Z]                         except StopIteration:
[2024-03-07T16:33:08.708Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.708Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.708Z]                         try:
[2024-03-07T16:33:08.708Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.708Z]                             # which is the desired response.
[2024-03-07T16:33:08.708Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.708Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.708Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.708Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.708Z]                         except StopIteration:
[2024-03-07T16:33:08.708Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.708Z]                     else:
[2024-03-07T16:33:08.708Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.708Z]                         if res is not None:
[2024-03-07T16:33:08.708Z]                             results.append(res)
[2024-03-07T16:33:08.708Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.708Z]                                 break
[2024-03-07T16:33:08.708Z]             except BaseException as exc:
[2024-03-07T16:33:08.708Z]                 exception = exc
[2024-03-07T16:33:08.708Z]         finally:
[2024-03-07T16:33:08.708Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.708Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.708Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.708Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.708Z]                 else:
[2024-03-07T16:33:08.708Z]                     result = results
[2024-03-07T16:33:08.708Z]     
[2024-03-07T16:33:08.708Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.708Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.708Z]                     try:
[2024-03-07T16:33:08.708Z]                         if exception is not None:
[2024-03-07T16:33:08.708Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.708Z] 
[2024-03-07T16:33:08.708Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.708Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.708Z] 
[2024-03-07T16:33:08.708Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.708Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.708Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.708Z] 
[2024-03-07T16:33:08.708Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.708Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.708Z] 
[2024-03-07T16:33:08.708Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.708Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.708Z]             try:
[2024-03-07T16:33:08.708Z] >               yield
[2024-03-07T16:33:08.708Z] 
[2024-03-07T16:33:08.708Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.708Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.708Z] 
[2024-03-07T16:33:08.708Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.708Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.708Z] caller_kwargs = {'item': <IPyNbCell Cell 5>}, firstresult = False
[2024-03-07T16:33:08.708Z] 
[2024-03-07T16:33:08.708Z]     def _multicall(
[2024-03-07T16:33:08.708Z]         hook_name: str,
[2024-03-07T16:33:08.708Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.708Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.708Z]         firstresult: bool,
[2024-03-07T16:33:08.708Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.708Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.708Z]         result(s).
[2024-03-07T16:33:08.708Z]     
[2024-03-07T16:33:08.708Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.708Z]         """
[2024-03-07T16:33:08.708Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.708Z]         results: list[object] = []
[2024-03-07T16:33:08.708Z]         exception = None
[2024-03-07T16:33:08.708Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.708Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.708Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.708Z]             try:
[2024-03-07T16:33:08.708Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.708Z]                     try:
[2024-03-07T16:33:08.708Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.708Z]                     except KeyError:
[2024-03-07T16:33:08.708Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.708Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.708Z]                                 raise HookCallError(
[2024-03-07T16:33:08.708Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.708Z]                                 )
[2024-03-07T16:33:08.708Z]     
[2024-03-07T16:33:08.708Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.708Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.708Z]                         try:
[2024-03-07T16:33:08.708Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.708Z]                             # which is the desired response.
[2024-03-07T16:33:08.708Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.708Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.708Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.708Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.708Z]                         except StopIteration:
[2024-03-07T16:33:08.708Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.708Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.708Z]                         try:
[2024-03-07T16:33:08.708Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.708Z]                             # which is the desired response.
[2024-03-07T16:33:08.708Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.708Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.708Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.708Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.708Z]                         except StopIteration:
[2024-03-07T16:33:08.708Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.708Z]                     else:
[2024-03-07T16:33:08.708Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.708Z]                         if res is not None:
[2024-03-07T16:33:08.708Z]                             results.append(res)
[2024-03-07T16:33:08.708Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.708Z]                                 break
[2024-03-07T16:33:08.708Z]             except BaseException as exc:
[2024-03-07T16:33:08.708Z]                 exception = exc
[2024-03-07T16:33:08.708Z]         finally:
[2024-03-07T16:33:08.708Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.708Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.708Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.708Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.708Z]                 else:
[2024-03-07T16:33:08.708Z]                     result = results
[2024-03-07T16:33:08.708Z]     
[2024-03-07T16:33:08.708Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.708Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.708Z]                     try:
[2024-03-07T16:33:08.708Z]                         if exception is not None:
[2024-03-07T16:33:08.708Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.708Z] 
[2024-03-07T16:33:08.708Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.708Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.708Z] 
[2024-03-07T16:33:08.708Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.708Z] item = <IPyNbCell Cell 5>
[2024-03-07T16:33:08.708Z] 
[2024-03-07T16:33:08.708Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.708Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.708Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.708Z]     
[2024-03-07T16:33:08.708Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.708Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.708Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.708Z] 
[2024-03-07T16:33:08.709Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.709Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.709Z] 
[2024-03-07T16:33:08.709Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.709Z] item = <IPyNbCell Cell 5>, when = 'setup'
[2024-03-07T16:33:08.709Z] 
[2024-03-07T16:33:08.709Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.709Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.709Z]         with catching_logs(
[2024-03-07T16:33:08.709Z]             self.caplog_handler,
[2024-03-07T16:33:08.709Z]             level=self.log_level,
[2024-03-07T16:33:08.709Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.709Z]             self.report_handler,
[2024-03-07T16:33:08.709Z]             level=self.log_level,
[2024-03-07T16:33:08.709Z]         ) as report_handler:
[2024-03-07T16:33:08.709Z]             caplog_handler.reset()
[2024-03-07T16:33:08.709Z]             report_handler.reset()
[2024-03-07T16:33:08.709Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.709Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.709Z]     
[2024-03-07T16:33:08.709Z]             try:
[2024-03-07T16:33:08.709Z] >               yield
[2024-03-07T16:33:08.709Z] 
[2024-03-07T16:33:08.709Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.709Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.709Z] 
[2024-03-07T16:33:08.709Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.709Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.709Z] caller_kwargs = {'item': <IPyNbCell Cell 5>}, firstresult = False
[2024-03-07T16:33:08.709Z] 
[2024-03-07T16:33:08.709Z]     def _multicall(
[2024-03-07T16:33:08.709Z]         hook_name: str,
[2024-03-07T16:33:08.709Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.709Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.709Z]         firstresult: bool,
[2024-03-07T16:33:08.709Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.709Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.709Z]         result(s).
[2024-03-07T16:33:08.709Z]     
[2024-03-07T16:33:08.709Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.709Z]         """
[2024-03-07T16:33:08.709Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.709Z]         results: list[object] = []
[2024-03-07T16:33:08.709Z]         exception = None
[2024-03-07T16:33:08.709Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.709Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.709Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.709Z]             try:
[2024-03-07T16:33:08.709Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.709Z]                     try:
[2024-03-07T16:33:08.709Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.709Z]                     except KeyError:
[2024-03-07T16:33:08.709Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.709Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.709Z]                                 raise HookCallError(
[2024-03-07T16:33:08.709Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.709Z]                                 )
[2024-03-07T16:33:08.709Z]     
[2024-03-07T16:33:08.709Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.709Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.709Z]                         try:
[2024-03-07T16:33:08.709Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.709Z]                             # which is the desired response.
[2024-03-07T16:33:08.709Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.709Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.709Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.709Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.709Z]                         except StopIteration:
[2024-03-07T16:33:08.709Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.709Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.709Z]                         try:
[2024-03-07T16:33:08.709Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.709Z]                             # which is the desired response.
[2024-03-07T16:33:08.709Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.709Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.709Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.709Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.709Z]                         except StopIteration:
[2024-03-07T16:33:08.709Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.709Z]                     else:
[2024-03-07T16:33:08.709Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.709Z]                         if res is not None:
[2024-03-07T16:33:08.709Z]                             results.append(res)
[2024-03-07T16:33:08.709Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.709Z]                                 break
[2024-03-07T16:33:08.709Z]             except BaseException as exc:
[2024-03-07T16:33:08.709Z]                 exception = exc
[2024-03-07T16:33:08.709Z]         finally:
[2024-03-07T16:33:08.709Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.709Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.709Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.709Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.709Z]                 else:
[2024-03-07T16:33:08.709Z]                     result = results
[2024-03-07T16:33:08.709Z]     
[2024-03-07T16:33:08.709Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.709Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.709Z]                     try:
[2024-03-07T16:33:08.709Z]                         if exception is not None:
[2024-03-07T16:33:08.709Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.709Z] 
[2024-03-07T16:33:08.709Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.709Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.709Z] 
[2024-03-07T16:33:08.709Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.709Z] item = <IPyNbCell Cell 5>
[2024-03-07T16:33:08.709Z] 
[2024-03-07T16:33:08.709Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.709Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.709Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.709Z] >           return (yield)
[2024-03-07T16:33:08.709Z] 
[2024-03-07T16:33:08.709Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.709Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.709Z] 
[2024-03-07T16:33:08.709Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.709Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.709Z] caller_kwargs = {'item': <IPyNbCell Cell 5>}, firstresult = False
[2024-03-07T16:33:08.709Z] 
[2024-03-07T16:33:08.709Z]     def _multicall(
[2024-03-07T16:33:08.709Z]         hook_name: str,
[2024-03-07T16:33:08.709Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.709Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.709Z]         firstresult: bool,
[2024-03-07T16:33:08.709Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.709Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.709Z]         result(s).
[2024-03-07T16:33:08.709Z]     
[2024-03-07T16:33:08.709Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.709Z]         """
[2024-03-07T16:33:08.709Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.709Z]         results: list[object] = []
[2024-03-07T16:33:08.709Z]         exception = None
[2024-03-07T16:33:08.709Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.709Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.709Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.709Z]             try:
[2024-03-07T16:33:08.709Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.709Z]                     try:
[2024-03-07T16:33:08.709Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.709Z]                     except KeyError:
[2024-03-07T16:33:08.709Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.709Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.709Z]                                 raise HookCallError(
[2024-03-07T16:33:08.710Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.710Z]                                 )
[2024-03-07T16:33:08.710Z]     
[2024-03-07T16:33:08.710Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.710Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.710Z]                         try:
[2024-03-07T16:33:08.710Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.710Z]                             # which is the desired response.
[2024-03-07T16:33:08.710Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.710Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.710Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.710Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.710Z]                         except StopIteration:
[2024-03-07T16:33:08.710Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.710Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.710Z]                         try:
[2024-03-07T16:33:08.710Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.710Z]                             # which is the desired response.
[2024-03-07T16:33:08.710Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.710Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.710Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.710Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.710Z]                         except StopIteration:
[2024-03-07T16:33:08.710Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.710Z]                     else:
[2024-03-07T16:33:08.710Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.710Z]                         if res is not None:
[2024-03-07T16:33:08.710Z]                             results.append(res)
[2024-03-07T16:33:08.710Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.710Z]                                 break
[2024-03-07T16:33:08.710Z]             except BaseException as exc:
[2024-03-07T16:33:08.710Z]                 exception = exc
[2024-03-07T16:33:08.710Z]         finally:
[2024-03-07T16:33:08.710Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.710Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.710Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.710Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.710Z]                 else:
[2024-03-07T16:33:08.710Z]                     result = results
[2024-03-07T16:33:08.710Z]     
[2024-03-07T16:33:08.710Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.710Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.710Z]                     try:
[2024-03-07T16:33:08.710Z]                         if exception is not None:
[2024-03-07T16:33:08.710Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.710Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.710Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.710Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.710Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.710Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.710Z]             try:
[2024-03-07T16:33:08.710Z] >               yield
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.710Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.710Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.710Z] caller_kwargs = {'item': <IPyNbCell Cell 5>}, firstresult = False
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z]     def _multicall(
[2024-03-07T16:33:08.710Z]         hook_name: str,
[2024-03-07T16:33:08.710Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.710Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.710Z]         firstresult: bool,
[2024-03-07T16:33:08.710Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.710Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.710Z]         result(s).
[2024-03-07T16:33:08.710Z]     
[2024-03-07T16:33:08.710Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.710Z]         """
[2024-03-07T16:33:08.710Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.710Z]         results: list[object] = []
[2024-03-07T16:33:08.710Z]         exception = None
[2024-03-07T16:33:08.710Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.710Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.710Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.710Z]             try:
[2024-03-07T16:33:08.710Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.710Z]                     try:
[2024-03-07T16:33:08.710Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.710Z]                     except KeyError:
[2024-03-07T16:33:08.710Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.710Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.710Z]                                 raise HookCallError(
[2024-03-07T16:33:08.710Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.710Z]                                 )
[2024-03-07T16:33:08.710Z]     
[2024-03-07T16:33:08.710Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.710Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.710Z]                         try:
[2024-03-07T16:33:08.710Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.710Z]                             # which is the desired response.
[2024-03-07T16:33:08.710Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.710Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.710Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.710Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.710Z]                         except StopIteration:
[2024-03-07T16:33:08.710Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.710Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.710Z]                         try:
[2024-03-07T16:33:08.710Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.710Z]                             # which is the desired response.
[2024-03-07T16:33:08.710Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.710Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.710Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.710Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.710Z]                         except StopIteration:
[2024-03-07T16:33:08.710Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.710Z]                     else:
[2024-03-07T16:33:08.710Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.710Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z] item = <IPyNbCell Cell 5>
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.710Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.710Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.710Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.710Z] item = <IPyNbCell Cell 5>
[2024-03-07T16:33:08.710Z] 
[2024-03-07T16:33:08.710Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.710Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.710Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.710Z]     
[2024-03-07T16:33:08.710Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.710Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.710Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.711Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.711Z]             if exc:
[2024-03-07T16:33:08.711Z] >               raise exc
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.711Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.711Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0ab86cab00>
[2024-03-07T16:33:08.711Z] when = 'setup'
[2024-03-07T16:33:08.711Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z]     @classmethod
[2024-03-07T16:33:08.711Z]     def from_call(
[2024-03-07T16:33:08.711Z]         cls,
[2024-03-07T16:33:08.711Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.711Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.711Z]         reraise: Optional[
[2024-03-07T16:33:08.711Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.711Z]         ] = None,
[2024-03-07T16:33:08.711Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.711Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.711Z]     
[2024-03-07T16:33:08.711Z]         :param func:
[2024-03-07T16:33:08.711Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.711Z]         :param when:
[2024-03-07T16:33:08.711Z]             The phase in which the function is called.
[2024-03-07T16:33:08.711Z]         :param reraise:
[2024-03-07T16:33:08.711Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.711Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.711Z]         """
[2024-03-07T16:33:08.711Z]         excinfo = None
[2024-03-07T16:33:08.711Z]         start = timing.time()
[2024-03-07T16:33:08.711Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.711Z]         try:
[2024-03-07T16:33:08.711Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.711Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.711Z]     )
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.711Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.711Z] kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.711Z]         """Call the hook.
[2024-03-07T16:33:08.711Z]     
[2024-03-07T16:33:08.711Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.711Z]         specification.
[2024-03-07T16:33:08.711Z]     
[2024-03-07T16:33:08.711Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.711Z]         :ref:`calling`.
[2024-03-07T16:33:08.711Z]         """
[2024-03-07T16:33:08.711Z]         assert (
[2024-03-07T16:33:08.711Z]             not self.is_historic()
[2024-03-07T16:33:08.711Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.711Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.711Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.711Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.711Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.711Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.711Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.711Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.711Z] kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z]     def _hookexec(
[2024-03-07T16:33:08.711Z]         self,
[2024-03-07T16:33:08.711Z]         hook_name: str,
[2024-03-07T16:33:08.711Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.711Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.711Z]         firstresult: bool,
[2024-03-07T16:33:08.711Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.711Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.711Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.711Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.711Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.711Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.711Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.711Z] 
[2024-03-07T16:33:08.711Z]     def _multicall(
[2024-03-07T16:33:08.711Z]         hook_name: str,
[2024-03-07T16:33:08.711Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.711Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.711Z]         firstresult: bool,
[2024-03-07T16:33:08.711Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.711Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.711Z]         result(s).
[2024-03-07T16:33:08.711Z]     
[2024-03-07T16:33:08.711Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.711Z]         """
[2024-03-07T16:33:08.711Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.711Z]         results: list[object] = []
[2024-03-07T16:33:08.711Z]         exception = None
[2024-03-07T16:33:08.711Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.711Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.711Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.711Z]             try:
[2024-03-07T16:33:08.711Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.711Z]                     try:
[2024-03-07T16:33:08.711Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.711Z]                     except KeyError:
[2024-03-07T16:33:08.711Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.711Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.711Z]                                 raise HookCallError(
[2024-03-07T16:33:08.712Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.712Z]                                 )
[2024-03-07T16:33:08.712Z]     
[2024-03-07T16:33:08.712Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.712Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.712Z]                         try:
[2024-03-07T16:33:08.712Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.712Z]                             # which is the desired response.
[2024-03-07T16:33:08.712Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.712Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.712Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.712Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.712Z]                         except StopIteration:
[2024-03-07T16:33:08.712Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.712Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.712Z]                         try:
[2024-03-07T16:33:08.712Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.712Z]                             # which is the desired response.
[2024-03-07T16:33:08.712Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.712Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.712Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.712Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.712Z]                         except StopIteration:
[2024-03-07T16:33:08.712Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.712Z]                     else:
[2024-03-07T16:33:08.712Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.712Z]                         if res is not None:
[2024-03-07T16:33:08.712Z]                             results.append(res)
[2024-03-07T16:33:08.712Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.712Z]                                 break
[2024-03-07T16:33:08.712Z]             except BaseException as exc:
[2024-03-07T16:33:08.712Z]                 exception = exc
[2024-03-07T16:33:08.712Z]         finally:
[2024-03-07T16:33:08.712Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.712Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.712Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.712Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.712Z]                 else:
[2024-03-07T16:33:08.712Z]                     result = results
[2024-03-07T16:33:08.712Z]     
[2024-03-07T16:33:08.712Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.712Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.712Z]                     try:
[2024-03-07T16:33:08.712Z]                         if exception is not None:
[2024-03-07T16:33:08.712Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.712Z]                         else:
[2024-03-07T16:33:08.712Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.712Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.712Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.712Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.712Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.712Z]                     except StopIteration as si:
[2024-03-07T16:33:08.712Z]                         result = si.value
[2024-03-07T16:33:08.712Z]                         exception = None
[2024-03-07T16:33:08.712Z]                         continue
[2024-03-07T16:33:08.712Z]                     except BaseException as e:
[2024-03-07T16:33:08.712Z]                         exception = e
[2024-03-07T16:33:08.712Z]                         continue
[2024-03-07T16:33:08.712Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.712Z]     
[2024-03-07T16:33:08.712Z]                 if exception is not None:
[2024-03-07T16:33:08.712Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.712Z] 
[2024-03-07T16:33:08.712Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.712Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.712Z] 
[2024-03-07T16:33:08.712Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.712Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.712Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.712Z] 
[2024-03-07T16:33:08.712Z]     def _multicall(
[2024-03-07T16:33:08.712Z]         hook_name: str,
[2024-03-07T16:33:08.712Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.712Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.712Z]         firstresult: bool,
[2024-03-07T16:33:08.712Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.712Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.712Z]         result(s).
[2024-03-07T16:33:08.712Z]     
[2024-03-07T16:33:08.712Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.712Z]         """
[2024-03-07T16:33:08.712Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.712Z]         results: list[object] = []
[2024-03-07T16:33:08.712Z]         exception = None
[2024-03-07T16:33:08.712Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.712Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.712Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.712Z]             try:
[2024-03-07T16:33:08.712Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.712Z]                     try:
[2024-03-07T16:33:08.712Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.712Z]                     except KeyError:
[2024-03-07T16:33:08.712Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.712Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.712Z]                                 raise HookCallError(
[2024-03-07T16:33:08.712Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.712Z]                                 )
[2024-03-07T16:33:08.712Z]     
[2024-03-07T16:33:08.712Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.712Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.712Z]                         try:
[2024-03-07T16:33:08.712Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.712Z]                             # which is the desired response.
[2024-03-07T16:33:08.712Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.712Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.712Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.712Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.712Z]                         except StopIteration:
[2024-03-07T16:33:08.712Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.712Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.712Z]                         try:
[2024-03-07T16:33:08.712Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.712Z]                             # which is the desired response.
[2024-03-07T16:33:08.712Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.712Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.712Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.712Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.712Z]                         except StopIteration:
[2024-03-07T16:33:08.712Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.712Z]                     else:
[2024-03-07T16:33:08.712Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.712Z]                         if res is not None:
[2024-03-07T16:33:08.712Z]                             results.append(res)
[2024-03-07T16:33:08.712Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.712Z]                                 break
[2024-03-07T16:33:08.712Z]             except BaseException as exc:
[2024-03-07T16:33:08.712Z]                 exception = exc
[2024-03-07T16:33:08.712Z]         finally:
[2024-03-07T16:33:08.712Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.712Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.712Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.713Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.713Z]                 else:
[2024-03-07T16:33:08.713Z]                     result = results
[2024-03-07T16:33:08.713Z]     
[2024-03-07T16:33:08.713Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.713Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.713Z]                     try:
[2024-03-07T16:33:08.713Z]                         if exception is not None:
[2024-03-07T16:33:08.713Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.713Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.713Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.713Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.713Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.713Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.713Z]             try:
[2024-03-07T16:33:08.713Z] >               yield
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.713Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.713Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.713Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z]     def _multicall(
[2024-03-07T16:33:08.713Z]         hook_name: str,
[2024-03-07T16:33:08.713Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.713Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.713Z]         firstresult: bool,
[2024-03-07T16:33:08.713Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.713Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.713Z]         result(s).
[2024-03-07T16:33:08.713Z]     
[2024-03-07T16:33:08.713Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.713Z]         """
[2024-03-07T16:33:08.713Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.713Z]         results: list[object] = []
[2024-03-07T16:33:08.713Z]         exception = None
[2024-03-07T16:33:08.713Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.713Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.713Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.713Z]             try:
[2024-03-07T16:33:08.713Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.713Z]                     try:
[2024-03-07T16:33:08.713Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.713Z]                     except KeyError:
[2024-03-07T16:33:08.713Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.713Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.713Z]                                 raise HookCallError(
[2024-03-07T16:33:08.713Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.713Z]                                 )
[2024-03-07T16:33:08.713Z]     
[2024-03-07T16:33:08.713Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.713Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.713Z]                         try:
[2024-03-07T16:33:08.713Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.713Z]                             # which is the desired response.
[2024-03-07T16:33:08.713Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.713Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.713Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.713Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.713Z]                         except StopIteration:
[2024-03-07T16:33:08.713Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.713Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.713Z]                         try:
[2024-03-07T16:33:08.713Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.713Z]                             # which is the desired response.
[2024-03-07T16:33:08.713Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.713Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.713Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.713Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.713Z]                         except StopIteration:
[2024-03-07T16:33:08.713Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.713Z]                     else:
[2024-03-07T16:33:08.713Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.713Z]                         if res is not None:
[2024-03-07T16:33:08.713Z]                             results.append(res)
[2024-03-07T16:33:08.713Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.713Z]                                 break
[2024-03-07T16:33:08.713Z]             except BaseException as exc:
[2024-03-07T16:33:08.713Z]                 exception = exc
[2024-03-07T16:33:08.713Z]         finally:
[2024-03-07T16:33:08.713Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.713Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.713Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.713Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.713Z]                 else:
[2024-03-07T16:33:08.713Z]                     result = results
[2024-03-07T16:33:08.713Z]     
[2024-03-07T16:33:08.713Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.713Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.713Z]                     try:
[2024-03-07T16:33:08.713Z]                         if exception is not None:
[2024-03-07T16:33:08.713Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.713Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.713Z] item = <IPyNbCell Cell 4>
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.713Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.713Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.713Z]     
[2024-03-07T16:33:08.713Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.713Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.713Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.713Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.713Z] item = <IPyNbCell Cell 4>, when = 'setup'
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.713Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.713Z]         with catching_logs(
[2024-03-07T16:33:08.713Z]             self.caplog_handler,
[2024-03-07T16:33:08.713Z]             level=self.log_level,
[2024-03-07T16:33:08.713Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.713Z]             self.report_handler,
[2024-03-07T16:33:08.713Z]             level=self.log_level,
[2024-03-07T16:33:08.713Z]         ) as report_handler:
[2024-03-07T16:33:08.713Z]             caplog_handler.reset()
[2024-03-07T16:33:08.713Z]             report_handler.reset()
[2024-03-07T16:33:08.713Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.713Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.713Z]     
[2024-03-07T16:33:08.713Z]             try:
[2024-03-07T16:33:08.713Z] >               yield
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.713Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.713Z] 
[2024-03-07T16:33:08.713Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.713Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.714Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.714Z] 
[2024-03-07T16:33:08.714Z]     def _multicall(
[2024-03-07T16:33:08.714Z]         hook_name: str,
[2024-03-07T16:33:08.714Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.714Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.714Z]         firstresult: bool,
[2024-03-07T16:33:08.714Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.714Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.714Z]         result(s).
[2024-03-07T16:33:08.714Z]     
[2024-03-07T16:33:08.714Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.714Z]         """
[2024-03-07T16:33:08.714Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.714Z]         results: list[object] = []
[2024-03-07T16:33:08.714Z]         exception = None
[2024-03-07T16:33:08.714Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.714Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.714Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.714Z]             try:
[2024-03-07T16:33:08.714Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.714Z]                     try:
[2024-03-07T16:33:08.714Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.714Z]                     except KeyError:
[2024-03-07T16:33:08.714Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.714Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.714Z]                                 raise HookCallError(
[2024-03-07T16:33:08.714Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.714Z]                                 )
[2024-03-07T16:33:08.714Z]     
[2024-03-07T16:33:08.714Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.714Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.714Z]                         try:
[2024-03-07T16:33:08.714Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.714Z]                             # which is the desired response.
[2024-03-07T16:33:08.714Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.714Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.714Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.714Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.714Z]                         except StopIteration:
[2024-03-07T16:33:08.714Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.714Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.714Z]                         try:
[2024-03-07T16:33:08.714Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.714Z]                             # which is the desired response.
[2024-03-07T16:33:08.714Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.714Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.714Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.714Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.714Z]                         except StopIteration:
[2024-03-07T16:33:08.714Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.714Z]                     else:
[2024-03-07T16:33:08.714Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.714Z]                         if res is not None:
[2024-03-07T16:33:08.714Z]                             results.append(res)
[2024-03-07T16:33:08.714Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.714Z]                                 break
[2024-03-07T16:33:08.714Z]             except BaseException as exc:
[2024-03-07T16:33:08.714Z]                 exception = exc
[2024-03-07T16:33:08.714Z]         finally:
[2024-03-07T16:33:08.714Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.714Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.714Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.714Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.714Z]                 else:
[2024-03-07T16:33:08.714Z]                     result = results
[2024-03-07T16:33:08.714Z]     
[2024-03-07T16:33:08.714Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.714Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.714Z]                     try:
[2024-03-07T16:33:08.714Z]                         if exception is not None:
[2024-03-07T16:33:08.714Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.714Z] 
[2024-03-07T16:33:08.714Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.714Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.714Z] 
[2024-03-07T16:33:08.714Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.714Z] item = <IPyNbCell Cell 4>
[2024-03-07T16:33:08.714Z] 
[2024-03-07T16:33:08.714Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.714Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.714Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.714Z] >           return (yield)
[2024-03-07T16:33:08.714Z] 
[2024-03-07T16:33:08.714Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.714Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.714Z] 
[2024-03-07T16:33:08.714Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.714Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.714Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.714Z] 
[2024-03-07T16:33:08.714Z]     def _multicall(
[2024-03-07T16:33:08.714Z]         hook_name: str,
[2024-03-07T16:33:08.714Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.714Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.714Z]         firstresult: bool,
[2024-03-07T16:33:08.714Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.714Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.714Z]         result(s).
[2024-03-07T16:33:08.714Z]     
[2024-03-07T16:33:08.714Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.714Z]         """
[2024-03-07T16:33:08.714Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.714Z]         results: list[object] = []
[2024-03-07T16:33:08.714Z]         exception = None
[2024-03-07T16:33:08.714Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.714Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.714Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.714Z]             try:
[2024-03-07T16:33:08.714Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.714Z]                     try:
[2024-03-07T16:33:08.714Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.714Z]                     except KeyError:
[2024-03-07T16:33:08.714Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.714Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.714Z]                                 raise HookCallError(
[2024-03-07T16:33:08.714Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.714Z]                                 )
[2024-03-07T16:33:08.714Z]     
[2024-03-07T16:33:08.714Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.714Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.714Z]                         try:
[2024-03-07T16:33:08.714Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.714Z]                             # which is the desired response.
[2024-03-07T16:33:08.714Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.714Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.714Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.714Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.714Z]                         except StopIteration:
[2024-03-07T16:33:08.715Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.715Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.715Z]                         try:
[2024-03-07T16:33:08.715Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.715Z]                             # which is the desired response.
[2024-03-07T16:33:08.715Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.715Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.715Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.715Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.715Z]                         except StopIteration:
[2024-03-07T16:33:08.715Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.715Z]                     else:
[2024-03-07T16:33:08.715Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.715Z]                         if res is not None:
[2024-03-07T16:33:08.715Z]                             results.append(res)
[2024-03-07T16:33:08.715Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.715Z]                                 break
[2024-03-07T16:33:08.715Z]             except BaseException as exc:
[2024-03-07T16:33:08.715Z]                 exception = exc
[2024-03-07T16:33:08.715Z]         finally:
[2024-03-07T16:33:08.715Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.715Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.715Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.715Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.715Z]                 else:
[2024-03-07T16:33:08.715Z]                     result = results
[2024-03-07T16:33:08.715Z]     
[2024-03-07T16:33:08.715Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.715Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.715Z]                     try:
[2024-03-07T16:33:08.715Z]                         if exception is not None:
[2024-03-07T16:33:08.715Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.715Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.715Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.715Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.715Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.715Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.715Z]             try:
[2024-03-07T16:33:08.715Z] >               yield
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.715Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.715Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.715Z] caller_kwargs = {'item': <IPyNbCell Cell 4>}, firstresult = False
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z]     def _multicall(
[2024-03-07T16:33:08.715Z]         hook_name: str,
[2024-03-07T16:33:08.715Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.715Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.715Z]         firstresult: bool,
[2024-03-07T16:33:08.715Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.715Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.715Z]         result(s).
[2024-03-07T16:33:08.715Z]     
[2024-03-07T16:33:08.715Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.715Z]         """
[2024-03-07T16:33:08.715Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.715Z]         results: list[object] = []
[2024-03-07T16:33:08.715Z]         exception = None
[2024-03-07T16:33:08.715Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.715Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.715Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.715Z]             try:
[2024-03-07T16:33:08.715Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.715Z]                     try:
[2024-03-07T16:33:08.715Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.715Z]                     except KeyError:
[2024-03-07T16:33:08.715Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.715Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.715Z]                                 raise HookCallError(
[2024-03-07T16:33:08.715Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.715Z]                                 )
[2024-03-07T16:33:08.715Z]     
[2024-03-07T16:33:08.715Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.715Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.715Z]                         try:
[2024-03-07T16:33:08.715Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.715Z]                             # which is the desired response.
[2024-03-07T16:33:08.715Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.715Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.715Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.715Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.715Z]                         except StopIteration:
[2024-03-07T16:33:08.715Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.715Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.715Z]                         try:
[2024-03-07T16:33:08.715Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.715Z]                             # which is the desired response.
[2024-03-07T16:33:08.715Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.715Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.715Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.715Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.715Z]                         except StopIteration:
[2024-03-07T16:33:08.715Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.715Z]                     else:
[2024-03-07T16:33:08.715Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.715Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z] item = <IPyNbCell Cell 4>
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.715Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.715Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.715Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.715Z] item = <IPyNbCell Cell 4>
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.715Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.715Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.715Z]     
[2024-03-07T16:33:08.715Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.715Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.715Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.715Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.715Z]             if exc:
[2024-03-07T16:33:08.715Z] >               raise exc
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.715Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.715Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.715Z] 
[2024-03-07T16:33:08.716Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.716Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0ab86f15a0>
[2024-03-07T16:33:08.716Z] when = 'setup'
[2024-03-07T16:33:08.716Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z]     @classmethod
[2024-03-07T16:33:08.716Z]     def from_call(
[2024-03-07T16:33:08.716Z]         cls,
[2024-03-07T16:33:08.716Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.716Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.716Z]         reraise: Optional[
[2024-03-07T16:33:08.716Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.716Z]         ] = None,
[2024-03-07T16:33:08.716Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.716Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.716Z]     
[2024-03-07T16:33:08.716Z]         :param func:
[2024-03-07T16:33:08.716Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.716Z]         :param when:
[2024-03-07T16:33:08.716Z]             The phase in which the function is called.
[2024-03-07T16:33:08.716Z]         :param reraise:
[2024-03-07T16:33:08.716Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.716Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.716Z]         """
[2024-03-07T16:33:08.716Z]         excinfo = None
[2024-03-07T16:33:08.716Z]         start = timing.time()
[2024-03-07T16:33:08.716Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.716Z]         try:
[2024-03-07T16:33:08.716Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.716Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.716Z]     )
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.716Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.716Z] kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.716Z]         """Call the hook.
[2024-03-07T16:33:08.716Z]     
[2024-03-07T16:33:08.716Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.716Z]         specification.
[2024-03-07T16:33:08.716Z]     
[2024-03-07T16:33:08.716Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.716Z]         :ref:`calling`.
[2024-03-07T16:33:08.716Z]         """
[2024-03-07T16:33:08.716Z]         assert (
[2024-03-07T16:33:08.716Z]             not self.is_historic()
[2024-03-07T16:33:08.716Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.716Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.716Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.716Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.716Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.716Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.716Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.716Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.716Z] kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z]     def _hookexec(
[2024-03-07T16:33:08.716Z]         self,
[2024-03-07T16:33:08.716Z]         hook_name: str,
[2024-03-07T16:33:08.716Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.716Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.716Z]         firstresult: bool,
[2024-03-07T16:33:08.716Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.716Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.716Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.716Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.716Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.716Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.716Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.716Z] 
[2024-03-07T16:33:08.716Z]     def _multicall(
[2024-03-07T16:33:08.716Z]         hook_name: str,
[2024-03-07T16:33:08.716Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.716Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.716Z]         firstresult: bool,
[2024-03-07T16:33:08.716Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.716Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.716Z]         result(s).
[2024-03-07T16:33:08.716Z]     
[2024-03-07T16:33:08.716Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.716Z]         """
[2024-03-07T16:33:08.716Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.716Z]         results: list[object] = []
[2024-03-07T16:33:08.716Z]         exception = None
[2024-03-07T16:33:08.716Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.716Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.716Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.716Z]             try:
[2024-03-07T16:33:08.716Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.716Z]                     try:
[2024-03-07T16:33:08.716Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.716Z]                     except KeyError:
[2024-03-07T16:33:08.716Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.716Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.716Z]                                 raise HookCallError(
[2024-03-07T16:33:08.716Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.716Z]                                 )
[2024-03-07T16:33:08.716Z]     
[2024-03-07T16:33:08.716Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.716Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.716Z]                         try:
[2024-03-07T16:33:08.716Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.716Z]                             # which is the desired response.
[2024-03-07T16:33:08.716Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.716Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.716Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.716Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.716Z]                         except StopIteration:
[2024-03-07T16:33:08.716Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.716Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.716Z]                         try:
[2024-03-07T16:33:08.716Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.716Z]                             # which is the desired response.
[2024-03-07T16:33:08.716Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.716Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.716Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.716Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.716Z]                         except StopIteration:
[2024-03-07T16:33:08.716Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.716Z]                     else:
[2024-03-07T16:33:08.716Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.716Z]                         if res is not None:
[2024-03-07T16:33:08.716Z]                             results.append(res)
[2024-03-07T16:33:08.716Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.716Z]                                 break
[2024-03-07T16:33:08.716Z]             except BaseException as exc:
[2024-03-07T16:33:08.716Z]                 exception = exc
[2024-03-07T16:33:08.716Z]         finally:
[2024-03-07T16:33:08.716Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.716Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.716Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.716Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.716Z]                 else:
[2024-03-07T16:33:08.717Z]                     result = results
[2024-03-07T16:33:08.717Z]     
[2024-03-07T16:33:08.717Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.717Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.717Z]                     try:
[2024-03-07T16:33:08.717Z]                         if exception is not None:
[2024-03-07T16:33:08.717Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.717Z]                         else:
[2024-03-07T16:33:08.717Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.717Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.717Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.717Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.717Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.717Z]                     except StopIteration as si:
[2024-03-07T16:33:08.717Z]                         result = si.value
[2024-03-07T16:33:08.717Z]                         exception = None
[2024-03-07T16:33:08.717Z]                         continue
[2024-03-07T16:33:08.717Z]                     except BaseException as e:
[2024-03-07T16:33:08.717Z]                         exception = e
[2024-03-07T16:33:08.717Z]                         continue
[2024-03-07T16:33:08.717Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.717Z]     
[2024-03-07T16:33:08.717Z]                 if exception is not None:
[2024-03-07T16:33:08.717Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.717Z] 
[2024-03-07T16:33:08.717Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.717Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.717Z] 
[2024-03-07T16:33:08.717Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.717Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.717Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.717Z] 
[2024-03-07T16:33:08.717Z]     def _multicall(
[2024-03-07T16:33:08.717Z]         hook_name: str,
[2024-03-07T16:33:08.717Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.717Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.717Z]         firstresult: bool,
[2024-03-07T16:33:08.717Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.717Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.717Z]         result(s).
[2024-03-07T16:33:08.717Z]     
[2024-03-07T16:33:08.717Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.717Z]         """
[2024-03-07T16:33:08.717Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.717Z]         results: list[object] = []
[2024-03-07T16:33:08.717Z]         exception = None
[2024-03-07T16:33:08.717Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.717Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.717Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.717Z]             try:
[2024-03-07T16:33:08.717Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.717Z]                     try:
[2024-03-07T16:33:08.717Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.717Z]                     except KeyError:
[2024-03-07T16:33:08.717Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.717Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.717Z]                                 raise HookCallError(
[2024-03-07T16:33:08.717Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.717Z]                                 )
[2024-03-07T16:33:08.717Z]     
[2024-03-07T16:33:08.717Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.717Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.717Z]                         try:
[2024-03-07T16:33:08.717Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.717Z]                             # which is the desired response.
[2024-03-07T16:33:08.717Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.717Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.717Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.717Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.717Z]                         except StopIteration:
[2024-03-07T16:33:08.717Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.717Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.717Z]                         try:
[2024-03-07T16:33:08.717Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.717Z]                             # which is the desired response.
[2024-03-07T16:33:08.717Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.717Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.717Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.717Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.717Z]                         except StopIteration:
[2024-03-07T16:33:08.717Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.717Z]                     else:
[2024-03-07T16:33:08.717Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.717Z]                         if res is not None:
[2024-03-07T16:33:08.717Z]                             results.append(res)
[2024-03-07T16:33:08.717Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.717Z]                                 break
[2024-03-07T16:33:08.717Z]             except BaseException as exc:
[2024-03-07T16:33:08.717Z]                 exception = exc
[2024-03-07T16:33:08.717Z]         finally:
[2024-03-07T16:33:08.717Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.717Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.717Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.717Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.717Z]                 else:
[2024-03-07T16:33:08.717Z]                     result = results
[2024-03-07T16:33:08.717Z]     
[2024-03-07T16:33:08.717Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.717Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.717Z]                     try:
[2024-03-07T16:33:08.717Z]                         if exception is not None:
[2024-03-07T16:33:08.717Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.717Z] 
[2024-03-07T16:33:08.717Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.717Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.717Z] 
[2024-03-07T16:33:08.717Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.717Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.717Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.717Z] 
[2024-03-07T16:33:08.717Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.717Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.717Z] 
[2024-03-07T16:33:08.717Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.717Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.717Z]             try:
[2024-03-07T16:33:08.717Z] >               yield
[2024-03-07T16:33:08.717Z] 
[2024-03-07T16:33:08.717Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.717Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.717Z] 
[2024-03-07T16:33:08.717Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.717Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.717Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.717Z] 
[2024-03-07T16:33:08.717Z]     def _multicall(
[2024-03-07T16:33:08.717Z]         hook_name: str,
[2024-03-07T16:33:08.717Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.717Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.717Z]         firstresult: bool,
[2024-03-07T16:33:08.717Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.717Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.717Z]         result(s).
[2024-03-07T16:33:08.717Z]     
[2024-03-07T16:33:08.717Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.717Z]         """
[2024-03-07T16:33:08.717Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.717Z]         results: list[object] = []
[2024-03-07T16:33:08.717Z]         exception = None
[2024-03-07T16:33:08.717Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.718Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.718Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.718Z]             try:
[2024-03-07T16:33:08.718Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.718Z]                     try:
[2024-03-07T16:33:08.718Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.718Z]                     except KeyError:
[2024-03-07T16:33:08.718Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.718Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.718Z]                                 raise HookCallError(
[2024-03-07T16:33:08.718Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.718Z]                                 )
[2024-03-07T16:33:08.718Z]     
[2024-03-07T16:33:08.718Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.718Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.718Z]                         try:
[2024-03-07T16:33:08.718Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.718Z]                             # which is the desired response.
[2024-03-07T16:33:08.718Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.718Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.718Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.718Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.718Z]                         except StopIteration:
[2024-03-07T16:33:08.718Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.718Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.718Z]                         try:
[2024-03-07T16:33:08.718Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.718Z]                             # which is the desired response.
[2024-03-07T16:33:08.718Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.718Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.718Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.718Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.718Z]                         except StopIteration:
[2024-03-07T16:33:08.718Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.718Z]                     else:
[2024-03-07T16:33:08.718Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.718Z]                         if res is not None:
[2024-03-07T16:33:08.718Z]                             results.append(res)
[2024-03-07T16:33:08.718Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.718Z]                                 break
[2024-03-07T16:33:08.718Z]             except BaseException as exc:
[2024-03-07T16:33:08.718Z]                 exception = exc
[2024-03-07T16:33:08.718Z]         finally:
[2024-03-07T16:33:08.718Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.718Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.718Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.718Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.718Z]                 else:
[2024-03-07T16:33:08.718Z]                     result = results
[2024-03-07T16:33:08.718Z]     
[2024-03-07T16:33:08.718Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.718Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.718Z]                     try:
[2024-03-07T16:33:08.718Z]                         if exception is not None:
[2024-03-07T16:33:08.718Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.718Z] 
[2024-03-07T16:33:08.718Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.718Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.718Z] 
[2024-03-07T16:33:08.718Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.718Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.718Z] 
[2024-03-07T16:33:08.718Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.718Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.718Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.718Z]     
[2024-03-07T16:33:08.718Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.718Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.718Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.718Z] 
[2024-03-07T16:33:08.718Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.718Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.718Z] 
[2024-03-07T16:33:08.718Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.718Z] item = <IPyNbCell Cell 3>, when = 'setup'
[2024-03-07T16:33:08.718Z] 
[2024-03-07T16:33:08.718Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.718Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.718Z]         with catching_logs(
[2024-03-07T16:33:08.718Z]             self.caplog_handler,
[2024-03-07T16:33:08.718Z]             level=self.log_level,
[2024-03-07T16:33:08.718Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.718Z]             self.report_handler,
[2024-03-07T16:33:08.718Z]             level=self.log_level,
[2024-03-07T16:33:08.718Z]         ) as report_handler:
[2024-03-07T16:33:08.718Z]             caplog_handler.reset()
[2024-03-07T16:33:08.718Z]             report_handler.reset()
[2024-03-07T16:33:08.718Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.718Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.718Z]     
[2024-03-07T16:33:08.718Z]             try:
[2024-03-07T16:33:08.718Z] >               yield
[2024-03-07T16:33:08.718Z] 
[2024-03-07T16:33:08.718Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.718Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.718Z] 
[2024-03-07T16:33:08.718Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.718Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.718Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.718Z] 
[2024-03-07T16:33:08.718Z]     def _multicall(
[2024-03-07T16:33:08.718Z]         hook_name: str,
[2024-03-07T16:33:08.718Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.718Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.718Z]         firstresult: bool,
[2024-03-07T16:33:08.718Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.718Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.718Z]         result(s).
[2024-03-07T16:33:08.718Z]     
[2024-03-07T16:33:08.718Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.718Z]         """
[2024-03-07T16:33:08.718Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.718Z]         results: list[object] = []
[2024-03-07T16:33:08.718Z]         exception = None
[2024-03-07T16:33:08.718Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.718Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.718Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.718Z]             try:
[2024-03-07T16:33:08.718Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.718Z]                     try:
[2024-03-07T16:33:08.718Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.718Z]                     except KeyError:
[2024-03-07T16:33:08.718Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.718Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.718Z]                                 raise HookCallError(
[2024-03-07T16:33:08.718Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.718Z]                                 )
[2024-03-07T16:33:08.718Z]     
[2024-03-07T16:33:08.718Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.718Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.718Z]                         try:
[2024-03-07T16:33:08.718Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.718Z]                             # which is the desired response.
[2024-03-07T16:33:08.718Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.718Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.718Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.718Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.718Z]                         except StopIteration:
[2024-03-07T16:33:08.718Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.718Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.718Z]                         try:
[2024-03-07T16:33:08.718Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.718Z]                             # which is the desired response.
[2024-03-07T16:33:08.718Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.718Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.718Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.719Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.719Z]                         except StopIteration:
[2024-03-07T16:33:08.719Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.719Z]                     else:
[2024-03-07T16:33:08.719Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.719Z]                         if res is not None:
[2024-03-07T16:33:08.719Z]                             results.append(res)
[2024-03-07T16:33:08.719Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.719Z]                                 break
[2024-03-07T16:33:08.719Z]             except BaseException as exc:
[2024-03-07T16:33:08.719Z]                 exception = exc
[2024-03-07T16:33:08.719Z]         finally:
[2024-03-07T16:33:08.719Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.719Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.719Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.719Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.719Z]                 else:
[2024-03-07T16:33:08.719Z]                     result = results
[2024-03-07T16:33:08.719Z]     
[2024-03-07T16:33:08.719Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.719Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.719Z]                     try:
[2024-03-07T16:33:08.719Z]                         if exception is not None:
[2024-03-07T16:33:08.719Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.719Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.719Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.719Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.719Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.719Z] >           return (yield)
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.719Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.719Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.719Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z]     def _multicall(
[2024-03-07T16:33:08.719Z]         hook_name: str,
[2024-03-07T16:33:08.719Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.719Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.719Z]         firstresult: bool,
[2024-03-07T16:33:08.719Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.719Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.719Z]         result(s).
[2024-03-07T16:33:08.719Z]     
[2024-03-07T16:33:08.719Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.719Z]         """
[2024-03-07T16:33:08.719Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.719Z]         results: list[object] = []
[2024-03-07T16:33:08.719Z]         exception = None
[2024-03-07T16:33:08.719Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.719Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.719Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.719Z]             try:
[2024-03-07T16:33:08.719Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.719Z]                     try:
[2024-03-07T16:33:08.719Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.719Z]                     except KeyError:
[2024-03-07T16:33:08.719Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.719Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.719Z]                                 raise HookCallError(
[2024-03-07T16:33:08.719Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.719Z]                                 )
[2024-03-07T16:33:08.719Z]     
[2024-03-07T16:33:08.719Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.719Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.719Z]                         try:
[2024-03-07T16:33:08.719Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.719Z]                             # which is the desired response.
[2024-03-07T16:33:08.719Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.719Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.719Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.719Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.719Z]                         except StopIteration:
[2024-03-07T16:33:08.719Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.719Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.719Z]                         try:
[2024-03-07T16:33:08.719Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.719Z]                             # which is the desired response.
[2024-03-07T16:33:08.719Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.719Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.719Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.719Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.719Z]                         except StopIteration:
[2024-03-07T16:33:08.719Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.719Z]                     else:
[2024-03-07T16:33:08.719Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.719Z]                         if res is not None:
[2024-03-07T16:33:08.719Z]                             results.append(res)
[2024-03-07T16:33:08.719Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.719Z]                                 break
[2024-03-07T16:33:08.719Z]             except BaseException as exc:
[2024-03-07T16:33:08.719Z]                 exception = exc
[2024-03-07T16:33:08.719Z]         finally:
[2024-03-07T16:33:08.719Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.719Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.719Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.719Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.719Z]                 else:
[2024-03-07T16:33:08.719Z]                     result = results
[2024-03-07T16:33:08.719Z]     
[2024-03-07T16:33:08.719Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.719Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.719Z]                     try:
[2024-03-07T16:33:08.719Z]                         if exception is not None:
[2024-03-07T16:33:08.719Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.719Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.719Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.719Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.719Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.719Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.719Z]             try:
[2024-03-07T16:33:08.719Z] >               yield
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.719Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.719Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.719Z] caller_kwargs = {'item': <IPyNbCell Cell 3>}, firstresult = False
[2024-03-07T16:33:08.719Z] 
[2024-03-07T16:33:08.719Z]     def _multicall(
[2024-03-07T16:33:08.719Z]         hook_name: str,
[2024-03-07T16:33:08.719Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.719Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.719Z]         firstresult: bool,
[2024-03-07T16:33:08.720Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.720Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.720Z]         result(s).
[2024-03-07T16:33:08.720Z]     
[2024-03-07T16:33:08.720Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.720Z]         """
[2024-03-07T16:33:08.720Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.720Z]         results: list[object] = []
[2024-03-07T16:33:08.720Z]         exception = None
[2024-03-07T16:33:08.720Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.720Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.720Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.720Z]             try:
[2024-03-07T16:33:08.720Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.720Z]                     try:
[2024-03-07T16:33:08.720Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.720Z]                     except KeyError:
[2024-03-07T16:33:08.720Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.720Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.720Z]                                 raise HookCallError(
[2024-03-07T16:33:08.720Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.720Z]                                 )
[2024-03-07T16:33:08.720Z]     
[2024-03-07T16:33:08.720Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.720Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.720Z]                         try:
[2024-03-07T16:33:08.720Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.720Z]                             # which is the desired response.
[2024-03-07T16:33:08.720Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.720Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.720Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.720Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.720Z]                         except StopIteration:
[2024-03-07T16:33:08.720Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.720Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.720Z]                         try:
[2024-03-07T16:33:08.720Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.720Z]                             # which is the desired response.
[2024-03-07T16:33:08.720Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.720Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.720Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.720Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.720Z]                         except StopIteration:
[2024-03-07T16:33:08.720Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.720Z]                     else:
[2024-03-07T16:33:08.720Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.720Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.720Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.720Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.720Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.720Z] item = <IPyNbCell Cell 3>
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.720Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.720Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.720Z]     
[2024-03-07T16:33:08.720Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.720Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.720Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.720Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.720Z]             if exc:
[2024-03-07T16:33:08.720Z] >               raise exc
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.720Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.720Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abbb08550>
[2024-03-07T16:33:08.720Z] when = 'setup'
[2024-03-07T16:33:08.720Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z]     @classmethod
[2024-03-07T16:33:08.720Z]     def from_call(
[2024-03-07T16:33:08.720Z]         cls,
[2024-03-07T16:33:08.720Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.720Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.720Z]         reraise: Optional[
[2024-03-07T16:33:08.720Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.720Z]         ] = None,
[2024-03-07T16:33:08.720Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.720Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.720Z]     
[2024-03-07T16:33:08.720Z]         :param func:
[2024-03-07T16:33:08.720Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.720Z]         :param when:
[2024-03-07T16:33:08.720Z]             The phase in which the function is called.
[2024-03-07T16:33:08.720Z]         :param reraise:
[2024-03-07T16:33:08.720Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.720Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.720Z]         """
[2024-03-07T16:33:08.720Z]         excinfo = None
[2024-03-07T16:33:08.720Z]         start = timing.time()
[2024-03-07T16:33:08.720Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.720Z]         try:
[2024-03-07T16:33:08.720Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.720Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.720Z]     )
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.720Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.720Z] kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.720Z]         """Call the hook.
[2024-03-07T16:33:08.720Z]     
[2024-03-07T16:33:08.720Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.720Z]         specification.
[2024-03-07T16:33:08.720Z]     
[2024-03-07T16:33:08.720Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.720Z]         :ref:`calling`.
[2024-03-07T16:33:08.720Z]         """
[2024-03-07T16:33:08.720Z]         assert (
[2024-03-07T16:33:08.720Z]             not self.is_historic()
[2024-03-07T16:33:08.720Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.720Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.720Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.720Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.720Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.720Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.720Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.720Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.720Z] kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.720Z] 
[2024-03-07T16:33:08.720Z]     def _hookexec(
[2024-03-07T16:33:08.720Z]         self,
[2024-03-07T16:33:08.720Z]         hook_name: str,
[2024-03-07T16:33:08.720Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.721Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.721Z]         firstresult: bool,
[2024-03-07T16:33:08.721Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.721Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.721Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.721Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.721Z] 
[2024-03-07T16:33:08.721Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.721Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.721Z] 
[2024-03-07T16:33:08.721Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.721Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.721Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.721Z] 
[2024-03-07T16:33:08.721Z]     def _multicall(
[2024-03-07T16:33:08.721Z]         hook_name: str,
[2024-03-07T16:33:08.721Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.721Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.721Z]         firstresult: bool,
[2024-03-07T16:33:08.721Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.721Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.721Z]         result(s).
[2024-03-07T16:33:08.721Z]     
[2024-03-07T16:33:08.721Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.721Z]         """
[2024-03-07T16:33:08.721Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.721Z]         results: list[object] = []
[2024-03-07T16:33:08.721Z]         exception = None
[2024-03-07T16:33:08.721Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.721Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.721Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.721Z]             try:
[2024-03-07T16:33:08.721Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.721Z]                     try:
[2024-03-07T16:33:08.721Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.721Z]                     except KeyError:
[2024-03-07T16:33:08.721Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.721Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.721Z]                                 raise HookCallError(
[2024-03-07T16:33:08.721Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.721Z]                                 )
[2024-03-07T16:33:08.721Z]     
[2024-03-07T16:33:08.721Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.721Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.721Z]                         try:
[2024-03-07T16:33:08.721Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.721Z]                             # which is the desired response.
[2024-03-07T16:33:08.721Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.721Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.721Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.721Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.721Z]                         except StopIteration:
[2024-03-07T16:33:08.721Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.721Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.721Z]                         try:
[2024-03-07T16:33:08.721Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.721Z]                             # which is the desired response.
[2024-03-07T16:33:08.721Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.721Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.721Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.721Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.721Z]                         except StopIteration:
[2024-03-07T16:33:08.721Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.721Z]                     else:
[2024-03-07T16:33:08.721Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.721Z]                         if res is not None:
[2024-03-07T16:33:08.721Z]                             results.append(res)
[2024-03-07T16:33:08.721Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.721Z]                                 break
[2024-03-07T16:33:08.721Z]             except BaseException as exc:
[2024-03-07T16:33:08.721Z]                 exception = exc
[2024-03-07T16:33:08.721Z]         finally:
[2024-03-07T16:33:08.721Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.721Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.721Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.721Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.721Z]                 else:
[2024-03-07T16:33:08.721Z]                     result = results
[2024-03-07T16:33:08.721Z]     
[2024-03-07T16:33:08.721Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.721Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.721Z]                     try:
[2024-03-07T16:33:08.721Z]                         if exception is not None:
[2024-03-07T16:33:08.721Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.721Z]                         else:
[2024-03-07T16:33:08.721Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.721Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.721Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.721Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.721Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.721Z]                     except StopIteration as si:
[2024-03-07T16:33:08.721Z]                         result = si.value
[2024-03-07T16:33:08.721Z]                         exception = None
[2024-03-07T16:33:08.721Z]                         continue
[2024-03-07T16:33:08.721Z]                     except BaseException as e:
[2024-03-07T16:33:08.721Z]                         exception = e
[2024-03-07T16:33:08.721Z]                         continue
[2024-03-07T16:33:08.721Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.721Z]     
[2024-03-07T16:33:08.721Z]                 if exception is not None:
[2024-03-07T16:33:08.721Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.721Z] 
[2024-03-07T16:33:08.721Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.721Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.721Z] 
[2024-03-07T16:33:08.721Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.721Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.721Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.721Z] 
[2024-03-07T16:33:08.721Z]     def _multicall(
[2024-03-07T16:33:08.721Z]         hook_name: str,
[2024-03-07T16:33:08.721Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.721Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.721Z]         firstresult: bool,
[2024-03-07T16:33:08.721Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.721Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.721Z]         result(s).
[2024-03-07T16:33:08.721Z]     
[2024-03-07T16:33:08.721Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.721Z]         """
[2024-03-07T16:33:08.721Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.721Z]         results: list[object] = []
[2024-03-07T16:33:08.721Z]         exception = None
[2024-03-07T16:33:08.721Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.721Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.721Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.721Z]             try:
[2024-03-07T16:33:08.721Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.721Z]                     try:
[2024-03-07T16:33:08.721Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.721Z]                     except KeyError:
[2024-03-07T16:33:08.721Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.721Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.721Z]                                 raise HookCallError(
[2024-03-07T16:33:08.721Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.721Z]                                 )
[2024-03-07T16:33:08.721Z]     
[2024-03-07T16:33:08.721Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.721Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.721Z]                         try:
[2024-03-07T16:33:08.721Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.721Z]                             # which is the desired response.
[2024-03-07T16:33:08.721Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.721Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.721Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.721Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.722Z]                         except StopIteration:
[2024-03-07T16:33:08.722Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.722Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.722Z]                         try:
[2024-03-07T16:33:08.722Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.722Z]                             # which is the desired response.
[2024-03-07T16:33:08.722Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.722Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.722Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.722Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.722Z]                         except StopIteration:
[2024-03-07T16:33:08.722Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.722Z]                     else:
[2024-03-07T16:33:08.722Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.722Z]                         if res is not None:
[2024-03-07T16:33:08.722Z]                             results.append(res)
[2024-03-07T16:33:08.722Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.722Z]                                 break
[2024-03-07T16:33:08.722Z]             except BaseException as exc:
[2024-03-07T16:33:08.722Z]                 exception = exc
[2024-03-07T16:33:08.722Z]         finally:
[2024-03-07T16:33:08.722Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.722Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.722Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.722Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.722Z]                 else:
[2024-03-07T16:33:08.722Z]                     result = results
[2024-03-07T16:33:08.722Z]     
[2024-03-07T16:33:08.722Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.722Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.722Z]                     try:
[2024-03-07T16:33:08.722Z]                         if exception is not None:
[2024-03-07T16:33:08.722Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.722Z] 
[2024-03-07T16:33:08.722Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.722Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.722Z] 
[2024-03-07T16:33:08.722Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.722Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.722Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.722Z] 
[2024-03-07T16:33:08.722Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.722Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.722Z] 
[2024-03-07T16:33:08.722Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.722Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.722Z]             try:
[2024-03-07T16:33:08.722Z] >               yield
[2024-03-07T16:33:08.722Z] 
[2024-03-07T16:33:08.722Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.722Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.722Z] 
[2024-03-07T16:33:08.722Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.722Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.722Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.722Z] 
[2024-03-07T16:33:08.722Z]     def _multicall(
[2024-03-07T16:33:08.722Z]         hook_name: str,
[2024-03-07T16:33:08.722Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.722Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.722Z]         firstresult: bool,
[2024-03-07T16:33:08.722Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.722Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.722Z]         result(s).
[2024-03-07T16:33:08.722Z]     
[2024-03-07T16:33:08.722Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.722Z]         """
[2024-03-07T16:33:08.722Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.722Z]         results: list[object] = []
[2024-03-07T16:33:08.722Z]         exception = None
[2024-03-07T16:33:08.722Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.722Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.722Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.722Z]             try:
[2024-03-07T16:33:08.722Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.722Z]                     try:
[2024-03-07T16:33:08.722Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.722Z]                     except KeyError:
[2024-03-07T16:33:08.722Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.722Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.722Z]                                 raise HookCallError(
[2024-03-07T16:33:08.722Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.722Z]                                 )
[2024-03-07T16:33:08.722Z]     
[2024-03-07T16:33:08.722Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.722Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.722Z]                         try:
[2024-03-07T16:33:08.722Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.722Z]                             # which is the desired response.
[2024-03-07T16:33:08.722Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.722Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.722Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.722Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.722Z]                         except StopIteration:
[2024-03-07T16:33:08.722Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.722Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.722Z]                         try:
[2024-03-07T16:33:08.722Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.722Z]                             # which is the desired response.
[2024-03-07T16:33:08.722Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.722Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.722Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.722Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.722Z]                         except StopIteration:
[2024-03-07T16:33:08.722Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.722Z]                     else:
[2024-03-07T16:33:08.722Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.722Z]                         if res is not None:
[2024-03-07T16:33:08.722Z]                             results.append(res)
[2024-03-07T16:33:08.722Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.722Z]                                 break
[2024-03-07T16:33:08.722Z]             except BaseException as exc:
[2024-03-07T16:33:08.722Z]                 exception = exc
[2024-03-07T16:33:08.722Z]         finally:
[2024-03-07T16:33:08.722Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.722Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.722Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.722Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.722Z]                 else:
[2024-03-07T16:33:08.722Z]                     result = results
[2024-03-07T16:33:08.722Z]     
[2024-03-07T16:33:08.722Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.722Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.722Z]                     try:
[2024-03-07T16:33:08.722Z]                         if exception is not None:
[2024-03-07T16:33:08.722Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.722Z] 
[2024-03-07T16:33:08.722Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.722Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.722Z] 
[2024-03-07T16:33:08.722Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.722Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.722Z] 
[2024-03-07T16:33:08.722Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.722Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.722Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.722Z]     
[2024-03-07T16:33:08.722Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.722Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.722Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.722Z] 
[2024-03-07T16:33:08.722Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.723Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.723Z] 
[2024-03-07T16:33:08.723Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.723Z] item = <IPyNbCell Cell 2>, when = 'setup'
[2024-03-07T16:33:08.723Z] 
[2024-03-07T16:33:08.723Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.723Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.723Z]         with catching_logs(
[2024-03-07T16:33:08.723Z]             self.caplog_handler,
[2024-03-07T16:33:08.723Z]             level=self.log_level,
[2024-03-07T16:33:08.723Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.723Z]             self.report_handler,
[2024-03-07T16:33:08.723Z]             level=self.log_level,
[2024-03-07T16:33:08.723Z]         ) as report_handler:
[2024-03-07T16:33:08.723Z]             caplog_handler.reset()
[2024-03-07T16:33:08.723Z]             report_handler.reset()
[2024-03-07T16:33:08.723Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.723Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.723Z]     
[2024-03-07T16:33:08.723Z]             try:
[2024-03-07T16:33:08.723Z] >               yield
[2024-03-07T16:33:08.723Z] 
[2024-03-07T16:33:08.723Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.723Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.723Z] 
[2024-03-07T16:33:08.723Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.723Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.723Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.723Z] 
[2024-03-07T16:33:08.723Z]     def _multicall(
[2024-03-07T16:33:08.723Z]         hook_name: str,
[2024-03-07T16:33:08.723Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.723Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.723Z]         firstresult: bool,
[2024-03-07T16:33:08.723Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.723Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.723Z]         result(s).
[2024-03-07T16:33:08.723Z]     
[2024-03-07T16:33:08.723Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.723Z]         """
[2024-03-07T16:33:08.723Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.723Z]         results: list[object] = []
[2024-03-07T16:33:08.723Z]         exception = None
[2024-03-07T16:33:08.723Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.723Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.723Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.723Z]             try:
[2024-03-07T16:33:08.723Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.723Z]                     try:
[2024-03-07T16:33:08.723Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.723Z]                     except KeyError:
[2024-03-07T16:33:08.723Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.723Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.723Z]                                 raise HookCallError(
[2024-03-07T16:33:08.723Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.723Z]                                 )
[2024-03-07T16:33:08.723Z]     
[2024-03-07T16:33:08.723Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.723Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.723Z]                         try:
[2024-03-07T16:33:08.723Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.723Z]                             # which is the desired response.
[2024-03-07T16:33:08.723Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.723Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.723Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.723Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.723Z]                         except StopIteration:
[2024-03-07T16:33:08.723Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.723Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.723Z]                         try:
[2024-03-07T16:33:08.723Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.723Z]                             # which is the desired response.
[2024-03-07T16:33:08.723Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.723Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.723Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.723Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.723Z]                         except StopIteration:
[2024-03-07T16:33:08.723Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.723Z]                     else:
[2024-03-07T16:33:08.723Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.723Z]                         if res is not None:
[2024-03-07T16:33:08.723Z]                             results.append(res)
[2024-03-07T16:33:08.723Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.723Z]                                 break
[2024-03-07T16:33:08.723Z]             except BaseException as exc:
[2024-03-07T16:33:08.723Z]                 exception = exc
[2024-03-07T16:33:08.723Z]         finally:
[2024-03-07T16:33:08.723Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.723Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.723Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.723Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.723Z]                 else:
[2024-03-07T16:33:08.723Z]                     result = results
[2024-03-07T16:33:08.723Z]     
[2024-03-07T16:33:08.723Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.723Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.723Z]                     try:
[2024-03-07T16:33:08.723Z]                         if exception is not None:
[2024-03-07T16:33:08.723Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.723Z] 
[2024-03-07T16:33:08.723Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.723Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.723Z] 
[2024-03-07T16:33:08.723Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.723Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.723Z] 
[2024-03-07T16:33:08.723Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.723Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.723Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.723Z] >           return (yield)
[2024-03-07T16:33:08.723Z] 
[2024-03-07T16:33:08.723Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.723Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.723Z] 
[2024-03-07T16:33:08.723Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.723Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.723Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.723Z] 
[2024-03-07T16:33:08.723Z]     def _multicall(
[2024-03-07T16:33:08.723Z]         hook_name: str,
[2024-03-07T16:33:08.723Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.723Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.723Z]         firstresult: bool,
[2024-03-07T16:33:08.723Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.723Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.723Z]         result(s).
[2024-03-07T16:33:08.723Z]     
[2024-03-07T16:33:08.723Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.723Z]         """
[2024-03-07T16:33:08.723Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.723Z]         results: list[object] = []
[2024-03-07T16:33:08.723Z]         exception = None
[2024-03-07T16:33:08.723Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.723Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.723Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.723Z]             try:
[2024-03-07T16:33:08.723Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.723Z]                     try:
[2024-03-07T16:33:08.723Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.723Z]                     except KeyError:
[2024-03-07T16:33:08.723Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.723Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.723Z]                                 raise HookCallError(
[2024-03-07T16:33:08.723Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.723Z]                                 )
[2024-03-07T16:33:08.723Z]     
[2024-03-07T16:33:08.723Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.724Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.724Z]                         try:
[2024-03-07T16:33:08.724Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.724Z]                             # which is the desired response.
[2024-03-07T16:33:08.724Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.724Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.724Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.724Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.724Z]                         except StopIteration:
[2024-03-07T16:33:08.724Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.724Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.724Z]                         try:
[2024-03-07T16:33:08.724Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.724Z]                             # which is the desired response.
[2024-03-07T16:33:08.724Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.724Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.724Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.724Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.724Z]                         except StopIteration:
[2024-03-07T16:33:08.724Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.724Z]                     else:
[2024-03-07T16:33:08.724Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.724Z]                         if res is not None:
[2024-03-07T16:33:08.724Z]                             results.append(res)
[2024-03-07T16:33:08.724Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.724Z]                                 break
[2024-03-07T16:33:08.724Z]             except BaseException as exc:
[2024-03-07T16:33:08.724Z]                 exception = exc
[2024-03-07T16:33:08.724Z]         finally:
[2024-03-07T16:33:08.724Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.724Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.724Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.724Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.724Z]                 else:
[2024-03-07T16:33:08.724Z]                     result = results
[2024-03-07T16:33:08.724Z]     
[2024-03-07T16:33:08.724Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.724Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.724Z]                     try:
[2024-03-07T16:33:08.724Z]                         if exception is not None:
[2024-03-07T16:33:08.724Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.724Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.724Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.724Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.724Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.724Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.724Z]             try:
[2024-03-07T16:33:08.724Z] >               yield
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.724Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.724Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.724Z] caller_kwargs = {'item': <IPyNbCell Cell 2>}, firstresult = False
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z]     def _multicall(
[2024-03-07T16:33:08.724Z]         hook_name: str,
[2024-03-07T16:33:08.724Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.724Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.724Z]         firstresult: bool,
[2024-03-07T16:33:08.724Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.724Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.724Z]         result(s).
[2024-03-07T16:33:08.724Z]     
[2024-03-07T16:33:08.724Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.724Z]         """
[2024-03-07T16:33:08.724Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.724Z]         results: list[object] = []
[2024-03-07T16:33:08.724Z]         exception = None
[2024-03-07T16:33:08.724Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.724Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.724Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.724Z]             try:
[2024-03-07T16:33:08.724Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.724Z]                     try:
[2024-03-07T16:33:08.724Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.724Z]                     except KeyError:
[2024-03-07T16:33:08.724Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.724Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.724Z]                                 raise HookCallError(
[2024-03-07T16:33:08.724Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.724Z]                                 )
[2024-03-07T16:33:08.724Z]     
[2024-03-07T16:33:08.724Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.724Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.724Z]                         try:
[2024-03-07T16:33:08.724Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.724Z]                             # which is the desired response.
[2024-03-07T16:33:08.724Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.724Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.724Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.724Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.724Z]                         except StopIteration:
[2024-03-07T16:33:08.724Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.724Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.724Z]                         try:
[2024-03-07T16:33:08.724Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.724Z]                             # which is the desired response.
[2024-03-07T16:33:08.724Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.724Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.724Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.724Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.724Z]                         except StopIteration:
[2024-03-07T16:33:08.724Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.724Z]                     else:
[2024-03-07T16:33:08.724Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.724Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.724Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.724Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.724Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.724Z] item = <IPyNbCell Cell 2>
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.724Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.724Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.724Z]     
[2024-03-07T16:33:08.724Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.724Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.724Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.724Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.724Z]             if exc:
[2024-03-07T16:33:08.724Z] >               raise exc
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.724Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.724Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abc051900>
[2024-03-07T16:33:08.724Z] when = 'setup'
[2024-03-07T16:33:08.724Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.724Z] 
[2024-03-07T16:33:08.724Z]     @classmethod
[2024-03-07T16:33:08.725Z]     def from_call(
[2024-03-07T16:33:08.725Z]         cls,
[2024-03-07T16:33:08.725Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.725Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.725Z]         reraise: Optional[
[2024-03-07T16:33:08.725Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.725Z]         ] = None,
[2024-03-07T16:33:08.725Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.725Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.725Z]     
[2024-03-07T16:33:08.725Z]         :param func:
[2024-03-07T16:33:08.725Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.725Z]         :param when:
[2024-03-07T16:33:08.725Z]             The phase in which the function is called.
[2024-03-07T16:33:08.725Z]         :param reraise:
[2024-03-07T16:33:08.725Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.725Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.725Z]         """
[2024-03-07T16:33:08.725Z]         excinfo = None
[2024-03-07T16:33:08.725Z]         start = timing.time()
[2024-03-07T16:33:08.725Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.725Z]         try:
[2024-03-07T16:33:08.725Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.725Z] 
[2024-03-07T16:33:08.725Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.725Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.725Z] 
[2024-03-07T16:33:08.725Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.725Z]     )
[2024-03-07T16:33:08.725Z] 
[2024-03-07T16:33:08.725Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.725Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.725Z] 
[2024-03-07T16:33:08.725Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.725Z] kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.725Z] 
[2024-03-07T16:33:08.725Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.725Z]         """Call the hook.
[2024-03-07T16:33:08.725Z]     
[2024-03-07T16:33:08.725Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.725Z]         specification.
[2024-03-07T16:33:08.725Z]     
[2024-03-07T16:33:08.725Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.725Z]         :ref:`calling`.
[2024-03-07T16:33:08.725Z]         """
[2024-03-07T16:33:08.725Z]         assert (
[2024-03-07T16:33:08.725Z]             not self.is_historic()
[2024-03-07T16:33:08.725Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.725Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.725Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.725Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.725Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.725Z] 
[2024-03-07T16:33:08.725Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.725Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.725Z] 
[2024-03-07T16:33:08.725Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.725Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.725Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.725Z] kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.725Z] 
[2024-03-07T16:33:08.725Z]     def _hookexec(
[2024-03-07T16:33:08.725Z]         self,
[2024-03-07T16:33:08.725Z]         hook_name: str,
[2024-03-07T16:33:08.725Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.725Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.725Z]         firstresult: bool,
[2024-03-07T16:33:08.725Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.725Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.725Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.725Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.725Z] 
[2024-03-07T16:33:08.725Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.725Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.725Z] 
[2024-03-07T16:33:08.725Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.725Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.725Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.725Z] 
[2024-03-07T16:33:08.725Z]     def _multicall(
[2024-03-07T16:33:08.725Z]         hook_name: str,
[2024-03-07T16:33:08.725Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.725Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.725Z]         firstresult: bool,
[2024-03-07T16:33:08.725Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.725Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.725Z]         result(s).
[2024-03-07T16:33:08.725Z]     
[2024-03-07T16:33:08.725Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.725Z]         """
[2024-03-07T16:33:08.725Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.725Z]         results: list[object] = []
[2024-03-07T16:33:08.725Z]         exception = None
[2024-03-07T16:33:08.725Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.725Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.725Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.725Z]             try:
[2024-03-07T16:33:08.725Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.725Z]                     try:
[2024-03-07T16:33:08.725Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.725Z]                     except KeyError:
[2024-03-07T16:33:08.725Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.725Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.725Z]                                 raise HookCallError(
[2024-03-07T16:33:08.725Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.725Z]                                 )
[2024-03-07T16:33:08.725Z]     
[2024-03-07T16:33:08.725Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.725Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.725Z]                         try:
[2024-03-07T16:33:08.725Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.725Z]                             # which is the desired response.
[2024-03-07T16:33:08.725Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.725Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.725Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.725Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.725Z]                         except StopIteration:
[2024-03-07T16:33:08.725Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.725Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.725Z]                         try:
[2024-03-07T16:33:08.725Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.725Z]                             # which is the desired response.
[2024-03-07T16:33:08.725Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.725Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.725Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.725Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.725Z]                         except StopIteration:
[2024-03-07T16:33:08.725Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.725Z]                     else:
[2024-03-07T16:33:08.725Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.725Z]                         if res is not None:
[2024-03-07T16:33:08.725Z]                             results.append(res)
[2024-03-07T16:33:08.725Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.725Z]                                 break
[2024-03-07T16:33:08.725Z]             except BaseException as exc:
[2024-03-07T16:33:08.725Z]                 exception = exc
[2024-03-07T16:33:08.725Z]         finally:
[2024-03-07T16:33:08.725Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.725Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.725Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.725Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.725Z]                 else:
[2024-03-07T16:33:08.725Z]                     result = results
[2024-03-07T16:33:08.725Z]     
[2024-03-07T16:33:08.725Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.725Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.725Z]                     try:
[2024-03-07T16:33:08.725Z]                         if exception is not None:
[2024-03-07T16:33:08.725Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.725Z]                         else:
[2024-03-07T16:33:08.725Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.725Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.725Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.726Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.726Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.726Z]                     except StopIteration as si:
[2024-03-07T16:33:08.726Z]                         result = si.value
[2024-03-07T16:33:08.726Z]                         exception = None
[2024-03-07T16:33:08.726Z]                         continue
[2024-03-07T16:33:08.726Z]                     except BaseException as e:
[2024-03-07T16:33:08.726Z]                         exception = e
[2024-03-07T16:33:08.726Z]                         continue
[2024-03-07T16:33:08.726Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.726Z]     
[2024-03-07T16:33:08.726Z]                 if exception is not None:
[2024-03-07T16:33:08.726Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.726Z] 
[2024-03-07T16:33:08.726Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.726Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.726Z] 
[2024-03-07T16:33:08.726Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.726Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.726Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.726Z] 
[2024-03-07T16:33:08.726Z]     def _multicall(
[2024-03-07T16:33:08.726Z]         hook_name: str,
[2024-03-07T16:33:08.726Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.726Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.726Z]         firstresult: bool,
[2024-03-07T16:33:08.726Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.726Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.726Z]         result(s).
[2024-03-07T16:33:08.726Z]     
[2024-03-07T16:33:08.726Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.726Z]         """
[2024-03-07T16:33:08.726Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.726Z]         results: list[object] = []
[2024-03-07T16:33:08.726Z]         exception = None
[2024-03-07T16:33:08.726Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.726Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.726Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.726Z]             try:
[2024-03-07T16:33:08.726Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.726Z]                     try:
[2024-03-07T16:33:08.726Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.726Z]                     except KeyError:
[2024-03-07T16:33:08.726Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.726Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.726Z]                                 raise HookCallError(
[2024-03-07T16:33:08.726Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.726Z]                                 )
[2024-03-07T16:33:08.726Z]     
[2024-03-07T16:33:08.726Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.726Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.726Z]                         try:
[2024-03-07T16:33:08.726Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.726Z]                             # which is the desired response.
[2024-03-07T16:33:08.726Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.726Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.726Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.726Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.726Z]                         except StopIteration:
[2024-03-07T16:33:08.726Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.726Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.726Z]                         try:
[2024-03-07T16:33:08.726Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.726Z]                             # which is the desired response.
[2024-03-07T16:33:08.726Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.726Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.726Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.726Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.726Z]                         except StopIteration:
[2024-03-07T16:33:08.726Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.726Z]                     else:
[2024-03-07T16:33:08.726Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.726Z]                         if res is not None:
[2024-03-07T16:33:08.726Z]                             results.append(res)
[2024-03-07T16:33:08.726Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.726Z]                                 break
[2024-03-07T16:33:08.726Z]             except BaseException as exc:
[2024-03-07T16:33:08.726Z]                 exception = exc
[2024-03-07T16:33:08.726Z]         finally:
[2024-03-07T16:33:08.726Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.726Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.726Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.726Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.726Z]                 else:
[2024-03-07T16:33:08.726Z]                     result = results
[2024-03-07T16:33:08.726Z]     
[2024-03-07T16:33:08.726Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.726Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.726Z]                     try:
[2024-03-07T16:33:08.726Z]                         if exception is not None:
[2024-03-07T16:33:08.726Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.726Z] 
[2024-03-07T16:33:08.726Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.726Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.726Z] 
[2024-03-07T16:33:08.726Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.726Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.726Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.726Z] 
[2024-03-07T16:33:08.726Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.726Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.726Z] 
[2024-03-07T16:33:08.726Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.726Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.726Z]             try:
[2024-03-07T16:33:08.726Z] >               yield
[2024-03-07T16:33:08.726Z] 
[2024-03-07T16:33:08.726Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.726Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.726Z] 
[2024-03-07T16:33:08.726Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.726Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.726Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.726Z] 
[2024-03-07T16:33:08.726Z]     def _multicall(
[2024-03-07T16:33:08.726Z]         hook_name: str,
[2024-03-07T16:33:08.726Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.726Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.726Z]         firstresult: bool,
[2024-03-07T16:33:08.726Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.726Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.726Z]         result(s).
[2024-03-07T16:33:08.726Z]     
[2024-03-07T16:33:08.726Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.726Z]         """
[2024-03-07T16:33:08.726Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.726Z]         results: list[object] = []
[2024-03-07T16:33:08.726Z]         exception = None
[2024-03-07T16:33:08.726Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.726Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.726Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.726Z]             try:
[2024-03-07T16:33:08.726Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.726Z]                     try:
[2024-03-07T16:33:08.726Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.726Z]                     except KeyError:
[2024-03-07T16:33:08.726Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.726Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.726Z]                                 raise HookCallError(
[2024-03-07T16:33:08.727Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.727Z]                                 )
[2024-03-07T16:33:08.727Z]     
[2024-03-07T16:33:08.727Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.727Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.727Z]                         try:
[2024-03-07T16:33:08.727Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.727Z]                             # which is the desired response.
[2024-03-07T16:33:08.727Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.727Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.727Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.727Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.727Z]                         except StopIteration:
[2024-03-07T16:33:08.727Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.727Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.727Z]                         try:
[2024-03-07T16:33:08.727Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.727Z]                             # which is the desired response.
[2024-03-07T16:33:08.727Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.727Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.727Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.727Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.727Z]                         except StopIteration:
[2024-03-07T16:33:08.727Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.727Z]                     else:
[2024-03-07T16:33:08.727Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.727Z]                         if res is not None:
[2024-03-07T16:33:08.727Z]                             results.append(res)
[2024-03-07T16:33:08.727Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.727Z]                                 break
[2024-03-07T16:33:08.727Z]             except BaseException as exc:
[2024-03-07T16:33:08.727Z]                 exception = exc
[2024-03-07T16:33:08.727Z]         finally:
[2024-03-07T16:33:08.727Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.727Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.727Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.727Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.727Z]                 else:
[2024-03-07T16:33:08.727Z]                     result = results
[2024-03-07T16:33:08.727Z]     
[2024-03-07T16:33:08.727Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.727Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.727Z]                     try:
[2024-03-07T16:33:08.727Z]                         if exception is not None:
[2024-03-07T16:33:08.727Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.727Z] 
[2024-03-07T16:33:08.727Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.727Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.727Z] 
[2024-03-07T16:33:08.727Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.727Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.727Z] 
[2024-03-07T16:33:08.727Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.727Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.727Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.727Z]     
[2024-03-07T16:33:08.727Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.727Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.727Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.727Z] 
[2024-03-07T16:33:08.727Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.727Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.727Z] 
[2024-03-07T16:33:08.727Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.727Z] item = <IPyNbCell Cell 1>, when = 'setup'
[2024-03-07T16:33:08.727Z] 
[2024-03-07T16:33:08.727Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.727Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.727Z]         with catching_logs(
[2024-03-07T16:33:08.727Z]             self.caplog_handler,
[2024-03-07T16:33:08.727Z]             level=self.log_level,
[2024-03-07T16:33:08.727Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.727Z]             self.report_handler,
[2024-03-07T16:33:08.727Z]             level=self.log_level,
[2024-03-07T16:33:08.727Z]         ) as report_handler:
[2024-03-07T16:33:08.727Z]             caplog_handler.reset()
[2024-03-07T16:33:08.727Z]             report_handler.reset()
[2024-03-07T16:33:08.727Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.727Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.727Z]     
[2024-03-07T16:33:08.727Z]             try:
[2024-03-07T16:33:08.727Z] >               yield
[2024-03-07T16:33:08.727Z] 
[2024-03-07T16:33:08.727Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.727Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.727Z] 
[2024-03-07T16:33:08.727Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.727Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.727Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.727Z] 
[2024-03-07T16:33:08.727Z]     def _multicall(
[2024-03-07T16:33:08.727Z]         hook_name: str,
[2024-03-07T16:33:08.727Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.727Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.727Z]         firstresult: bool,
[2024-03-07T16:33:08.727Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.727Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.727Z]         result(s).
[2024-03-07T16:33:08.727Z]     
[2024-03-07T16:33:08.727Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.727Z]         """
[2024-03-07T16:33:08.727Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.727Z]         results: list[object] = []
[2024-03-07T16:33:08.727Z]         exception = None
[2024-03-07T16:33:08.727Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.727Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.727Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.727Z]             try:
[2024-03-07T16:33:08.727Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.727Z]                     try:
[2024-03-07T16:33:08.727Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.727Z]                     except KeyError:
[2024-03-07T16:33:08.727Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.727Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.727Z]                                 raise HookCallError(
[2024-03-07T16:33:08.727Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.727Z]                                 )
[2024-03-07T16:33:08.727Z]     
[2024-03-07T16:33:08.727Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.727Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.727Z]                         try:
[2024-03-07T16:33:08.727Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.727Z]                             # which is the desired response.
[2024-03-07T16:33:08.727Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.727Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.727Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.727Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.727Z]                         except StopIteration:
[2024-03-07T16:33:08.727Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.727Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.727Z]                         try:
[2024-03-07T16:33:08.727Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.727Z]                             # which is the desired response.
[2024-03-07T16:33:08.727Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.727Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.727Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.727Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.727Z]                         except StopIteration:
[2024-03-07T16:33:08.727Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.727Z]                     else:
[2024-03-07T16:33:08.727Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.727Z]                         if res is not None:
[2024-03-07T16:33:08.727Z]                             results.append(res)
[2024-03-07T16:33:08.727Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.727Z]                                 break
[2024-03-07T16:33:08.728Z]             except BaseException as exc:
[2024-03-07T16:33:08.728Z]                 exception = exc
[2024-03-07T16:33:08.728Z]         finally:
[2024-03-07T16:33:08.728Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.728Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.728Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.728Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.728Z]                 else:
[2024-03-07T16:33:08.728Z]                     result = results
[2024-03-07T16:33:08.728Z]     
[2024-03-07T16:33:08.728Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.728Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.728Z]                     try:
[2024-03-07T16:33:08.728Z]                         if exception is not None:
[2024-03-07T16:33:08.728Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.728Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.728Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.728Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.728Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.728Z] >           return (yield)
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.728Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.728Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.728Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z]     def _multicall(
[2024-03-07T16:33:08.728Z]         hook_name: str,
[2024-03-07T16:33:08.728Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.728Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.728Z]         firstresult: bool,
[2024-03-07T16:33:08.728Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.728Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.728Z]         result(s).
[2024-03-07T16:33:08.728Z]     
[2024-03-07T16:33:08.728Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.728Z]         """
[2024-03-07T16:33:08.728Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.728Z]         results: list[object] = []
[2024-03-07T16:33:08.728Z]         exception = None
[2024-03-07T16:33:08.728Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.728Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.728Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.728Z]             try:
[2024-03-07T16:33:08.728Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.728Z]                     try:
[2024-03-07T16:33:08.728Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.728Z]                     except KeyError:
[2024-03-07T16:33:08.728Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.728Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.728Z]                                 raise HookCallError(
[2024-03-07T16:33:08.728Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.728Z]                                 )
[2024-03-07T16:33:08.728Z]     
[2024-03-07T16:33:08.728Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.728Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.728Z]                         try:
[2024-03-07T16:33:08.728Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.728Z]                             # which is the desired response.
[2024-03-07T16:33:08.728Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.728Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.728Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.728Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.728Z]                         except StopIteration:
[2024-03-07T16:33:08.728Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.728Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.728Z]                         try:
[2024-03-07T16:33:08.728Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.728Z]                             # which is the desired response.
[2024-03-07T16:33:08.728Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.728Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.728Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.728Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.728Z]                         except StopIteration:
[2024-03-07T16:33:08.728Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.728Z]                     else:
[2024-03-07T16:33:08.728Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.728Z]                         if res is not None:
[2024-03-07T16:33:08.728Z]                             results.append(res)
[2024-03-07T16:33:08.728Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.728Z]                                 break
[2024-03-07T16:33:08.728Z]             except BaseException as exc:
[2024-03-07T16:33:08.728Z]                 exception = exc
[2024-03-07T16:33:08.728Z]         finally:
[2024-03-07T16:33:08.728Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.728Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.728Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.728Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.728Z]                 else:
[2024-03-07T16:33:08.728Z]                     result = results
[2024-03-07T16:33:08.728Z]     
[2024-03-07T16:33:08.728Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.728Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.728Z]                     try:
[2024-03-07T16:33:08.728Z]                         if exception is not None:
[2024-03-07T16:33:08.728Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.728Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.728Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.728Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.728Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.728Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.728Z]             try:
[2024-03-07T16:33:08.728Z] >               yield
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.728Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.728Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.728Z] caller_kwargs = {'item': <IPyNbCell Cell 1>}, firstresult = False
[2024-03-07T16:33:08.728Z] 
[2024-03-07T16:33:08.728Z]     def _multicall(
[2024-03-07T16:33:08.728Z]         hook_name: str,
[2024-03-07T16:33:08.728Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.728Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.728Z]         firstresult: bool,
[2024-03-07T16:33:08.728Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.728Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.728Z]         result(s).
[2024-03-07T16:33:08.728Z]     
[2024-03-07T16:33:08.728Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.729Z]         """
[2024-03-07T16:33:08.729Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.729Z]         results: list[object] = []
[2024-03-07T16:33:08.729Z]         exception = None
[2024-03-07T16:33:08.729Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.729Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.729Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.729Z]             try:
[2024-03-07T16:33:08.729Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.729Z]                     try:
[2024-03-07T16:33:08.729Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.729Z]                     except KeyError:
[2024-03-07T16:33:08.729Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.729Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.729Z]                                 raise HookCallError(
[2024-03-07T16:33:08.729Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.729Z]                                 )
[2024-03-07T16:33:08.729Z]     
[2024-03-07T16:33:08.729Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.729Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.729Z]                         try:
[2024-03-07T16:33:08.729Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.729Z]                             # which is the desired response.
[2024-03-07T16:33:08.729Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.729Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.729Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.729Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.729Z]                         except StopIteration:
[2024-03-07T16:33:08.729Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.729Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.729Z]                         try:
[2024-03-07T16:33:08.729Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.729Z]                             # which is the desired response.
[2024-03-07T16:33:08.729Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.729Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.729Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.729Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.729Z]                         except StopIteration:
[2024-03-07T16:33:08.729Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.729Z]                     else:
[2024-03-07T16:33:08.729Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.729Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.729Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.729Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.729Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.729Z] item = <IPyNbCell Cell 1>
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.729Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.729Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.729Z]     
[2024-03-07T16:33:08.729Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.729Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.729Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.729Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.729Z]             if exc:
[2024-03-07T16:33:08.729Z] >               raise exc
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:504: 
[2024-03-07T16:33:08.729Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] cls = <class '_pytest.runner.CallInfo'>
[2024-03-07T16:33:08.729Z] func = <function call_runtest_hook.<locals>.<lambda> at 0x7f0abbb0b520>
[2024-03-07T16:33:08.729Z] when = 'setup'
[2024-03-07T16:33:08.729Z] reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z]     @classmethod
[2024-03-07T16:33:08.729Z]     def from_call(
[2024-03-07T16:33:08.729Z]         cls,
[2024-03-07T16:33:08.729Z]         func: Callable[[], TResult],
[2024-03-07T16:33:08.729Z]         when: Literal["collect", "setup", "call", "teardown"],
[2024-03-07T16:33:08.729Z]         reraise: Optional[
[2024-03-07T16:33:08.729Z]             Union[Type[BaseException], Tuple[Type[BaseException], ...]]
[2024-03-07T16:33:08.729Z]         ] = None,
[2024-03-07T16:33:08.729Z]     ) -> "CallInfo[TResult]":
[2024-03-07T16:33:08.729Z]         """Call func, wrapping the result in a CallInfo.
[2024-03-07T16:33:08.729Z]     
[2024-03-07T16:33:08.729Z]         :param func:
[2024-03-07T16:33:08.729Z]             The function to call. Called without arguments.
[2024-03-07T16:33:08.729Z]         :param when:
[2024-03-07T16:33:08.729Z]             The phase in which the function is called.
[2024-03-07T16:33:08.729Z]         :param reraise:
[2024-03-07T16:33:08.729Z]             Exception or exceptions that shall propagate if raised by the
[2024-03-07T16:33:08.729Z]             function, instead of being wrapped in the CallInfo.
[2024-03-07T16:33:08.729Z]         """
[2024-03-07T16:33:08.729Z]         excinfo = None
[2024-03-07T16:33:08.729Z]         start = timing.time()
[2024-03-07T16:33:08.729Z]         precise_start = timing.perf_counter()
[2024-03-07T16:33:08.729Z]         try:
[2024-03-07T16:33:08.729Z] >           result: Optional[TResult] = func()
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:342: 
[2024-03-07T16:33:08.729Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] >       lambda: ihook(item=item, **kwds), when=when, reraise=reraise
[2024-03-07T16:33:08.729Z]     )
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:263: 
[2024-03-07T16:33:08.729Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] self = <HookCaller 'pytest_runtest_setup'>
[2024-03-07T16:33:08.729Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z]     def __call__(self, **kwargs: object) -> Any:
[2024-03-07T16:33:08.729Z]         """Call the hook.
[2024-03-07T16:33:08.729Z]     
[2024-03-07T16:33:08.729Z]         Only accepts keyword arguments, which should match the hook
[2024-03-07T16:33:08.729Z]         specification.
[2024-03-07T16:33:08.729Z]     
[2024-03-07T16:33:08.729Z]         Returns the result(s) of calling all registered plugins, see
[2024-03-07T16:33:08.729Z]         :ref:`calling`.
[2024-03-07T16:33:08.729Z]         """
[2024-03-07T16:33:08.729Z]         assert (
[2024-03-07T16:33:08.729Z]             not self.is_historic()
[2024-03-07T16:33:08.729Z]         ), "Cannot directly call a historic hook - use call_historic instead."
[2024-03-07T16:33:08.729Z]         self._verify_all_args_are_provided(kwargs)
[2024-03-07T16:33:08.729Z]         firstresult = self.spec.opts.get("firstresult", False) if self.spec else False
[2024-03-07T16:33:08.729Z]         # Copy because plugins may register other plugins during iteration (#438).
[2024-03-07T16:33:08.729Z] >       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_hooks.py:501: 
[2024-03-07T16:33:08.729Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] self = <_pytest.config.PytestPluginManager object at 0x7f0abfb701f0>
[2024-03-07T16:33:08.729Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.729Z] methods = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.729Z] kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z]     def _hookexec(
[2024-03-07T16:33:08.729Z]         self,
[2024-03-07T16:33:08.729Z]         hook_name: str,
[2024-03-07T16:33:08.729Z]         methods: Sequence[HookImpl],
[2024-03-07T16:33:08.729Z]         kwargs: Mapping[str, object],
[2024-03-07T16:33:08.729Z]         firstresult: bool,
[2024-03-07T16:33:08.729Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.729Z]         # called from all hookcaller instances.
[2024-03-07T16:33:08.729Z]         # enable_tracing will set its own wrapping function at self._inner_hookexec
[2024-03-07T16:33:08.729Z] >       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_manager.py:119: 
[2024-03-07T16:33:08.729Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.729Z] 
[2024-03-07T16:33:08.729Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.730Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.730Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.730Z] 
[2024-03-07T16:33:08.730Z]     def _multicall(
[2024-03-07T16:33:08.730Z]         hook_name: str,
[2024-03-07T16:33:08.730Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.730Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.730Z]         firstresult: bool,
[2024-03-07T16:33:08.730Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.730Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.730Z]         result(s).
[2024-03-07T16:33:08.730Z]     
[2024-03-07T16:33:08.730Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.730Z]         """
[2024-03-07T16:33:08.730Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.730Z]         results: list[object] = []
[2024-03-07T16:33:08.730Z]         exception = None
[2024-03-07T16:33:08.730Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.730Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.730Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.730Z]             try:
[2024-03-07T16:33:08.730Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.730Z]                     try:
[2024-03-07T16:33:08.730Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.730Z]                     except KeyError:
[2024-03-07T16:33:08.730Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.730Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.730Z]                                 raise HookCallError(
[2024-03-07T16:33:08.730Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.730Z]                                 )
[2024-03-07T16:33:08.730Z]     
[2024-03-07T16:33:08.730Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.730Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.730Z]                         try:
[2024-03-07T16:33:08.730Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.730Z]                             # which is the desired response.
[2024-03-07T16:33:08.730Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.730Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.730Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.730Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.730Z]                         except StopIteration:
[2024-03-07T16:33:08.730Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.730Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.730Z]                         try:
[2024-03-07T16:33:08.730Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.730Z]                             # which is the desired response.
[2024-03-07T16:33:08.730Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.730Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.730Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.730Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.730Z]                         except StopIteration:
[2024-03-07T16:33:08.730Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.730Z]                     else:
[2024-03-07T16:33:08.730Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.730Z]                         if res is not None:
[2024-03-07T16:33:08.730Z]                             results.append(res)
[2024-03-07T16:33:08.730Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.730Z]                                 break
[2024-03-07T16:33:08.730Z]             except BaseException as exc:
[2024-03-07T16:33:08.730Z]                 exception = exc
[2024-03-07T16:33:08.730Z]         finally:
[2024-03-07T16:33:08.730Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.730Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.730Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.730Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.730Z]                 else:
[2024-03-07T16:33:08.730Z]                     result = results
[2024-03-07T16:33:08.730Z]     
[2024-03-07T16:33:08.730Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.730Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.730Z]                     try:
[2024-03-07T16:33:08.730Z]                         if exception is not None:
[2024-03-07T16:33:08.730Z]                             teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.730Z]                         else:
[2024-03-07T16:33:08.730Z]                             teardown.send(result)  # type: ignore[union-attr]
[2024-03-07T16:33:08.730Z]                         # Following is unreachable for a well behaved hook wrapper.
[2024-03-07T16:33:08.730Z]                         # Try to force finalizers otherwise postponed till GC action.
[2024-03-07T16:33:08.730Z]                         # Note: close() may raise if generator handles GeneratorExit.
[2024-03-07T16:33:08.730Z]                         teardown.close()  # type: ignore[union-attr]
[2024-03-07T16:33:08.730Z]                     except StopIteration as si:
[2024-03-07T16:33:08.730Z]                         result = si.value
[2024-03-07T16:33:08.730Z]                         exception = None
[2024-03-07T16:33:08.730Z]                         continue
[2024-03-07T16:33:08.730Z]                     except BaseException as e:
[2024-03-07T16:33:08.730Z]                         exception = e
[2024-03-07T16:33:08.730Z]                         continue
[2024-03-07T16:33:08.730Z]                     _raise_wrapfail(teardown, "has second yield")  # type: ignore[arg-type]
[2024-03-07T16:33:08.730Z]     
[2024-03-07T16:33:08.730Z]                 if exception is not None:
[2024-03-07T16:33:08.730Z] >                   raise exception.with_traceback(exception.__traceback__)
[2024-03-07T16:33:08.730Z] 
[2024-03-07T16:33:08.730Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:138: 
[2024-03-07T16:33:08.730Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.730Z] 
[2024-03-07T16:33:08.730Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.730Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.730Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.730Z] 
[2024-03-07T16:33:08.730Z]     def _multicall(
[2024-03-07T16:33:08.730Z]         hook_name: str,
[2024-03-07T16:33:08.730Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.730Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.730Z]         firstresult: bool,
[2024-03-07T16:33:08.730Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.730Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.730Z]         result(s).
[2024-03-07T16:33:08.730Z]     
[2024-03-07T16:33:08.730Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.730Z]         """
[2024-03-07T16:33:08.730Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.730Z]         results: list[object] = []
[2024-03-07T16:33:08.730Z]         exception = None
[2024-03-07T16:33:08.730Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.730Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.730Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.730Z]             try:
[2024-03-07T16:33:08.730Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.730Z]                     try:
[2024-03-07T16:33:08.730Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.730Z]                     except KeyError:
[2024-03-07T16:33:08.730Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.730Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.730Z]                                 raise HookCallError(
[2024-03-07T16:33:08.730Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.730Z]                                 )
[2024-03-07T16:33:08.730Z]     
[2024-03-07T16:33:08.730Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.730Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.730Z]                         try:
[2024-03-07T16:33:08.731Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.731Z]                             # which is the desired response.
[2024-03-07T16:33:08.731Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.731Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.731Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.731Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.731Z]                         except StopIteration:
[2024-03-07T16:33:08.731Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.731Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.731Z]                         try:
[2024-03-07T16:33:08.731Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.731Z]                             # which is the desired response.
[2024-03-07T16:33:08.731Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.731Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.731Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.731Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.731Z]                         except StopIteration:
[2024-03-07T16:33:08.731Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.731Z]                     else:
[2024-03-07T16:33:08.731Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.731Z]                         if res is not None:
[2024-03-07T16:33:08.731Z]                             results.append(res)
[2024-03-07T16:33:08.731Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.731Z]                                 break
[2024-03-07T16:33:08.731Z]             except BaseException as exc:
[2024-03-07T16:33:08.731Z]                 exception = exc
[2024-03-07T16:33:08.731Z]         finally:
[2024-03-07T16:33:08.731Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.731Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.731Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.731Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.731Z]                 else:
[2024-03-07T16:33:08.731Z]                     result = results
[2024-03-07T16:33:08.731Z]     
[2024-03-07T16:33:08.731Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.731Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.731Z]                     try:
[2024-03-07T16:33:08.731Z]                         if exception is not None:
[2024-03-07T16:33:08.731Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.731Z] 
[2024-03-07T16:33:08.731Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.731Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.731Z] 
[2024-03-07T16:33:08.731Z]     @pytest.hookimpl(wrapper=True, tryfirst=True)
[2024-03-07T16:33:08.731Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.731Z] >       yield from unraisable_exception_runtest_hook()
[2024-03-07T16:33:08.731Z] 
[2024-03-07T16:33:08.731Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: 
[2024-03-07T16:33:08.731Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.731Z] 
[2024-03-07T16:33:08.731Z]     def unraisable_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.731Z]         with catch_unraisable_exception() as cm:
[2024-03-07T16:33:08.731Z]             try:
[2024-03-07T16:33:08.731Z] >               yield
[2024-03-07T16:33:08.731Z] 
[2024-03-07T16:33:08.731Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: 
[2024-03-07T16:33:08.731Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.731Z] 
[2024-03-07T16:33:08.731Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.731Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.731Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.731Z] 
[2024-03-07T16:33:08.731Z]     def _multicall(
[2024-03-07T16:33:08.731Z]         hook_name: str,
[2024-03-07T16:33:08.731Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.731Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.731Z]         firstresult: bool,
[2024-03-07T16:33:08.731Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.731Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.731Z]         result(s).
[2024-03-07T16:33:08.731Z]     
[2024-03-07T16:33:08.731Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.731Z]         """
[2024-03-07T16:33:08.731Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.731Z]         results: list[object] = []
[2024-03-07T16:33:08.731Z]         exception = None
[2024-03-07T16:33:08.731Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.731Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.731Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.731Z]             try:
[2024-03-07T16:33:08.731Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.731Z]                     try:
[2024-03-07T16:33:08.731Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.731Z]                     except KeyError:
[2024-03-07T16:33:08.731Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.731Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.731Z]                                 raise HookCallError(
[2024-03-07T16:33:08.731Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.731Z]                                 )
[2024-03-07T16:33:08.731Z]     
[2024-03-07T16:33:08.731Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.731Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.731Z]                         try:
[2024-03-07T16:33:08.731Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.731Z]                             # which is the desired response.
[2024-03-07T16:33:08.731Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.731Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.731Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.731Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.731Z]                         except StopIteration:
[2024-03-07T16:33:08.731Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.731Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.731Z]                         try:
[2024-03-07T16:33:08.731Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.731Z]                             # which is the desired response.
[2024-03-07T16:33:08.731Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.731Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.731Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.731Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.731Z]                         except StopIteration:
[2024-03-07T16:33:08.731Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.731Z]                     else:
[2024-03-07T16:33:08.731Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.731Z]                         if res is not None:
[2024-03-07T16:33:08.731Z]                             results.append(res)
[2024-03-07T16:33:08.731Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.731Z]                                 break
[2024-03-07T16:33:08.731Z]             except BaseException as exc:
[2024-03-07T16:33:08.731Z]                 exception = exc
[2024-03-07T16:33:08.731Z]         finally:
[2024-03-07T16:33:08.731Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.731Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.731Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.731Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.731Z]                 else:
[2024-03-07T16:33:08.731Z]                     result = results
[2024-03-07T16:33:08.731Z]     
[2024-03-07T16:33:08.731Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.731Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.731Z]                     try:
[2024-03-07T16:33:08.731Z]                         if exception is not None:
[2024-03-07T16:33:08.732Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.732Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.732Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.732Z]     def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.732Z]         self.log_cli_handler.set_when("setup")
[2024-03-07T16:33:08.732Z]     
[2024-03-07T16:33:08.732Z]         empty: Dict[str, List[logging.LogRecord]] = {}
[2024-03-07T16:33:08.732Z]         item.stash[caplog_records_key] = empty
[2024-03-07T16:33:08.732Z] >       yield from self._runtest_for(item, "setup")
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:833: 
[2024-03-07T16:33:08.732Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z] self = <_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>
[2024-03-07T16:33:08.732Z] item = <IPyNbCell Cell 0>, when = 'setup'
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z]     def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:
[2024-03-07T16:33:08.732Z]         """Implement the internals of the pytest_runtest_xxx() hooks."""
[2024-03-07T16:33:08.732Z]         with catching_logs(
[2024-03-07T16:33:08.732Z]             self.caplog_handler,
[2024-03-07T16:33:08.732Z]             level=self.log_level,
[2024-03-07T16:33:08.732Z]         ) as caplog_handler, catching_logs(
[2024-03-07T16:33:08.732Z]             self.report_handler,
[2024-03-07T16:33:08.732Z]             level=self.log_level,
[2024-03-07T16:33:08.732Z]         ) as report_handler:
[2024-03-07T16:33:08.732Z]             caplog_handler.reset()
[2024-03-07T16:33:08.732Z]             report_handler.reset()
[2024-03-07T16:33:08.732Z]             item.stash[caplog_records_key][when] = caplog_handler.records
[2024-03-07T16:33:08.732Z]             item.stash[caplog_handler_key] = caplog_handler
[2024-03-07T16:33:08.732Z]     
[2024-03-07T16:33:08.732Z]             try:
[2024-03-07T16:33:08.732Z] >               yield
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/logging.py:822: 
[2024-03-07T16:33:08.732Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.732Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.732Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z]     def _multicall(
[2024-03-07T16:33:08.732Z]         hook_name: str,
[2024-03-07T16:33:08.732Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.732Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.732Z]         firstresult: bool,
[2024-03-07T16:33:08.732Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.732Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.732Z]         result(s).
[2024-03-07T16:33:08.732Z]     
[2024-03-07T16:33:08.732Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.732Z]         """
[2024-03-07T16:33:08.732Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.732Z]         results: list[object] = []
[2024-03-07T16:33:08.732Z]         exception = None
[2024-03-07T16:33:08.732Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.732Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.732Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.732Z]             try:
[2024-03-07T16:33:08.732Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.732Z]                     try:
[2024-03-07T16:33:08.732Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.732Z]                     except KeyError:
[2024-03-07T16:33:08.732Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.732Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.732Z]                                 raise HookCallError(
[2024-03-07T16:33:08.732Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.732Z]                                 )
[2024-03-07T16:33:08.732Z]     
[2024-03-07T16:33:08.732Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.732Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.732Z]                         try:
[2024-03-07T16:33:08.732Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.732Z]                             # which is the desired response.
[2024-03-07T16:33:08.732Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.732Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.732Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.732Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.732Z]                         except StopIteration:
[2024-03-07T16:33:08.732Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.732Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.732Z]                         try:
[2024-03-07T16:33:08.732Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.732Z]                             # which is the desired response.
[2024-03-07T16:33:08.732Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.732Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.732Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.732Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.732Z]                         except StopIteration:
[2024-03-07T16:33:08.732Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.732Z]                     else:
[2024-03-07T16:33:08.732Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.732Z]                         if res is not None:
[2024-03-07T16:33:08.732Z]                             results.append(res)
[2024-03-07T16:33:08.732Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.732Z]                                 break
[2024-03-07T16:33:08.732Z]             except BaseException as exc:
[2024-03-07T16:33:08.732Z]                 exception = exc
[2024-03-07T16:33:08.732Z]         finally:
[2024-03-07T16:33:08.732Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.732Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.732Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.732Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.732Z]                 else:
[2024-03-07T16:33:08.732Z]                     result = results
[2024-03-07T16:33:08.732Z]     
[2024-03-07T16:33:08.732Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.732Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.732Z]                     try:
[2024-03-07T16:33:08.732Z]                         if exception is not None:
[2024-03-07T16:33:08.732Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.732Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z] self = <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=7 _state='suspended' tmpfile=<_io....xtIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
[2024-03-07T16:33:08.732Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z]     @hookimpl(wrapper=True)
[2024-03-07T16:33:08.732Z]     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
[2024-03-07T16:33:08.732Z]         with self.item_capture("setup", item):
[2024-03-07T16:33:08.732Z] >           return (yield)
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/capture.py:877: 
[2024-03-07T16:33:08.732Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.732Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.732Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.732Z] 
[2024-03-07T16:33:08.732Z]     def _multicall(
[2024-03-07T16:33:08.732Z]         hook_name: str,
[2024-03-07T16:33:08.732Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.732Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.732Z]         firstresult: bool,
[2024-03-07T16:33:08.732Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.732Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.732Z]         result(s).
[2024-03-07T16:33:08.732Z]     
[2024-03-07T16:33:08.732Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.732Z]         """
[2024-03-07T16:33:08.732Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.732Z]         results: list[object] = []
[2024-03-07T16:33:08.732Z]         exception = None
[2024-03-07T16:33:08.733Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.733Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.733Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.733Z]             try:
[2024-03-07T16:33:08.733Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.733Z]                     try:
[2024-03-07T16:33:08.733Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.733Z]                     except KeyError:
[2024-03-07T16:33:08.733Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.733Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.733Z]                                 raise HookCallError(
[2024-03-07T16:33:08.733Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.733Z]                                 )
[2024-03-07T16:33:08.733Z]     
[2024-03-07T16:33:08.733Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.733Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.733Z]                         try:
[2024-03-07T16:33:08.733Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.733Z]                             # which is the desired response.
[2024-03-07T16:33:08.733Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.733Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.733Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.733Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.733Z]                         except StopIteration:
[2024-03-07T16:33:08.733Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.733Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.733Z]                         try:
[2024-03-07T16:33:08.733Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.733Z]                             # which is the desired response.
[2024-03-07T16:33:08.733Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.733Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.733Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.733Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.733Z]                         except StopIteration:
[2024-03-07T16:33:08.733Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.733Z]                     else:
[2024-03-07T16:33:08.733Z]                         res = hook_impl.function(*args)
[2024-03-07T16:33:08.733Z]                         if res is not None:
[2024-03-07T16:33:08.733Z]                             results.append(res)
[2024-03-07T16:33:08.733Z]                             if firstresult:  # halt further impl calls
[2024-03-07T16:33:08.733Z]                                 break
[2024-03-07T16:33:08.733Z]             except BaseException as exc:
[2024-03-07T16:33:08.733Z]                 exception = exc
[2024-03-07T16:33:08.733Z]         finally:
[2024-03-07T16:33:08.733Z]             # Fast path - only new-style wrappers, no Result.
[2024-03-07T16:33:08.733Z]             if only_new_style_wrappers:
[2024-03-07T16:33:08.733Z]                 if firstresult:  # first result hooks return a single value
[2024-03-07T16:33:08.733Z]                     result = results[0] if results else None
[2024-03-07T16:33:08.733Z]                 else:
[2024-03-07T16:33:08.733Z]                     result = results
[2024-03-07T16:33:08.733Z]     
[2024-03-07T16:33:08.733Z]                 # run all wrapper post-yield blocks
[2024-03-07T16:33:08.733Z]                 for teardown in reversed(teardowns):
[2024-03-07T16:33:08.733Z]                     try:
[2024-03-07T16:33:08.733Z]                         if exception is not None:
[2024-03-07T16:33:08.733Z] >                           teardown.throw(exception)  # type: ignore[union-attr]
[2024-03-07T16:33:08.733Z] 
[2024-03-07T16:33:08.733Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:121: 
[2024-03-07T16:33:08.733Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.733Z] 
[2024-03-07T16:33:08.733Z]     @pytest.hookimpl(wrapper=True, trylast=True)
[2024-03-07T16:33:08.733Z]     def pytest_runtest_setup() -> Generator[None, None, None]:
[2024-03-07T16:33:08.733Z] >       yield from thread_exception_runtest_hook()
[2024-03-07T16:33:08.733Z] 
[2024-03-07T16:33:08.733Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:82: 
[2024-03-07T16:33:08.733Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.733Z] 
[2024-03-07T16:33:08.733Z]     def thread_exception_runtest_hook() -> Generator[None, None, None]:
[2024-03-07T16:33:08.733Z]         with catch_threading_exception() as cm:
[2024-03-07T16:33:08.733Z]             try:
[2024-03-07T16:33:08.733Z] >               yield
[2024-03-07T16:33:08.733Z] 
[2024-03-07T16:33:08.733Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/threadexception.py:63: 
[2024-03-07T16:33:08.733Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.733Z] 
[2024-03-07T16:33:08.733Z] hook_name = 'pytest_runtest_setup'
[2024-03-07T16:33:08.733Z] hook_impls = [<HookImpl plugin_name='nose', plugin=<module '_pytest.nose' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/...=None>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f0abf08c070>>, ...]
[2024-03-07T16:33:08.733Z] caller_kwargs = {'item': <IPyNbCell Cell 0>}, firstresult = False
[2024-03-07T16:33:08.733Z] 
[2024-03-07T16:33:08.733Z]     def _multicall(
[2024-03-07T16:33:08.733Z]         hook_name: str,
[2024-03-07T16:33:08.733Z]         hook_impls: Sequence[HookImpl],
[2024-03-07T16:33:08.733Z]         caller_kwargs: Mapping[str, object],
[2024-03-07T16:33:08.733Z]         firstresult: bool,
[2024-03-07T16:33:08.733Z]     ) -> object | list[object]:
[2024-03-07T16:33:08.733Z]         """Execute a call into multiple python functions/methods and return the
[2024-03-07T16:33:08.733Z]         result(s).
[2024-03-07T16:33:08.733Z]     
[2024-03-07T16:33:08.733Z]         ``caller_kwargs`` comes from HookCaller.__call__().
[2024-03-07T16:33:08.733Z]         """
[2024-03-07T16:33:08.733Z]         __tracebackhide__ = True
[2024-03-07T16:33:08.733Z]         results: list[object] = []
[2024-03-07T16:33:08.733Z]         exception = None
[2024-03-07T16:33:08.733Z]         only_new_style_wrappers = True
[2024-03-07T16:33:08.733Z]         try:  # run impl and wrapper setup functions in a loop
[2024-03-07T16:33:08.733Z]             teardowns: list[Teardown] = []
[2024-03-07T16:33:08.733Z]             try:
[2024-03-07T16:33:08.733Z]                 for hook_impl in reversed(hook_impls):
[2024-03-07T16:33:08.733Z]                     try:
[2024-03-07T16:33:08.733Z]                         args = [caller_kwargs[argname] for argname in hook_impl.argnames]
[2024-03-07T16:33:08.733Z]                     except KeyError:
[2024-03-07T16:33:08.733Z]                         for argname in hook_impl.argnames:
[2024-03-07T16:33:08.733Z]                             if argname not in caller_kwargs:
[2024-03-07T16:33:08.733Z]                                 raise HookCallError(
[2024-03-07T16:33:08.733Z]                                     f"hook call must provide argument {argname!r}"
[2024-03-07T16:33:08.733Z]                                 )
[2024-03-07T16:33:08.733Z]     
[2024-03-07T16:33:08.733Z]                     if hook_impl.hookwrapper:
[2024-03-07T16:33:08.733Z]                         only_new_style_wrappers = False
[2024-03-07T16:33:08.733Z]                         try:
[2024-03-07T16:33:08.733Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.733Z]                             # which is the desired response.
[2024-03-07T16:33:08.733Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.733Z]                             wrapper_gen = cast(Generator[None, Result[object], None], res)
[2024-03-07T16:33:08.733Z]                             next(wrapper_gen)  # first yield
[2024-03-07T16:33:08.733Z]                             teardowns.append((wrapper_gen, hook_impl))
[2024-03-07T16:33:08.733Z]                         except StopIteration:
[2024-03-07T16:33:08.733Z]                             _raise_wrapfail(wrapper_gen, "did not yield")
[2024-03-07T16:33:08.733Z]                     elif hook_impl.wrapper:
[2024-03-07T16:33:08.733Z]                         try:
[2024-03-07T16:33:08.733Z]                             # If this cast is not valid, a type error is raised below,
[2024-03-07T16:33:08.733Z]                             # which is the desired response.
[2024-03-07T16:33:08.733Z]                             res = hook_impl.function(*args)
[2024-03-07T16:33:08.733Z]                             function_gen = cast(Generator[None, object, object], res)
[2024-03-07T16:33:08.733Z]                             next(function_gen)  # first yield
[2024-03-07T16:33:08.733Z]                             teardowns.append(function_gen)
[2024-03-07T16:33:08.733Z]                         except StopIteration:
[2024-03-07T16:33:08.733Z]                             _raise_wrapfail(function_gen, "did not yield")
[2024-03-07T16:33:08.733Z]                     else:
[2024-03-07T16:33:08.733Z] >                       res = hook_impl.function(*args)
[2024-03-07T16:33:08.733Z] 
[2024-03-07T16:33:08.733Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/pluggy/_callers.py:102: 
[2024-03-07T16:33:08.733Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.733Z] 
[2024-03-07T16:33:08.733Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.733Z] 
[2024-03-07T16:33:08.734Z]     def pytest_runtest_setup(item: Item) -> None:
[2024-03-07T16:33:08.734Z]         _update_current_test_var(item, "setup")
[2024-03-07T16:33:08.734Z] >       item.session._setupstate.setup(item)
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:158: 
[2024-03-07T16:33:08.734Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.734Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.734Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.734Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.734Z]     
[2024-03-07T16:33:08.734Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.734Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.734Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.734Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.734Z]             if exc:
[2024-03-07T16:33:08.734Z]                 raise exc
[2024-03-07T16:33:08.734Z]     
[2024-03-07T16:33:08.734Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.734Z]             assert col not in self.stack
[2024-03-07T16:33:08.734Z]             # Push onto the stack.
[2024-03-07T16:33:08.734Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.734Z]             try:
[2024-03-07T16:33:08.734Z]                 col.setup()
[2024-03-07T16:33:08.734Z]             except TEST_OUTCOME as exc:
[2024-03-07T16:33:08.734Z]                 self.stack[col] = (self.stack[col][0], exc)
[2024-03-07T16:33:08.734Z] >               raise exc
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:514: 
[2024-03-07T16:33:08.734Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] self = <_pytest.runner.SetupState object at 0x7f0abf00cdf0>
[2024-03-07T16:33:08.734Z] item = <IPyNbCell Cell 0>
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z]     def setup(self, item: Item) -> None:
[2024-03-07T16:33:08.734Z]         """Setup objects along the collector chain to the item."""
[2024-03-07T16:33:08.734Z]         needed_collectors = item.listchain()
[2024-03-07T16:33:08.734Z]     
[2024-03-07T16:33:08.734Z]         # If a collector fails its setup, fail its entire subtree of items.
[2024-03-07T16:33:08.734Z]         # The setup is not retried for each item - the same exception is used.
[2024-03-07T16:33:08.734Z]         for col, (finalizers, exc) in self.stack.items():
[2024-03-07T16:33:08.734Z]             assert col in needed_collectors, "previous item was not torn down properly"
[2024-03-07T16:33:08.734Z]             if exc:
[2024-03-07T16:33:08.734Z]                 raise exc
[2024-03-07T16:33:08.734Z]     
[2024-03-07T16:33:08.734Z]         for col in needed_collectors[len(self.stack) :]:
[2024-03-07T16:33:08.734Z]             assert col not in self.stack
[2024-03-07T16:33:08.734Z]             # Push onto the stack.
[2024-03-07T16:33:08.734Z]             self.stack[col] = ([col.teardown], None)
[2024-03-07T16:33:08.734Z]             try:
[2024-03-07T16:33:08.734Z] >               col.setup()
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/_pytest/runner.py:511: 
[2024-03-07T16:33:08.734Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] self = <IPyNbFile 06_Raven_calibration.ipynb>
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z]     def setup(self):
[2024-03-07T16:33:08.734Z]         """
[2024-03-07T16:33:08.734Z]         Called by pytest to setup the collector cells in .
[2024-03-07T16:33:08.734Z]         Here we start a kernel and setup the sanitize patterns.
[2024-03-07T16:33:08.734Z]         """
[2024-03-07T16:33:08.734Z]         # we've already checked that --nbval-current-env and
[2024-03-07T16:33:08.734Z]         # --nbval-kernel-name were not both supplied
[2024-03-07T16:33:08.734Z]         if self.parent.config.option.nbval_current_env:
[2024-03-07T16:33:08.734Z]             kernel_name = CURRENT_ENV_KERNEL_NAME
[2024-03-07T16:33:08.734Z]         elif self.parent.config.option.nbval_kernel_name:
[2024-03-07T16:33:08.734Z]             kernel_name = self.parent.config.option.nbval_kernel_name
[2024-03-07T16:33:08.734Z]         else:
[2024-03-07T16:33:08.734Z]             kernel_name = self.nb.metadata.get(
[2024-03-07T16:33:08.734Z]                 'kernelspec', {}).get('name', 'python')
[2024-03-07T16:33:08.734Z] >       self.kernel = RunningKernel(
[2024-03-07T16:33:08.734Z]             kernel_name,
[2024-03-07T16:33:08.734Z]             cwd=str(self.fspath.dirname),
[2024-03-07T16:33:08.734Z]             startup_timeout=self.config.option.nbval_kernel_startup_timeout,
[2024-03-07T16:33:08.734Z]         )
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/plugin.py:264: 
[2024-03-07T16:33:08.734Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] self = <nbval.kernel.RunningKernel object at 0x7f0abb8c4d60>
[2024-03-07T16:33:08.734Z] kernel_name = 'python'
[2024-03-07T16:33:08.734Z] cwd = '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks'
[2024-03-07T16:33:08.734Z] startup_timeout = 60
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z]     def __init__(self, kernel_name, cwd=None, startup_timeout=60):
[2024-03-07T16:33:08.734Z]         """
[2024-03-07T16:33:08.734Z]         Initialise a new kernel
[2024-03-07T16:33:08.734Z]         specify that matplotlib is inline and connect the stderr.
[2024-03-07T16:33:08.734Z]         Stores the active kernel process and its manager.
[2024-03-07T16:33:08.734Z]         """
[2024-03-07T16:33:08.734Z]     
[2024-03-07T16:33:08.734Z] >       self.km, self.kc = start_new_kernel(
[2024-03-07T16:33:08.734Z]             startup_timeout=startup_timeout,
[2024-03-07T16:33:08.734Z]             kernel_name=kernel_name,
[2024-03-07T16:33:08.734Z]             stderr=open(os.devnull, 'w'),
[2024-03-07T16:33:08.734Z]             cwd=cwd,
[2024-03-07T16:33:08.734Z]         )
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:85: 
[2024-03-07T16:33:08.734Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] startup_timeout = 60, kernel_name = 'python'
[2024-03-07T16:33:08.734Z] kwargs = {'cwd': '/home/jenkins/agent/workspace/_workflow-tests_new-docker-build@2/RavenPy-master/docs/notebooks', 'stderr': <_io.TextIOWrapper name='/dev/null' mode='w' encoding='UTF-8'>}
[2024-03-07T16:33:08.734Z] km = <jupyter_client.manager.KernelManager object at 0x7f0abb8c7580>
[2024-03-07T16:33:08.734Z] kc = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z]     def start_new_kernel(startup_timeout=60, kernel_name='python', **kwargs):
[2024-03-07T16:33:08.734Z]         """Start a new kernel, and return its Manager and Client"""
[2024-03-07T16:33:08.734Z]         logger.debug('Starting new kernel: "%s"' % kernel_name)
[2024-03-07T16:33:08.734Z]         km = KernelManager(kernel_name=kernel_name,
[2024-03-07T16:33:08.734Z]                            kernel_spec_manager=NbvalKernelspecManager())
[2024-03-07T16:33:08.734Z]         km.start_kernel(**kwargs)
[2024-03-07T16:33:08.734Z]         kc = km.client()
[2024-03-07T16:33:08.734Z]         kc.start_channels()
[2024-03-07T16:33:08.734Z]         try:
[2024-03-07T16:33:08.734Z] >           kc.wait_for_ready(timeout=startup_timeout)
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nbval/kernel.py:57: 
[2024-03-07T16:33:08.734Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.734Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.734Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.734Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.734Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.734Z]         try:
[2024-03-07T16:33:08.734Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.734Z]         except RuntimeError:
[2024-03-07T16:33:08.734Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.734Z]             try:
[2024-03-07T16:33:08.734Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.734Z]             except RuntimeError:
[2024-03-07T16:33:08.734Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.734Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.734Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.734Z]     
[2024-03-07T16:33:08.734Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.734Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.734Z]         try:
[2024-03-07T16:33:08.734Z]             return loop.run_until_complete(future)
[2024-03-07T16:33:08.734Z]         except BaseException as e:
[2024-03-07T16:33:08.734Z]             future.cancel()
[2024-03-07T16:33:08.734Z] >           raise e
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:30: 
[2024-03-07T16:33:08.734Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.734Z] 
[2024-03-07T16:33:08.734Z] args = (<jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>,)
[2024-03-07T16:33:08.734Z] kwargs = {'timeout': 60}
[2024-03-07T16:33:08.734Z] loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.735Z] nest_asyncio = <module 'nest_asyncio' from '/opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py'>
[2024-03-07T16:33:08.735Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z]     def wrapped(*args, **kwargs):
[2024-03-07T16:33:08.735Z]         try:
[2024-03-07T16:33:08.735Z]             loop = asyncio.get_running_loop()
[2024-03-07T16:33:08.735Z]         except RuntimeError:
[2024-03-07T16:33:08.735Z]             # Workaround for bugs.python.org/issue39529.
[2024-03-07T16:33:08.735Z]             try:
[2024-03-07T16:33:08.735Z]                 loop = asyncio.get_event_loop_policy().get_event_loop()
[2024-03-07T16:33:08.735Z]             except RuntimeError:
[2024-03-07T16:33:08.735Z]                 loop = asyncio.new_event_loop()
[2024-03-07T16:33:08.735Z]                 asyncio.set_event_loop(loop)
[2024-03-07T16:33:08.735Z]         import nest_asyncio  # type: ignore
[2024-03-07T16:33:08.735Z]     
[2024-03-07T16:33:08.735Z]         nest_asyncio.apply(loop)
[2024-03-07T16:33:08.735Z]         future = asyncio.ensure_future(coro(*args, **kwargs), loop=loop)
[2024-03-07T16:33:08.735Z]         try:
[2024-03-07T16:33:08.735Z] >           return loop.run_until_complete(future)
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/utils.py:27: 
[2024-03-07T16:33:08.735Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z] self = <_UnixSelectorEventLoop running=False closed=False debug=False>
[2024-03-07T16:33:08.735Z] future = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z]     def run_until_complete(self, future):
[2024-03-07T16:33:08.735Z]         with manage_run(self):
[2024-03-07T16:33:08.735Z]             f = asyncio.ensure_future(future, loop=self)
[2024-03-07T16:33:08.735Z]             if f is not future:
[2024-03-07T16:33:08.735Z]                 f._log_destroy_pending = False
[2024-03-07T16:33:08.735Z]             while not f.done():
[2024-03-07T16:33:08.735Z]                 self._run_once()
[2024-03-07T16:33:08.735Z]                 if self._stopping:
[2024-03-07T16:33:08.735Z]                     break
[2024-03-07T16:33:08.735Z]             if not f.done():
[2024-03-07T16:33:08.735Z]                 raise RuntimeError(
[2024-03-07T16:33:08.735Z]                     'Event loop stopped before Future completed.')
[2024-03-07T16:33:08.735Z] >           return f.result()
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/nest_asyncio.py:98: 
[2024-03-07T16:33:08.735Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z] self = <Task finished name='Task-733' coro=<KernelClient._async_wait_for_ready() done, defined at /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:157> exception=RuntimeError("Kernel didn't respond in 60 seconds")>
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z]     def result(self):
[2024-03-07T16:33:08.735Z]         """Return the result this future represents.
[2024-03-07T16:33:08.735Z]     
[2024-03-07T16:33:08.735Z]         If the future has been cancelled, raises CancelledError.  If the
[2024-03-07T16:33:08.735Z]         future's result isn't yet available, raises InvalidStateError.  If
[2024-03-07T16:33:08.735Z]         the future is done and has an exception set, this exception is raised.
[2024-03-07T16:33:08.735Z]         """
[2024-03-07T16:33:08.735Z]         if self._state == _CANCELLED:
[2024-03-07T16:33:08.735Z]             exc = self._make_cancelled_error()
[2024-03-07T16:33:08.735Z]             raise exc
[2024-03-07T16:33:08.735Z]         if self._state != _FINISHED:
[2024-03-07T16:33:08.735Z]             raise exceptions.InvalidStateError('Result is not ready.')
[2024-03-07T16:33:08.735Z]         self.__log_traceback = False
[2024-03-07T16:33:08.735Z]         if self._exception is not None:
[2024-03-07T16:33:08.735Z] >           raise self._exception.with_traceback(self._exception_tb)
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/futures.py:201: 
[2024-03-07T16:33:08.735Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z] self = None
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z]     def __step(self, exc=None):
[2024-03-07T16:33:08.735Z]         if self.done():
[2024-03-07T16:33:08.735Z]             raise exceptions.InvalidStateError(
[2024-03-07T16:33:08.735Z]                 f'_step(): already done: {self!r}, {exc!r}')
[2024-03-07T16:33:08.735Z]         if self._must_cancel:
[2024-03-07T16:33:08.735Z]             if not isinstance(exc, exceptions.CancelledError):
[2024-03-07T16:33:08.735Z]                 exc = self._make_cancelled_error()
[2024-03-07T16:33:08.735Z]             self._must_cancel = False
[2024-03-07T16:33:08.735Z]         coro = self._coro
[2024-03-07T16:33:08.735Z]         self._fut_waiter = None
[2024-03-07T16:33:08.735Z]     
[2024-03-07T16:33:08.735Z]         _enter_task(self._loop, self)
[2024-03-07T16:33:08.735Z]         # Call either coro.throw(exc) or coro.send(None).
[2024-03-07T16:33:08.735Z]         try:
[2024-03-07T16:33:08.735Z]             if exc is None:
[2024-03-07T16:33:08.735Z]                 # We use the `send` method directly, because coroutines
[2024-03-07T16:33:08.735Z]                 # don't have `__iter__` and `__next__` methods.
[2024-03-07T16:33:08.735Z] >               result = coro.send(None)
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z] /opt/conda/envs/birdy/lib/python3.10/asyncio/tasks.py:232: 
[2024-03-07T16:33:08.735Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z] self = <jupyter_client.blocking.client.BlockingKernelClient object at 0x7f0abb8c7070>
[2024-03-07T16:33:08.735Z] timeout = 60
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z]     async def _async_wait_for_ready(self, timeout: t.Optional[float] = None) -> None:
[2024-03-07T16:33:08.735Z]         """Waits for a response when a client is blocked
[2024-03-07T16:33:08.735Z]     
[2024-03-07T16:33:08.735Z]         - Sets future time for timeout
[2024-03-07T16:33:08.735Z]         - Blocks on shell channel until a message is received
[2024-03-07T16:33:08.735Z]         - Exit if the kernel has died
[2024-03-07T16:33:08.735Z]         - If client times out before receiving a message from the kernel, send RuntimeError
[2024-03-07T16:33:08.735Z]         - Flush the IOPub channel
[2024-03-07T16:33:08.735Z]         """
[2024-03-07T16:33:08.735Z]         if timeout is None:
[2024-03-07T16:33:08.735Z]             timeout = float("inf")
[2024-03-07T16:33:08.735Z]         abs_timeout = time.time() + timeout
[2024-03-07T16:33:08.735Z]     
[2024-03-07T16:33:08.735Z]         from .manager import KernelManager
[2024-03-07T16:33:08.735Z]     
[2024-03-07T16:33:08.735Z]         if not isinstance(self.parent, KernelManager):
[2024-03-07T16:33:08.735Z]             # This Client was not created by a KernelManager,
[2024-03-07T16:33:08.735Z]             # so wait for kernel to become responsive to heartbeats
[2024-03-07T16:33:08.735Z]             # before checking for kernel_info reply
[2024-03-07T16:33:08.735Z]             while not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.735Z]                 if time.time() > abs_timeout:
[2024-03-07T16:33:08.735Z]                     raise RuntimeError(
[2024-03-07T16:33:08.735Z]                         "Kernel didn't respond to heartbeats in %d seconds and timed out" % timeout
[2024-03-07T16:33:08.735Z]                     )
[2024-03-07T16:33:08.735Z]                 await asyncio.sleep(0.2)
[2024-03-07T16:33:08.735Z]     
[2024-03-07T16:33:08.735Z]         # Wait for kernel info reply on shell channel
[2024-03-07T16:33:08.735Z]         while True:
[2024-03-07T16:33:08.735Z]             self.kernel_info()
[2024-03-07T16:33:08.735Z]             try:
[2024-03-07T16:33:08.735Z]                 msg = await self.shell_channel.get_msg(timeout=1)
[2024-03-07T16:33:08.735Z]             except Empty:
[2024-03-07T16:33:08.735Z]                 pass
[2024-03-07T16:33:08.735Z]             else:
[2024-03-07T16:33:08.735Z]                 if msg["msg_type"] == "kernel_info_reply":
[2024-03-07T16:33:08.735Z]                     # Checking that IOPub is connected. If it is not connected, start over.
[2024-03-07T16:33:08.735Z]                     try:
[2024-03-07T16:33:08.735Z]                         await self.iopub_channel.get_msg(timeout=0.2)
[2024-03-07T16:33:08.735Z]                     except Empty:
[2024-03-07T16:33:08.735Z]                         pass
[2024-03-07T16:33:08.735Z]                     else:
[2024-03-07T16:33:08.735Z]                         self._handle_kernel_info_reply(msg)
[2024-03-07T16:33:08.735Z]                         break
[2024-03-07T16:33:08.735Z]     
[2024-03-07T16:33:08.735Z]             if not await ensure_async(self.is_alive()):
[2024-03-07T16:33:08.735Z]                 raise RuntimeError("Kernel died before replying to kernel_info")
[2024-03-07T16:33:08.735Z]     
[2024-03-07T16:33:08.735Z]             # Check if current time is ready check time plus timeout
[2024-03-07T16:33:08.735Z]             if time.time() > abs_timeout:
[2024-03-07T16:33:08.735Z] >               raise RuntimeError("Kernel didn't respond in %d seconds" % timeout)
[2024-03-07T16:33:08.735Z] E               RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z] /opt/conda/envs/birdy/lib/python3.10/site-packages/jupyter_client/client.py:206: RuntimeError
[2024-03-07T16:33:08.735Z] =================================== FAILURES ===================================
[2024-03-07T16:33:08.735Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 5 _
[2024-03-07T16:33:08.735Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.735Z] [94mCell 5: Cell execution caused an exception
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z] Input:
[2024-03-07T16:33:08.735Z] [0mfeatures, statistics, raster = stats_resp.get(asobj=True)
[2024-03-07T16:33:08.735Z] grid = raster[0]
[2024-03-07T16:33:08.735Z] grid.plot()
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.735Z] [94mTraceback:[0m
[2024-03-07T16:33:08.735Z] 
[2024-03-07T16:33:08.736Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.736Z] [0;31mAttributeError[0m                            Traceback (most recent call last)
[2024-03-07T16:33:08.736Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.736Z] [0;32m----> 1[0m features, statistics, raster [38;5;241m=[39m [43mstats_resp[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43masobj[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[2024-03-07T16:33:08.736Z] [1;32m      2[0m grid [38;5;241m=[39m raster[[38;5;241m0[39m]
[2024-03-07T16:33:08.736Z] [1;32m      3[0m grid[38;5;241m.[39mplot()
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:41[0m, in [0;36mWPSResult.get[0;34m(self, asobj)[0m
[2024-03-07T16:33:08.736Z] [1;32m     38[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39misSucceded():
[2024-03-07T16:33:08.736Z] [1;32m     39[0m     [38;5;66;03m# TODO: add reason for failure[39;00m
[2024-03-07T16:33:08.736Z] [1;32m     40[0m     [38;5;28;01mraise[39;00m ProcessFailed([38;5;124m"[39m[38;5;124mSorry, process failed.[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.736Z] [0;32m---> 41[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_output[49m[43m([49m[43masobj[49m[43m)[49m
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36mWPSResult._make_output[0;34m(self, convert_objects)[0m
[2024-03-07T16:33:08.736Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:33:08.736Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:33:08.736Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:33:08.736Z] [1;32m     47[0m )
[2024-03-07T16:33:08.736Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:33:08.736Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:33:08.736Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28mself[39m[38;5;241m.[39m_process_output(o, convert_objects) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:33:08.736Z] [1;32m     51[0m )
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:33:08.736Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:33:08.736Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:33:08.736Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:33:08.736Z] [1;32m     47[0m )
[2024-03-07T16:33:08.736Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:33:08.736Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:33:08.736Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_process_output[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mconvert_objects[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:33:08.736Z] [1;32m     51[0m )
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:71[0m, in [0;36mWPSResult._process_output[0;34m(self, output, convert_objects)[0m
[2024-03-07T16:33:08.736Z] [1;32m     68[0m     [38;5;28;01mreturn[39;00m delist(data)
[2024-03-07T16:33:08.736Z] [1;32m     70[0m [38;5;28;01mif[39;00m convert_objects:
[2024-03-07T16:33:08.736Z] [0;32m---> 71[0m     [38;5;28;01mreturn[39;00m [43mconvert[49m[43m([49m[43moutput[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_path[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_converters[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mauth[49m[38;5;241;43m.[39;49m[43mverify[49m[43m)[49m
[2024-03-07T16:33:08.736Z] [1;32m     72[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:33:08.736Z] [1;32m     73[0m     [38;5;28;01mreturn[39;00m output[38;5;241m.[39mreference
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:376[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:33:08.736Z] [1;32m    374[0m     out [38;5;241m=[39m converter[38;5;241m.[39mconvert()
[2024-03-07T16:33:08.736Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:33:08.736Z] [0;32m--> 376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:33:08.736Z] [1;32m    377[0m     [38;5;28;01mreturn[39;00m out
[2024-03-07T16:33:08.736Z] [1;32m    379[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mImportError[39;00m, [38;5;167;01mNotImplementedError[39;00m):
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:376[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:33:08.736Z] [1;32m    374[0m     out [38;5;241m=[39m converter[38;5;241m.[39mconvert()
[2024-03-07T16:33:08.736Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:33:08.736Z] [0;32m--> 376[0m         out [38;5;241m=[39m [[43mconvert[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mpath[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:33:08.736Z] [1;32m    377[0m     [38;5;28;01mreturn[39;00m out
[2024-03-07T16:33:08.736Z] [1;32m    379[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mImportError[39;00m, [38;5;167;01mNotImplementedError[39;00m):
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:374[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:33:08.736Z] [1;32m    372[0m [38;5;28;01mtry[39;00m:
[2024-03-07T16:33:08.736Z] [1;32m    373[0m     converter [38;5;241m=[39m [38;5;28mcls[39m(output, path[38;5;241m=[39mpath, verify[38;5;241m=[39mverify)
[2024-03-07T16:33:08.736Z] [0;32m--> 374[0m     out [38;5;241m=[39m [43mconverter[49m[38;5;241;43m.[39;49m[43mconvert[49m[43m([49m[43m)[49m
[2024-03-07T16:33:08.736Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:33:08.736Z] [1;32m    376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:266[0m, in [0;36mGeotiffRioxarrayConverter.convert[0;34m(self)[0m
[2024-03-07T16:33:08.736Z] [1;32m    263[0m [38;5;28;01mimport[39;00m [38;5;21;01mxarray[39;00m  [38;5;66;03m# isort: skip[39;00m
[2024-03-07T16:33:08.736Z] [1;32m    264[0m [38;5;28;01mimport[39;00m [38;5;21;01mrioxarray[39;00m  [38;5;66;03m# noqa[39;00m
[2024-03-07T16:33:08.736Z] [0;32m--> 266[0m [38;5;28;01mreturn[39;00m [43mxarray[49m[38;5;241;43m.[39;49m[43mopen_rasterio[49m([38;5;28mself[39m[38;5;241m.[39mfile)
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] [0;31mAttributeError[0m: module 'xarray' has no attribute 'open_rasterio'
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 6 _
[2024-03-07T16:33:08.736Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.736Z] [94mCell 6: Cell execution caused an exception
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] Input:
[2024-03-07T16:33:08.736Z] [0mlu = statistics[0]
[2024-03-07T16:33:08.736Z] total = sum(lu.values())
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] land_use = {k: (v / total) for (k, v) in lu.items()}
[2024-03-07T16:33:08.736Z] display("Land use ratios", land_use)
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] land_use_pct = {k: f"{np.round(v/total*100, 2)} %" for (k, v) in lu.items()}
[2024-03-07T16:33:08.736Z] display("Land use percentages", land_use_pct)
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] [94mTraceback:[0m
[2024-03-07T16:33:08.736Z] 
[2024-03-07T16:33:08.736Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.736Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.737Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.737Z] [0;32m----> 1[0m lu [38;5;241m=[39m [43mstatistics[49m[[38;5;241m0[39m]
[2024-03-07T16:33:08.737Z] [1;32m      2[0m total [38;5;241m=[39m [38;5;28msum[39m(lu[38;5;241m.[39mvalues())
[2024-03-07T16:33:08.737Z] [1;32m      4[0m land_use [38;5;241m=[39m {k: (v [38;5;241m/[39m total) [38;5;28;01mfor[39;00m (k, v) [38;5;129;01min[39;00m lu[38;5;241m.[39mitems()}
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] [0;31mNameError[0m: name 'statistics' is not defined
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 7 _
[2024-03-07T16:33:08.737Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.737Z] [94mCell 7: Cell execution caused an exception
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] Input:
[2024-03-07T16:33:08.737Z] [0munique, counts = np.unique(grid, return_counts=True)
[2024-03-07T16:33:08.737Z] print("The land-use categories available are: " + str(unique))
[2024-03-07T16:33:08.737Z] print("The number of occurrences of each land-use category is: " + str(counts))
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] # Pixels values at '127' are NaN and can be ignored.
[2024-03-07T16:33:08.737Z] from matplotlib.colors import Normalize
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] norm = Normalize()
[2024-03-07T16:33:08.737Z] norm.autoscale(unique[:-1])
[2024-03-07T16:33:08.737Z] cm = mpl.colormaps["tab20"]
[2024-03-07T16:33:08.737Z] plt.bar(unique[:-1], counts[:-1], color=cm(norm(unique[:-1])))
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] # plt.bar(unique[:-1], counts[:-1])
[2024-03-07T16:33:08.737Z] plt.xticks(np.arange(min(unique[:-1]), max(unique[:-1]) + 1, 1.0))
[2024-03-07T16:33:08.737Z] plt.xlabel("Land-use categories")
[2024-03-07T16:33:08.737Z] plt.ylabel("Number of pixels")
[2024-03-07T16:33:08.737Z] plt.show()
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] grid.where(grid != 127).sel(band=1).plot.imshow(cmap="tab20")
[2024-03-07T16:33:08.737Z] grid.name = "Land-use categories"
[2024-03-07T16:33:08.737Z] plt.show()
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] [94mTraceback:[0m
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.737Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.737Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.737Z] [0;32m----> 1[0m unique, counts [38;5;241m=[39m np[38;5;241m.[39munique([43mgrid[49m, return_counts[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[2024-03-07T16:33:08.737Z] [1;32m      2[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mThe land-use categories available are: [39m[38;5;124m"[39m [38;5;241m+[39m [38;5;28mstr[39m(unique))
[2024-03-07T16:33:08.737Z] [1;32m      3[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mThe number of occurrences of each land-use category is: [39m[38;5;124m"[39m [38;5;241m+[39m [38;5;28mstr[39m(counts))
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] [0;31mNameError[0m: name 'grid' is not defined
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 8 _
[2024-03-07T16:33:08.737Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.737Z] [94mCell 8: Cell execution caused an exception
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] Input:
[2024-03-07T16:33:08.737Z] [0mimport cartopy.crs as ccrs
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] # Set a CRS transformation:
[2024-03-07T16:33:08.737Z] crs = ccrs.LambertConformal(
[2024-03-07T16:33:08.737Z]     central_latitude=49, central_longitude=-95, standard_parallels=(49, 77)
[2024-03-07T16:33:08.737Z] )
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] ax = plt.subplot(projection=crs)
[2024-03-07T16:33:08.737Z] grid.name = "Land-use categories"
[2024-03-07T16:33:08.737Z] grid.where(grid != 127).sel(band=1).plot.imshow(ax=ax, transform=crs, cmap="tab20")
[2024-03-07T16:33:08.737Z] plt.show()
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] [94mTraceback:[0m
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.737Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.737Z] Cell [0;32mIn[1], line 9[0m
[2024-03-07T16:33:08.737Z] [1;32m      4[0m crs [38;5;241m=[39m ccrs[38;5;241m.[39mLambertConformal(
[2024-03-07T16:33:08.737Z] [1;32m      5[0m     central_latitude[38;5;241m=[39m[38;5;241m49[39m, central_longitude[38;5;241m=[39m[38;5;241m-[39m[38;5;241m95[39m, standard_parallels[38;5;241m=[39m([38;5;241m49[39m, [38;5;241m77[39m)
[2024-03-07T16:33:08.737Z] [1;32m      6[0m )
[2024-03-07T16:33:08.737Z] [1;32m      8[0m ax [38;5;241m=[39m plt[38;5;241m.[39msubplot(projection[38;5;241m=[39mcrs)
[2024-03-07T16:33:08.737Z] [0;32m----> 9[0m [43mgrid[49m[38;5;241m.[39mname [38;5;241m=[39m [38;5;124m"[39m[38;5;124mLand-use categories[39m[38;5;124m"[39m
[2024-03-07T16:33:08.737Z] [1;32m     10[0m grid[38;5;241m.[39mwhere(grid [38;5;241m!=[39m [38;5;241m127[39m)[38;5;241m.[39msel(band[38;5;241m=[39m[38;5;241m1[39m)[38;5;241m.[39mplot[38;5;241m.[39mimshow(ax[38;5;241m=[39max, transform[38;5;241m=[39mcrs, cmap[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtab20[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.737Z] [1;32m     11[0m plt[38;5;241m.[39mshow()
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] [0;31mNameError[0m: name 'grid' is not defined
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 10 _
[2024-03-07T16:33:08.737Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.737Z] [94mCell 10: Cell execution caused an exception
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] Input:
[2024-03-07T16:33:08.737Z] [0mproperties, dem = terrain_resp.get(asobj=True)
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] elevation = properties[0]["elevation"]
[2024-03-07T16:33:08.737Z] slope = properties[0]["slope"]
[2024-03-07T16:33:08.737Z] aspect = properties[0]["aspect"]
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] terrain = {"elevation": elevation, "slope": slope, "aspect": aspect}
[2024-03-07T16:33:08.737Z] display(terrain)
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] [94mTraceback:[0m
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.737Z] [0;31mAttributeError[0m                            Traceback (most recent call last)
[2024-03-07T16:33:08.737Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.737Z] [0;32m----> 1[0m properties, dem [38;5;241m=[39m [43mterrain_resp[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43masobj[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[2024-03-07T16:33:08.737Z] [1;32m      3[0m elevation [38;5;241m=[39m properties[[38;5;241m0[39m][[38;5;124m"[39m[38;5;124melevation[39m[38;5;124m"[39m]
[2024-03-07T16:33:08.737Z] [1;32m      4[0m slope [38;5;241m=[39m properties[[38;5;241m0[39m][[38;5;124m"[39m[38;5;124mslope[39m[38;5;124m"[39m]
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:41[0m, in [0;36mWPSResult.get[0;34m(self, asobj)[0m
[2024-03-07T16:33:08.737Z] [1;32m     38[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39misSucceded():
[2024-03-07T16:33:08.737Z] [1;32m     39[0m     [38;5;66;03m# TODO: add reason for failure[39;00m
[2024-03-07T16:33:08.737Z] [1;32m     40[0m     [38;5;28;01mraise[39;00m ProcessFailed([38;5;124m"[39m[38;5;124mSorry, process failed.[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.737Z] [0;32m---> 41[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_output[49m[43m([49m[43masobj[49m[43m)[49m
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36mWPSResult._make_output[0;34m(self, convert_objects)[0m
[2024-03-07T16:33:08.737Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:33:08.737Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:33:08.737Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:33:08.737Z] [1;32m     47[0m )
[2024-03-07T16:33:08.737Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:33:08.737Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:33:08.737Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28mself[39m[38;5;241m.[39m_process_output(o, convert_objects) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:33:08.737Z] [1;32m     51[0m )
[2024-03-07T16:33:08.737Z] 
[2024-03-07T16:33:08.737Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:33:08.737Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:33:08.737Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:33:08.737Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:33:08.737Z] [1;32m     47[0m )
[2024-03-07T16:33:08.738Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:33:08.738Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:33:08.738Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_process_output[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mconvert_objects[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:33:08.738Z] [1;32m     51[0m )
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:71[0m, in [0;36mWPSResult._process_output[0;34m(self, output, convert_objects)[0m
[2024-03-07T16:33:08.738Z] [1;32m     68[0m     [38;5;28;01mreturn[39;00m delist(data)
[2024-03-07T16:33:08.738Z] [1;32m     70[0m [38;5;28;01mif[39;00m convert_objects:
[2024-03-07T16:33:08.738Z] [0;32m---> 71[0m     [38;5;28;01mreturn[39;00m [43mconvert[49m[43m([49m[43moutput[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_path[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_converters[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mauth[49m[38;5;241;43m.[39;49m[43mverify[49m[43m)[49m
[2024-03-07T16:33:08.738Z] [1;32m     72[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:33:08.738Z] [1;32m     73[0m     [38;5;28;01mreturn[39;00m output[38;5;241m.[39mreference
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:374[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:33:08.738Z] [1;32m    372[0m [38;5;28;01mtry[39;00m:
[2024-03-07T16:33:08.738Z] [1;32m    373[0m     converter [38;5;241m=[39m [38;5;28mcls[39m(output, path[38;5;241m=[39mpath, verify[38;5;241m=[39mverify)
[2024-03-07T16:33:08.738Z] [0;32m--> 374[0m     out [38;5;241m=[39m [43mconverter[49m[38;5;241;43m.[39;49m[43mconvert[49m[43m([49m[43m)[49m
[2024-03-07T16:33:08.738Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:33:08.738Z] [1;32m    376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:266[0m, in [0;36mGeotiffRioxarrayConverter.convert[0;34m(self)[0m
[2024-03-07T16:33:08.738Z] [1;32m    263[0m [38;5;28;01mimport[39;00m [38;5;21;01mxarray[39;00m  [38;5;66;03m# isort: skip[39;00m
[2024-03-07T16:33:08.738Z] [1;32m    264[0m [38;5;28;01mimport[39;00m [38;5;21;01mrioxarray[39;00m  [38;5;66;03m# noqa[39;00m
[2024-03-07T16:33:08.738Z] [0;32m--> 266[0m [38;5;28;01mreturn[39;00m [43mxarray[49m[38;5;241;43m.[39;49m[43mopen_rasterio[49m([38;5;28mself[39m[38;5;241m.[39mfile)
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] [0;31mAttributeError[0m: module 'xarray' has no attribute 'open_rasterio'
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 11 _
[2024-03-07T16:33:08.738Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.738Z] [94mCell 11: Cell execution caused an exception
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] Input:
[2024-03-07T16:33:08.738Z] [0mcrs = ccrs.LambertConformal(
[2024-03-07T16:33:08.738Z]     central_latitude=49, central_longitude=-95, standard_parallels=(49, 77)
[2024-03-07T16:33:08.738Z] )
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] dem.name = "Elevation"
[2024-03-07T16:33:08.738Z] dem.attrs["units"] = "m"
[2024-03-07T16:33:08.738Z] ax = plt.subplot(projection=crs)
[2024-03-07T16:33:08.738Z] dem.where(dem != -32768).sel(band=1).plot.imshow(ax=ax, transform=crs, cmap="gnuplot")
[2024-03-07T16:33:08.738Z] plt.show()
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] [94mTraceback:[0m
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.738Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.738Z] Cell [0;32mIn[1], line 5[0m
[2024-03-07T16:33:08.738Z] [1;32m      1[0m crs [38;5;241m=[39m ccrs[38;5;241m.[39mLambertConformal(
[2024-03-07T16:33:08.738Z] [1;32m      2[0m     central_latitude[38;5;241m=[39m[38;5;241m49[39m, central_longitude[38;5;241m=[39m[38;5;241m-[39m[38;5;241m95[39m, standard_parallels[38;5;241m=[39m([38;5;241m49[39m, [38;5;241m77[39m)
[2024-03-07T16:33:08.738Z] [1;32m      3[0m )
[2024-03-07T16:33:08.738Z] [0;32m----> 5[0m [43mdem[49m[38;5;241m.[39mname [38;5;241m=[39m [38;5;124m"[39m[38;5;124mElevation[39m[38;5;124m"[39m
[2024-03-07T16:33:08.738Z] [1;32m      6[0m dem[38;5;241m.[39mattrs[[38;5;124m"[39m[38;5;124munits[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;124m"[39m[38;5;124mm[39m[38;5;124m"[39m
[2024-03-07T16:33:08.738Z] [1;32m      7[0m ax [38;5;241m=[39m plt[38;5;241m.[39msubplot(projection[38;5;241m=[39mcrs)
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] [0;31mNameError[0m: name 'dem' is not defined
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] _ RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 13 _
[2024-03-07T16:33:08.738Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.738Z] [94mCell 13: Cell execution caused an exception
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] Input:
[2024-03-07T16:33:08.738Z] [0mall_properties = {**shape_info, **land_use, **terrain}
[2024-03-07T16:33:08.738Z] display(all_properties)
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] [94mTraceback:[0m
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.738Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.738Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.738Z] [0;32m----> 1[0m all_properties [38;5;241m=[39m {[38;5;241m*[39m[38;5;241m*[39mshape_info, [38;5;241m*[39m[38;5;241m*[39m[43mland_use[49m, [38;5;241m*[39m[38;5;241m*[39mterrain}
[2024-03-07T16:33:08.738Z] [1;32m      2[0m display(all_properties)
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] [0;31mNameError[0m: name 'land_use' is not defined
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] ____ RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 7 ____
[2024-03-07T16:33:08.738Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.738Z] [94mCell 7: Cell execution caused an exception
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] Input:
[2024-03-07T16:33:08.738Z] [0mwith xr.set_options(keep_attrs=True):
[2024-03-07T16:33:08.738Z]     # Average the variables
[2024-03-07T16:33:08.738Z]     ERA5_tmin = ERA5_tmin.mean({"latitude", "longitude"})
[2024-03-07T16:33:08.738Z]     ERA5_tmax = ERA5_tmax.mean({"latitude", "longitude"})
[2024-03-07T16:33:08.738Z]     ERA5_pr = ERA5_pr.mean({"latitude", "longitude"})
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z]     # Ensure that the precipitation is non-negative, which can happen with some reanalysis models.
[2024-03-07T16:33:08.738Z]     ERA5_pr[ERA5_pr < 0] = 0
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z]     # Transform them to a dataset such that they can be written with attributes to netcdf
[2024-03-07T16:33:08.738Z]     ERA5_tmin = ERA5_tmin.to_dataset(name="tmin", promote_attrs=True)
[2024-03-07T16:33:08.738Z]     ERA5_tmax = ERA5_tmax.to_dataset(name="tmax", promote_attrs=True)
[2024-03-07T16:33:08.738Z]     ERA5_pr = ERA5_pr.to_dataset(name="pr", promote_attrs=True)
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] [94mTraceback:[0m
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.738Z] [0;31mKeyError[0m                                  Traceback (most recent call last)
[2024-03-07T16:33:08.738Z] Cell [0;32mIn[1], line 8[0m
[2024-03-07T16:33:08.738Z] [1;32m      5[0m ERA5_pr [38;5;241m=[39m ERA5_pr[38;5;241m.[39mmean({[38;5;124m"[39m[38;5;124mlatitude[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mlongitude[39m[38;5;124m"[39m})
[2024-03-07T16:33:08.738Z] [1;32m      7[0m [38;5;66;03m# Ensure that the precipitation is non-negative, which can happen with some reanalysis models.[39;00m
[2024-03-07T16:33:08.738Z] [0;32m----> 8[0m [43mERA5_pr[49m[43m[[49m[43mERA5_pr[49m[43m [49m[38;5;241;43m<[39;49m[43m [49m[38;5;241;43m0[39;49m[43m][49m [38;5;241m=[39m [38;5;241m0[39m
[2024-03-07T16:33:08.738Z] [1;32m     10[0m [38;5;66;03m# Transform them to a dataset such that they can be written with attributes to netcdf[39;00m
[2024-03-07T16:33:08.738Z] [1;32m     11[0m ERA5_tmin [38;5;241m=[39m ERA5_tmin[38;5;241m.[39mto_dataset(name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtmin[39m[38;5;124m"[39m, promote_attrs[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[2024-03-07T16:33:08.738Z] 
[2024-03-07T16:33:08.738Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:856[0m, in [0;36mDataArray.__setitem__[0;34m(self, key, value)[0m
[2024-03-07T16:33:08.738Z] [1;32m    851[0m     [38;5;28mself[39m[38;5;241m.[39mcoords[key] [38;5;241m=[39m value
[2024-03-07T16:33:08.738Z] [1;32m    852[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:33:08.738Z] [1;32m    853[0m     [38;5;66;03m# Coordinates in key, value and self[key] should be consistent.[39;00m
[2024-03-07T16:33:08.739Z] [1;32m    854[0m     [38;5;66;03m# TODO Coordinate consistency in key is checked here, but it[39;00m
[2024-03-07T16:33:08.739Z] [1;32m    855[0m     [38;5;66;03m# causes unnecessary indexing. It should be optimized.[39;00m
[2024-03-07T16:33:08.739Z] [0;32m--> 856[0m     obj [38;5;241m=[39m [38;5;28;43mself[39;49m[43m[[49m[43mkey[49m[43m][49m
[2024-03-07T16:33:08.739Z] [1;32m    857[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(value, DataArray):
[2024-03-07T16:33:08.739Z] [1;32m    858[0m         assert_coordinate_consistent(value, obj[38;5;241m.[39mcoords[38;5;241m.[39mvariables)
[2024-03-07T16:33:08.739Z] 
[2024-03-07T16:33:08.739Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:847[0m, in [0;36mDataArray.__getitem__[0;34m(self, key)[0m
[2024-03-07T16:33:08.739Z] [1;32m    844[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_getitem_coord(key)
[2024-03-07T16:33:08.739Z] [1;32m    845[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:33:08.739Z] [1;32m    846[0m     [38;5;66;03m# xarray-style array indexing[39;00m
[2024-03-07T16:33:08.739Z] [0;32m--> 847[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43misel[49m[43m([49m[43mindexers[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_item_key_to_dict[49m[43m([49m[43mkey[49m[43m)[49m[43m)[49m
[2024-03-07T16:33:08.739Z] 
[2024-03-07T16:33:08.739Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:1445[0m, in [0;36mDataArray.isel[0;34m(self, indexers, drop, missing_dims, **indexers_kwargs)[0m
[2024-03-07T16:33:08.739Z] [1;32m   1442[0m indexers [38;5;241m=[39m either_dict_or_kwargs(indexers, indexers_kwargs, [38;5;124m"[39m[38;5;124misel[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.739Z] [1;32m   1444[0m [38;5;28;01mif[39;00m [38;5;28many[39m(is_fancy_indexer(idx) [38;5;28;01mfor[39;00m idx [38;5;129;01min[39;00m indexers[38;5;241m.[39mvalues()):
[2024-03-07T16:33:08.739Z] [0;32m-> 1445[0m     ds [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_to_temp_dataset[49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43m_isel_fancy[49m[43m([49m
[2024-03-07T16:33:08.739Z] [1;32m   1446[0m [43m        [49m[43mindexers[49m[43m,[49m[43m [49m[43mdrop[49m[38;5;241;43m=[39;49m[43mdrop[49m[43m,[49m[43m [49m[43mmissing_dims[49m[38;5;241;43m=[39;49m[43mmissing_dims[49m
[2024-03-07T16:33:08.739Z] [1;32m   1447[0m [43m    [49m[43m)[49m
[2024-03-07T16:33:08.739Z] [1;32m   1448[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_from_temp_dataset(ds)
[2024-03-07T16:33:08.739Z] [1;32m   1450[0m [38;5;66;03m# Much faster algorithm for when all indexers are ints, slices, one-dimensional[39;00m
[2024-03-07T16:33:08.739Z] [1;32m   1451[0m [38;5;66;03m# lists, or zero or one-dimensional np.ndarray's[39;00m
[2024-03-07T16:33:08.739Z] 
[2024-03-07T16:33:08.739Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataset.py:2930[0m, in [0;36mDataset._isel_fancy[0;34m(self, indexers, drop, missing_dims)[0m
[2024-03-07T16:33:08.739Z] [1;32m   2926[0m var_indexers [38;5;241m=[39m {
[2024-03-07T16:33:08.739Z] [1;32m   2927[0m     k: v [38;5;28;01mfor[39;00m k, v [38;5;129;01min[39;00m valid_indexers[38;5;241m.[39mitems() [38;5;28;01mif[39;00m k [38;5;129;01min[39;00m var[38;5;241m.[39mdims
[2024-03-07T16:33:08.739Z] [1;32m   2928[0m }
[2024-03-07T16:33:08.739Z] [1;32m   2929[0m [38;5;28;01mif[39;00m var_indexers:
[2024-03-07T16:33:08.739Z] [0;32m-> 2930[0m     new_var [38;5;241m=[39m [43mvar[49m[38;5;241;43m.[39;49m[43misel[49m[43m([49m[43mindexers[49m[38;5;241;43m=[39;49m[43mvar_indexers[49m[43m)[49m
[2024-03-07T16:33:08.739Z] [1;32m   2931[0m     [38;5;66;03m# drop scalar coordinates[39;00m
[2024-03-07T16:33:08.739Z] [1;32m   2932[0m     [38;5;66;03m# https://github.com/pydata/xarray/issues/6554[39;00m
[2024-03-07T16:33:08.739Z] [1;32m   2933[0m     [38;5;28;01mif[39;00m name [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mcoords [38;5;129;01mand[39;00m drop [38;5;129;01mand[39;00m new_var[38;5;241m.[39mndim [38;5;241m==[39m [38;5;241m0[39m:
[2024-03-07T16:33:08.739Z] 
[2024-03-07T16:33:08.739Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:1368[0m, in [0;36mVariable.isel[0;34m(self, indexers, missing_dims, **indexers_kwargs)[0m
[2024-03-07T16:33:08.739Z] [1;32m   1365[0m indexers [38;5;241m=[39m drop_dims_from_indexers(indexers, [38;5;28mself[39m[38;5;241m.[39mdims, missing_dims)
[2024-03-07T16:33:08.739Z] [1;32m   1367[0m key [38;5;241m=[39m [38;5;28mtuple[39m(indexers[38;5;241m.[39mget(dim, [38;5;28mslice[39m([38;5;28;01mNone[39;00m)) [38;5;28;01mfor[39;00m dim [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mdims)
[2024-03-07T16:33:08.739Z] [0;32m-> 1368[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m[[49m[43mkey[49m[43m][49m
[2024-03-07T16:33:08.739Z] 
[2024-03-07T16:33:08.739Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:891[0m, in [0;36mVariable.__getitem__[0;34m(self, key)[0m
[2024-03-07T16:33:08.739Z] [1;32m    878[0m [38;5;28;01mdef[39;00m [38;5;21m__getitem__[39m([38;5;28mself[39m: T_Variable, key) [38;5;241m-[39m[38;5;241m>[39m T_Variable:
[2024-03-07T16:33:08.739Z] [1;32m    879[0m [38;5;250m    [39m[38;5;124;03m"""Return a new Variable object whose contents are consistent with[39;00m
[2024-03-07T16:33:08.739Z] [1;32m    880[0m [38;5;124;03m    getting the provided key from the underlying data.[39;00m
[2024-03-07T16:33:08.739Z] [1;32m    881[0m 
[2024-03-07T16:33:08.739Z] [0;32m   (...)[0m
[2024-03-07T16:33:08.739Z] [1;32m    889[0m [38;5;124;03m    array `x.values` directly.[39;00m
[2024-03-07T16:33:08.739Z] [1;32m    890[0m [38;5;124;03m    """[39;00m
[2024-03-07T16:33:08.739Z] [0;32m--> 891[0m     dims, indexer, new_order [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_broadcast_indexes[49m[43m([49m[43mkey[49m[43m)[49m
[2024-03-07T16:33:08.739Z] [1;32m    892[0m     data [38;5;241m=[39m as_indexable([38;5;28mself[39m[38;5;241m.[39m_data)[indexer]
[2024-03-07T16:33:08.739Z] [1;32m    893[0m     [38;5;28;01mif[39;00m new_order:
[2024-03-07T16:33:08.739Z] 
[2024-03-07T16:33:08.739Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:724[0m, in [0;36mVariable._broadcast_indexes[0;34m(self, key)[0m
[2024-03-07T16:33:08.739Z] [1;32m    721[0m [38;5;28;01mif[39;00m [38;5;28mall[39m([38;5;28misinstance[39m(k, BASIC_INDEXING_TYPES) [38;5;28;01mfor[39;00m k [38;5;129;01min[39;00m key):
[2024-03-07T16:33:08.739Z] [1;32m    722[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_broadcast_indexes_basic(key)
[2024-03-07T16:33:08.739Z] [0;32m--> 724[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_indexers[49m[43m([49m[43mkey[49m[43m)[49m
[2024-03-07T16:33:08.739Z] [1;32m    725[0m [38;5;66;03m# Detect it can be mapped as an outer indexer[39;00m
[2024-03-07T16:33:08.739Z] [1;32m    726[0m [38;5;66;03m# If all key is unlabeled, or[39;00m
[2024-03-07T16:33:08.739Z] [1;32m    727[0m [38;5;66;03m# key can be mapped as an OuterIndexer.[39;00m
[2024-03-07T16:33:08.739Z] [1;32m    728[0m [38;5;28;01mif[39;00m [38;5;28mall[39m([38;5;129;01mnot[39;00m [38;5;28misinstance[39m(k, Variable) [38;5;28;01mfor[39;00m k [38;5;129;01min[39;00m key):
[2024-03-07T16:33:08.739Z] 
[2024-03-07T16:33:08.739Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:776[0m, in [0;36mVariable._validate_indexers[0;34m(self, key)[0m
[2024-03-07T16:33:08.739Z] [1;32m    771[0m     [38;5;28;01mraise[39;00m [38;5;167;01mIndexError[39;00m(
[2024-03-07T16:33:08.739Z] [1;32m    772[0m         [38;5;124m"[39m[38;5;132;01m{}[39;00m[38;5;124m-dimensional boolean indexing is [39m[38;5;124m"[39m
[2024-03-07T16:33:08.739Z] [1;32m    773[0m         [38;5;124m"[39m[38;5;124mnot supported. [39m[38;5;124m"[39m[38;5;241m.[39mformat(k[38;5;241m.[39mndim)
[2024-03-07T16:33:08.739Z] [1;32m    774[0m     )
[2024-03-07T16:33:08.739Z] [1;32m    775[0m [38;5;28;01mif[39;00m is_duck_dask_array(k[38;5;241m.[39mdata):
[2024-03-07T16:33:08.739Z] [0;32m--> 776[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(
[2024-03-07T16:33:08.739Z] [1;32m    777[0m         [38;5;124m"[39m[38;5;124mIndexing with a boolean dask array is not allowed. [39m[38;5;124m"[39m
[2024-03-07T16:33:08.739Z] [1;32m    778[0m         [38;5;124m"[39m[38;5;124mThis will result in a dask array of unknown shape. [39m[38;5;124m"[39m
[2024-03-07T16:33:08.740Z] [1;32m    779[0m         [38;5;124m"[39m[38;5;124mSuch arrays are unsupported by Xarray.[39m[38;5;124m"[39m
[2024-03-07T16:33:08.740Z] [1;32m    780[0m         [38;5;124m"[39m[38;5;124mPlease compute the indexer first using .compute()[39m[38;5;124m"[39m
[2024-03-07T16:33:08.740Z] [1;32m    781[0m     )
[2024-03-07T16:33:08.740Z] [1;32m    782[0m [38;5;28;01mif[39;00m [38;5;28mgetattr[39m(k, [38;5;124m"[39m[38;5;124mdims[39m[38;5;124m"[39m, (dim,)) [38;5;241m!=[39m (dim,):
[2024-03-07T16:33:08.740Z] [1;32m    783[0m     [38;5;28;01mraise[39;00m [38;5;167;01mIndexError[39;00m(
[2024-03-07T16:33:08.740Z] [1;32m    784[0m         [38;5;124m"[39m[38;5;124mBoolean indexer should be unlabeled or on the [39m[38;5;124m"[39m
[2024-03-07T16:33:08.740Z] [1;32m    785[0m         [38;5;124m"[39m[38;5;124msame dimension to the indexed array. Indexer is [39m[38;5;124m"[39m
[2024-03-07T16:33:08.740Z] [0;32m   (...)[0m
[2024-03-07T16:33:08.740Z] [1;32m    788[0m         )
[2024-03-07T16:33:08.740Z] [1;32m    789[0m     )
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] [0;31mKeyError[0m: 'Indexing with a boolean dask array is not allowed. This will result in a dask array of unknown shape. Such arrays are unsupported by Xarray.Please compute the indexer first using .compute()'
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] ____ RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 8 ____
[2024-03-07T16:33:08.740Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.740Z] [94mCell 8: Cell execution caused an exception
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] Input:
[2024-03-07T16:33:08.740Z] [0m# Check and see if the precipitation makes sense:
[2024-03-07T16:33:08.740Z] ERA5_pr.pr.plot()
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] [94mTraceback:[0m
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.740Z] [0;31mAttributeError[0m                            Traceback (most recent call last)
[2024-03-07T16:33:08.740Z] Cell [0;32mIn[1], line 2[0m
[2024-03-07T16:33:08.740Z] [1;32m      1[0m [38;5;66;03m# Check and see if the precipitation makes sense:[39;00m
[2024-03-07T16:33:08.740Z] [0;32m----> 2[0m [43mERA5_pr[49m[38;5;241;43m.[39;49m[43mpr[49m[38;5;241m.[39mplot()
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/common.py:277[0m, in [0;36mAttrAccessMixin.__getattr__[0;34m(self, name)[0m
[2024-03-07T16:33:08.740Z] [1;32m    275[0m         [38;5;28;01mwith[39;00m suppress([38;5;167;01mKeyError[39;00m):
[2024-03-07T16:33:08.740Z] [1;32m    276[0m             [38;5;28;01mreturn[39;00m source[name]
[2024-03-07T16:33:08.740Z] [0;32m--> 277[0m [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(
[2024-03-07T16:33:08.740Z] [1;32m    278[0m     [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m[38;5;28mtype[39m([38;5;28mself[39m)[38;5;241m.[39m[38;5;18m__name__[39m[38;5;132;01m!r}[39;00m[38;5;124m object has no attribute [39m[38;5;132;01m{[39;00mname[38;5;132;01m!r}[39;00m[38;5;124m"[39m
[2024-03-07T16:33:08.740Z] [1;32m    279[0m )
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] [0;31mAttributeError[0m: 'DataArray' object has no attribute 'pr'
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] ___ RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 10 ____
[2024-03-07T16:33:08.740Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.740Z] [94mCell 10: Cell execution caused an exception
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] Input:
[2024-03-07T16:33:08.740Z] [0m# Option 2, which is recommended, in which we prepare a single file that merges all three variables into one netcdf file:
[2024-03-07T16:33:08.740Z] with xr.set_options(keep_attrs=True):
[2024-03-07T16:33:08.740Z]     xr.merge([ERA5_tmin, ERA5_tmax, ERA5_pr]).to_netcdf(tmp / "ERA5_weather_data.nc")
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] [94mTraceback:[0m
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.740Z] [0;31mMergeError[0m                                Traceback (most recent call last)
[2024-03-07T16:33:08.740Z] Cell [0;32mIn[1], line 3[0m
[2024-03-07T16:33:08.740Z] [1;32m      1[0m [38;5;66;03m# Option 2, which is recommended, in which we prepare a single file that merges all three variables into one netcdf file:[39;00m
[2024-03-07T16:33:08.740Z] [1;32m      2[0m [38;5;28;01mwith[39;00m xr[38;5;241m.[39mset_options(keep_attrs[38;5;241m=[39m[38;5;28;01mTrue[39;00m):
[2024-03-07T16:33:08.740Z] [0;32m----> 3[0m     [43mxr[49m[38;5;241;43m.[39;49m[43mmerge[49m[43m([49m[43m[[49m[43mERA5_tmin[49m[43m,[49m[43m [49m[43mERA5_tmax[49m[43m,[49m[43m [49m[43mERA5_pr[49m[43m][49m[43m)[49m[38;5;241m.[39mto_netcdf(tmp [38;5;241m/[39m [38;5;124m"[39m[38;5;124mERA5_weather_data.nc[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/merge.py:992[0m, in [0;36mmerge[0;34m(objects, compat, join, fill_value, combine_attrs)[0m
[2024-03-07T16:33:08.740Z] [1;32m    989[0m         obj [38;5;241m=[39m obj[38;5;241m.[39mto_dataset()
[2024-03-07T16:33:08.740Z] [1;32m    990[0m     dict_like_objects[38;5;241m.[39mappend(obj)
[2024-03-07T16:33:08.740Z] [0;32m--> 992[0m merge_result [38;5;241m=[39m [43mmerge_core[49m[43m([49m
[2024-03-07T16:33:08.740Z] [1;32m    993[0m [43m    [49m[43mdict_like_objects[49m[43m,[49m
[2024-03-07T16:33:08.740Z] [1;32m    994[0m [43m    [49m[43mcompat[49m[43m,[49m
[2024-03-07T16:33:08.740Z] [1;32m    995[0m [43m    [49m[43mjoin[49m[43m,[49m
[2024-03-07T16:33:08.740Z] [1;32m    996[0m [43m    [49m[43mcombine_attrs[49m[38;5;241;43m=[39;49m[43mcombine_attrs[49m[43m,[49m
[2024-03-07T16:33:08.740Z] [1;32m    997[0m [43m    [49m[43mfill_value[49m[38;5;241;43m=[39;49m[43mfill_value[49m[43m,[49m
[2024-03-07T16:33:08.740Z] [1;32m    998[0m [43m[49m[43m)[49m
[2024-03-07T16:33:08.740Z] [1;32m    999[0m [38;5;28;01mreturn[39;00m Dataset[38;5;241m.[39m_construct_direct([38;5;241m*[39m[38;5;241m*[39mmerge_result[38;5;241m.[39m_asdict())
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/merge.py:719[0m, in [0;36mmerge_core[0;34m(objects, compat, join, combine_attrs, priority_arg, explicit_coords, indexes, fill_value, skip_align_args)[0m
[2024-03-07T16:33:08.740Z] [1;32m    717[0m collected [38;5;241m=[39m collect_variables_and_indexes(aligned, indexes[38;5;241m=[39mindexes)
[2024-03-07T16:33:08.740Z] [1;32m    718[0m prioritized [38;5;241m=[39m _get_priority_vars_and_indexes(aligned, priority_arg, compat[38;5;241m=[39mcompat)
[2024-03-07T16:33:08.740Z] [0;32m--> 719[0m variables, out_indexes [38;5;241m=[39m [43mmerge_collected[49m[43m([49m
[2024-03-07T16:33:08.740Z] [1;32m    720[0m [43m    [49m[43mcollected[49m[43m,[49m[43m [49m[43mprioritized[49m[43m,[49m[43m [49m[43mcompat[49m[38;5;241;43m=[39;49m[43mcompat[49m[43m,[49m[43m [49m[43mcombine_attrs[49m[38;5;241;43m=[39;49m[43mcombine_attrs[49m
[2024-03-07T16:33:08.740Z] [1;32m    721[0m [43m[49m[43m)[49m
[2024-03-07T16:33:08.740Z] [1;32m    723[0m dims [38;5;241m=[39m calculate_dimensions(variables)
[2024-03-07T16:33:08.740Z] [1;32m    725[0m coord_names, noncoord_names [38;5;241m=[39m determine_coords(coerced)
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/merge.py:290[0m, in [0;36mmerge_collected[0;34m(grouped, prioritized, compat, combine_attrs, equals)[0m
[2024-03-07T16:33:08.740Z] [1;32m    288[0m variables [38;5;241m=[39m [variable [38;5;28;01mfor[39;00m variable, _ [38;5;129;01min[39;00m elements_list]
[2024-03-07T16:33:08.740Z] [1;32m    289[0m [38;5;28;01mtry[39;00m:
[2024-03-07T16:33:08.740Z] [0;32m--> 290[0m     merged_vars[name] [38;5;241m=[39m [43munique_variable[49m[43m([49m
[2024-03-07T16:33:08.740Z] [1;32m    291[0m [43m        [49m[43mname[49m[43m,[49m[43m [49m[43mvariables[49m[43m,[49m[43m [49m[43mcompat[49m[43m,[49m[43m [49m[43mequals[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43mname[49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m
[2024-03-07T16:33:08.740Z] [1;32m    292[0m [43m    [49m[43m)[49m
[2024-03-07T16:33:08.740Z] [1;32m    293[0m [38;5;28;01mexcept[39;00m MergeError:
[2024-03-07T16:33:08.740Z] [1;32m    294[0m     [38;5;28;01mif[39;00m compat [38;5;241m!=[39m [38;5;124m"[39m[38;5;124mminimal[39m[38;5;124m"[39m:
[2024-03-07T16:33:08.740Z] [1;32m    295[0m         [38;5;66;03m# we need more than "minimal" compatibility (for which[39;00m
[2024-03-07T16:33:08.740Z] [1;32m    296[0m         [38;5;66;03m# we drop conflicting coordinates)[39;00m
[2024-03-07T16:33:08.740Z] 
[2024-03-07T16:33:08.740Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/merge.py:144[0m, in [0;36munique_variable[0;34m(name, variables, compat, equals)[0m
[2024-03-07T16:33:08.740Z] [1;32m    141[0m                 [38;5;28;01mbreak[39;00m
[2024-03-07T16:33:08.740Z] [1;32m    143[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m equals:
[2024-03-07T16:33:08.741Z] [0;32m--> 144[0m     [38;5;28;01mraise[39;00m MergeError(
[2024-03-07T16:33:08.741Z] [1;32m    145[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mconflicting values for variable [39m[38;5;132;01m{[39;00mname[38;5;132;01m!r}[39;00m[38;5;124m on objects to be combined. [39m[38;5;124m"[39m
[2024-03-07T16:33:08.741Z] [1;32m    146[0m         [38;5;124m"[39m[38;5;124mYou can skip this check by specifying compat=[39m[38;5;124m'[39m[38;5;124moverride[39m[38;5;124m'[39m[38;5;124m.[39m[38;5;124m"[39m
[2024-03-07T16:33:08.741Z] [1;32m    147[0m     )
[2024-03-07T16:33:08.741Z] [1;32m    149[0m [38;5;28;01mif[39;00m combine_method:
[2024-03-07T16:33:08.741Z] [1;32m    150[0m     [38;5;28;01mfor[39;00m var [38;5;129;01min[39;00m variables[[38;5;241m1[39m:]:
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] [0;31mMergeError[0m: conflicting values for variable 't2m' on objects to be combined. You can skip this check by specifying compat='override'.
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 5 _
[2024-03-07T16:33:08.741Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.741Z] [94mCell 5: Cell execution caused an exception
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] Input:
[2024-03-07T16:33:08.741Z] [0m# If we want to import our own raven configuration files and forcing data, we can do so by importing them
[2024-03-07T16:33:08.741Z] # using the ravenpy.run  method. This will run the model exactly as the users will have designed it.
[2024-03-07T16:33:08.741Z] from ravenpy import OutputReader
[2024-03-07T16:33:08.741Z] from ravenpy.ravenpy import run
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] # This is used to specify the raven configuration files prefixes. In this case, we will retake the previously created files
[2024-03-07T16:33:08.741Z] run_name = run_name
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] # This is the path where the files were uploaded by the user. Model outputs will also be placed there in a
[2024-03-07T16:33:08.741Z] # subfolder called "outputs"
[2024-03-07T16:33:08.741Z] configdir = workdir
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] # Run the model and get the path to the outputs folder that can be used in the output reader.
[2024-03-07T16:33:08.741Z] outputs_path = run(modelname=run_name, configdir=configdir)
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] # Get the outputs using the Output Reader object.
[2024-03-07T16:33:08.741Z] outputs = OutputReader(run_name=run_name, path=outputs_path)
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] [94mTraceback:[0m
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.741Z] [0;31mRavenError[0m                                Traceback (most recent call last)
[2024-03-07T16:33:08.741Z] Cell [0;32mIn[1], line 14[0m
[2024-03-07T16:33:08.741Z] [1;32m     11[0m configdir [38;5;241m=[39m workdir
[2024-03-07T16:33:08.741Z] [1;32m     13[0m [38;5;66;03m# Run the model and get the path to the outputs folder that can be used in the output reader.[39;00m
[2024-03-07T16:33:08.741Z] [0;32m---> 14[0m outputs_path [38;5;241m=[39m [43mrun[49m[43m([49m[43mmodelname[49m[38;5;241;43m=[39;49m[43mrun_name[49m[43m,[49m[43m [49m[43mconfigdir[49m[38;5;241;43m=[39;49m[43mconfigdir[49m[43m)[49m
[2024-03-07T16:33:08.741Z] [1;32m     16[0m [38;5;66;03m# Get the outputs using the Output Reader object.[39;00m
[2024-03-07T16:33:08.741Z] [1;32m     17[0m outputs [38;5;241m=[39m OutputReader(run_name[38;5;241m=[39mrun_name, path[38;5;241m=[39moutputs_path)
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/ravenpy/ravenpy.py:323[0m, in [0;36mrun[0;34m(modelname, configdir, outputdir, overwrite, verbose)[0m
[2024-03-07T16:33:08.741Z] [1;32m    320[0m         warn(msg, category[38;5;241m=[39mRavenWarning)
[2024-03-07T16:33:08.741Z] [1;32m    322[0m [38;5;28;01mif[39;00m messages[[38;5;124m"[39m[38;5;124mERROR[39m[38;5;124m"[39m]:
[2024-03-07T16:33:08.741Z] [0;32m--> 323[0m     [38;5;28;01mraise[39;00m RavenError(
[2024-03-07T16:33:08.741Z] [1;32m    324[0m         [38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m[38;5;241m.[39mjoin([[38;5;124mf[39m[38;5;124m"[39m[38;5;124mConfig directory: [39m[38;5;132;01m{[39;00mconfigdir[38;5;132;01m}[39;00m[38;5;124m"[39m] [38;5;241m+[39m messages[[38;5;124m"[39m[38;5;124mERROR[39m[38;5;124m"[39m])
[2024-03-07T16:33:08.741Z] [1;32m    325[0m     )
[2024-03-07T16:33:08.741Z] [1;32m    327[0m [38;5;28;01mif[39;00m returncode [38;5;241m!=[39m [38;5;241m0[39m:
[2024-03-07T16:33:08.741Z] [1;32m    328[0m     [38;5;28;01mraise[39;00m [38;5;167;01mOSError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mRaven segfaulted : [39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00mstdout[38;5;132;01m}[39;00m[38;5;124m"[39m)
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] [0;31mRavenError[0m: Config directory: /tmp/NB48sz4avbe
[2024-03-07T16:33:08.741Z] :CustomOutput command: Unrecognized custom output temporal aggregation method
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 6 _
[2024-03-07T16:33:08.741Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.741Z] [94mCell 6: Cell execution caused an exception
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] Input:
[2024-03-07T16:33:08.741Z] [0m# If we already have a model configuration that we built in-memory (such as the "m" GR4JCN model we built above),
[2024-03-07T16:33:08.741Z] # then we can use the Emulator object to simply emulate the model we were working on and get outputs directly
[2024-03-07T16:33:08.741Z] from ravenpy import Emulator
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] # Prepare the emulator by writing files on disk
[2024-03-07T16:33:08.741Z] e = Emulator(config=m)
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] # Run the model and get the outputs.
[2024-03-07T16:33:08.741Z] outputs = e.run()
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] [94mTraceback:[0m
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.741Z] [0;31mRavenError[0m                                Traceback (most recent call last)
[2024-03-07T16:33:08.741Z] Cell [0;32mIn[1], line 9[0m
[2024-03-07T16:33:08.741Z] [1;32m      6[0m e [38;5;241m=[39m Emulator(config[38;5;241m=[39mm)
[2024-03-07T16:33:08.741Z] [1;32m      8[0m [38;5;66;03m# Run the model and get the outputs.[39;00m
[2024-03-07T16:33:08.741Z] [0;32m----> 9[0m outputs [38;5;241m=[39m [43me[49m[38;5;241;43m.[39;49m[43mrun[49m[43m([49m[43m)[49m
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/ravenpy/ravenpy.py:68[0m, in [0;36mEmulator.run[0;34m(self, overwrite)[0m
[2024-03-07T16:33:08.741Z] [1;32m     64[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m ([38;5;28mself[39m[38;5;241m.[39mworkdir [38;5;241m/[39m [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m[38;5;28mself[39m[38;5;241m.[39mmodelname[38;5;132;01m}[39;00m[38;5;124m.rvi[39m[38;5;124m"[39m)[38;5;241m.[39mexists():
[2024-03-07T16:33:08.741Z] [1;32m     65[0m     [38;5;66;03m# FIXME: No attribute 'write_rv' on Emulator [attribute-error][39;00m
[2024-03-07T16:33:08.741Z] [1;32m     66[0m     [38;5;28mself[39m[38;5;241m.[39mwrite_rv(overwrite[38;5;241m=[39moverwrite)
[2024-03-07T16:33:08.741Z] [0;32m---> 68[0m [38;5;28mself[39m[38;5;241m.[39m_output_path [38;5;241m=[39m [43mrun[49m[43m([49m
[2024-03-07T16:33:08.741Z] [1;32m     69[0m [43m    [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mmodelname[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mworkdir[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43moutput[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43moverwrite[49m[38;5;241;43m=[39;49m[43moverwrite[49m
[2024-03-07T16:33:08.741Z] [1;32m     70[0m [43m[49m[43m)[49m
[2024-03-07T16:33:08.741Z] [1;32m     71[0m [38;5;28mself[39m[38;5;241m.[39m_output [38;5;241m=[39m OutputReader([38;5;28mself[39m[38;5;241m.[39mconfig[38;5;241m.[39mrun_name, path[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_output_path)
[2024-03-07T16:33:08.741Z] [1;32m     72[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_output
[2024-03-07T16:33:08.741Z] 
[2024-03-07T16:33:08.741Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/ravenpy/ravenpy.py:323[0m, in [0;36mrun[0;34m(modelname, configdir, outputdir, overwrite, verbose)[0m
[2024-03-07T16:33:08.741Z] [1;32m    320[0m         warn(msg, category[38;5;241m=[39mRavenWarning)
[2024-03-07T16:33:08.741Z] [1;32m    322[0m [38;5;28;01mif[39;00m messages[[38;5;124m"[39m[38;5;124mERROR[39m[38;5;124m"[39m]:
[2024-03-07T16:33:08.741Z] [0;32m--> 323[0m     [38;5;28;01mraise[39;00m RavenError(
[2024-03-07T16:33:08.741Z] [1;32m    324[0m         [38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m[38;5;241m.[39mjoin([[38;5;124mf[39m[38;5;124m"[39m[38;5;124mConfig directory: [39m[38;5;132;01m{[39;00mconfigdir[38;5;132;01m}[39;00m[38;5;124m"[39m] [38;5;241m+[39m messages[[38;5;124m"[39m[38;5;124mERROR[39m[38;5;124m"[39m])
[2024-03-07T16:33:08.741Z] [1;32m    325[0m     )
[2024-03-07T16:33:08.742Z] [1;32m    327[0m [38;5;28;01mif[39;00m returncode [38;5;241m!=[39m [38;5;241m0[39m:
[2024-03-07T16:33:08.742Z] [1;32m    328[0m     [38;5;28;01mraise[39;00m [38;5;167;01mOSError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mRaven segfaulted : [39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00mstdout[38;5;132;01m}[39;00m[38;5;124m"[39m)
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31mRavenError[0m: Config directory: /tmp/tmp2tn9q4mp
[2024-03-07T16:33:08.742Z] :CustomOutput command: Unrecognized custom output temporal aggregation method
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 7 _
[2024-03-07T16:33:08.742Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.742Z] [94mCell 7: Cell execution caused an exception
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] Input:
[2024-03-07T16:33:08.742Z] [0m# Show the files available in the outputs. Each of these can be accessed to get information about the simulation.
[2024-03-07T16:33:08.742Z] outputs.files
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [94mTraceback:[0m
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.742Z] Cell [0;32mIn[1], line 2[0m
[2024-03-07T16:33:08.742Z] [1;32m      1[0m [38;5;66;03m# Show the files available in the outputs. Each of these can be accessed to get information about the simulation.[39;00m
[2024-03-07T16:33:08.742Z] [0;32m----> 2[0m [43moutputs[49m[38;5;241m.[39mfiles
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 8 _
[2024-03-07T16:33:08.742Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.742Z] [94mCell 8: Cell execution caused an exception
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] Input:
[2024-03-07T16:33:08.742Z] [0m# The model outputs are actually already loaded as Python objects in memory, thus we can access the data directly.
[2024-03-07T16:33:08.742Z] print("----------------HYDROGRAPH----------------")
[2024-03-07T16:33:08.742Z] display(outputs.hydrograph)
[2024-03-07T16:33:08.742Z] print("")
[2024-03-07T16:33:08.742Z] print("-----------------STORAGE------------------")
[2024-03-07T16:33:08.742Z] display(outputs.storage)
[2024-03-07T16:33:08.742Z] print("")
[2024-03-07T16:33:08.742Z] print("-----------------SOLUTION-----------------")
[2024-03-07T16:33:08.742Z] display(outputs.solution)
[2024-03-07T16:33:08.742Z] print("")
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [94mTraceback:[0m
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.742Z] Cell [0;32mIn[1], line 3[0m
[2024-03-07T16:33:08.742Z] [1;32m      1[0m [38;5;66;03m# The model outputs are actually already loaded as Python objects in memory, thus we can access the data directly.[39;00m
[2024-03-07T16:33:08.742Z] [1;32m      2[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124m----------------HYDROGRAPH----------------[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.742Z] [0;32m----> 3[0m display([43moutputs[49m[38;5;241m.[39mhydrograph)
[2024-03-07T16:33:08.742Z] [1;32m      4[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.742Z] [1;32m      5[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124m-----------------STORAGE------------------[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 9 _
[2024-03-07T16:33:08.742Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.742Z] [94mCell 9: Cell execution caused an exception
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] Input:
[2024-03-07T16:33:08.742Z] [0m# Import the graphing utility built to handle Raven model outputs
[2024-03-07T16:33:08.742Z] from ravenpy.utilities.nb_graphs import hydrographs
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] hydrograph_objects = outputs.hydrograph
[2024-03-07T16:33:08.742Z] hydrographs(hydrograph_objects)
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [94mTraceback:[0m
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.742Z] Cell [0;32mIn[1], line 4[0m
[2024-03-07T16:33:08.742Z] [1;32m      1[0m [38;5;66;03m# Import the graphing utility built to handle Raven model outputs[39;00m
[2024-03-07T16:33:08.742Z] [1;32m      2[0m [38;5;28;01mfrom[39;00m [38;5;21;01mravenpy[39;00m[38;5;21;01m.[39;00m[38;5;21;01mutilities[39;00m[38;5;21;01m.[39;00m[38;5;21;01mnb_graphs[39;00m [38;5;28;01mimport[39;00m hydrographs
[2024-03-07T16:33:08.742Z] [0;32m----> 4[0m hydrograph_objects [38;5;241m=[39m [43moutputs[49m[38;5;241m.[39mhydrograph
[2024-03-07T16:33:08.742Z] [1;32m      5[0m hydrographs(hydrograph_objects)
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 10 _
[2024-03-07T16:33:08.742Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.742Z] [94mCell 10: Cell execution caused an exception
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] Input:
[2024-03-07T16:33:08.742Z] [0moutputs.hydrograph.q_sim.plot()
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [94mTraceback:[0m
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.742Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.742Z] [0;32m----> 1[0m [43moutputs[49m[38;5;241m.[39mhydrograph[38;5;241m.[39mq_sim[38;5;241m.[39mplot()
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 11 _
[2024-03-07T16:33:08.742Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.742Z] [94mCell 11: Cell execution caused an exception
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] Input:
[2024-03-07T16:33:08.742Z] [0mprint(list(outputs.storage.keys()))
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [94mTraceback:[0m
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.742Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.742Z] [0;32m----> 1[0m [38;5;28mprint[39m([38;5;28mlist[39m([43moutputs[49m[38;5;241m.[39mstorage[38;5;241m.[39mkeys()))
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] _ RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 12 _
[2024-03-07T16:33:08.742Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.742Z] [94mCell 12: Cell execution caused an exception
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] Input:
[2024-03-07T16:33:08.742Z] [0m# Plot the "Snow" variable
[2024-03-07T16:33:08.742Z] outputs.storage["Snow"].plot()
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [94mTraceback:[0m
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.742Z] Cell [0;32mIn[1], line 2[0m
[2024-03-07T16:33:08.742Z] [1;32m      1[0m [38;5;66;03m# Plot the "Snow" variable[39;00m
[2024-03-07T16:33:08.742Z] [0;32m----> 2[0m [43moutputs[49m[38;5;241m.[39mstorage[[38;5;124m"[39m[38;5;124mSnow[39m[38;5;124m"[39m][38;5;241m.[39mplot()
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31mNameError[0m: name 'outputs' is not defined
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] ______ RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 0 ______
[2024-03-07T16:33:08.742Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.742Z] [94mCell 0: Cell execution caused an exception
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] Input:
[2024-03-07T16:33:08.742Z] [0mimport os
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] from hsclient import HydroShare, Token
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] # Authentication method using username and password
[2024-03-07T16:33:08.742Z] """
[2024-03-07T16:33:08.742Z] username = 'XXXXX'
[2024-03-07T16:33:08.742Z] password = 'XXXXX'
[2024-03-07T16:33:08.742Z] hs = HydroShare(username=username, password=password)
[2024-03-07T16:33:08.742Z] """
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] client_id = os.environ.get("HYDROSHARE_AUTH_CLIENT_ID", "<your_client_id>")
[2024-03-07T16:33:08.742Z] access_token = os.environ.get("HYDROSHARE_AUTH_TOKEN", "<your_auth_token>")
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] token = Token(access_token=access_token, token_type="bearer")
[2024-03-07T16:33:08.742Z] hs = HydroShare(client_id=client_id, token=token)
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [94mTraceback:[0m
[2024-03-07T16:33:08.742Z] 
[2024-03-07T16:33:08.742Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.742Z] [0;31mValidationError[0m                           Traceback (most recent call last)
[2024-03-07T16:33:08.742Z] Cell [0;32mIn[1], line 15[0m
[2024-03-07T16:33:08.743Z] [1;32m     12[0m client_id [38;5;241m=[39m os[38;5;241m.[39menviron[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mHYDROSHARE_AUTH_CLIENT_ID[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124m<your_client_id>[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.743Z] [1;32m     13[0m access_token [38;5;241m=[39m os[38;5;241m.[39menviron[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mHYDROSHARE_AUTH_TOKEN[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124m<your_auth_token>[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.743Z] [0;32m---> 15[0m token [38;5;241m=[39m [43mToken[49m[43m([49m[43maccess_token[49m[38;5;241;43m=[39;49m[43maccess_token[49m[43m,[49m[43m [49m[43mtoken_type[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mbearer[39;49m[38;5;124;43m"[39;49m[43m)[49m
[2024-03-07T16:33:08.743Z] [1;32m     16[0m hs [38;5;241m=[39m HydroShare(client_id[38;5;241m=[39mclient_id, token[38;5;241m=[39mtoken)
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/pydantic/main.py:171[0m, in [0;36mBaseModel.__init__[0;34m(self, **data)[0m
[2024-03-07T16:33:08.743Z] [1;32m    169[0m [38;5;66;03m# `__tracebackhide__` tells pytest and some other tools to omit this function from tracebacks[39;00m
[2024-03-07T16:33:08.743Z] [1;32m    170[0m __tracebackhide__ [38;5;241m=[39m [38;5;28;01mTrue[39;00m
[2024-03-07T16:33:08.743Z] [0;32m--> 171[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m__pydantic_validator__[49m[38;5;241;43m.[39;49m[43mvalidate_python[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mself_instance[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[43m)[49m
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [0;31mValidationError[0m: 4 validation errors for Token
[2024-03-07T16:33:08.743Z] scope
[2024-03-07T16:33:08.743Z]   Field required [type=missing, input_value={'access_token': '<your_a... 'token_type': 'bearer'}, input_type=dict]
[2024-03-07T16:33:08.743Z]     For further information visit https://errors.pydantic.dev/2.6/v/missing
[2024-03-07T16:33:08.743Z] state
[2024-03-07T16:33:08.743Z]   Field required [type=missing, input_value={'access_token': '<your_a... 'token_type': 'bearer'}, input_type=dict]
[2024-03-07T16:33:08.743Z]     For further information visit https://errors.pydantic.dev/2.6/v/missing
[2024-03-07T16:33:08.743Z] expires_in
[2024-03-07T16:33:08.743Z]   Field required [type=missing, input_value={'access_token': '<your_a... 'token_type': 'bearer'}, input_type=dict]
[2024-03-07T16:33:08.743Z]     For further information visit https://errors.pydantic.dev/2.6/v/missing
[2024-03-07T16:33:08.743Z] refresh_token
[2024-03-07T16:33:08.743Z]   Field required [type=missing, input_value={'access_token': '<your_a... 'token_type': 'bearer'}, input_type=dict]
[2024-03-07T16:33:08.743Z]     For further information visit https://errors.pydantic.dev/2.6/v/missing
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] ______ RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 1 ______
[2024-03-07T16:33:08.743Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.743Z] [94mCell 1: Cell execution caused an exception
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] Input:
[2024-03-07T16:33:08.743Z] [0mresults = hs.search(subject=["Harvey"])
[2024-03-07T16:33:08.743Z] for r in results:
[2024-03-07T16:33:08.743Z]     print(r.resource_title, ": ", r.resource_id)
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [94mTraceback:[0m
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.743Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.743Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.743Z] [0;32m----> 1[0m results [38;5;241m=[39m [43mhs[49m[38;5;241m.[39msearch(subject[38;5;241m=[39m[[38;5;124m"[39m[38;5;124mHarvey[39m[38;5;124m"[39m])
[2024-03-07T16:33:08.743Z] [1;32m      2[0m [38;5;28;01mfor[39;00m r [38;5;129;01min[39;00m results:
[2024-03-07T16:33:08.743Z] [1;32m      3[0m     [38;5;28mprint[39m(r[38;5;241m.[39mresource_title, [38;5;124m"[39m[38;5;124m: [39m[38;5;124m"[39m, r[38;5;241m.[39mresource_id)
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [0;31mNameError[0m: name 'hs' is not defined
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] ______ RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 2 ______
[2024-03-07T16:33:08.743Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.743Z] [94mCell 2: Cell execution caused an exception
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] Input:
[2024-03-07T16:33:08.743Z] [0mres = hs.resource("51d1539bf6e94b15ac33f7631228118c", validate=False)
[2024-03-07T16:33:08.743Z] res.files()
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [94mTraceback:[0m
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.743Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.743Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.743Z] [0;32m----> 1[0m res [38;5;241m=[39m [43mhs[49m[38;5;241m.[39mresource([38;5;124m"[39m[38;5;124m51d1539bf6e94b15ac33f7631228118c[39m[38;5;124m"[39m, validate[38;5;241m=[39m[38;5;28;01mFalse[39;00m)
[2024-03-07T16:33:08.743Z] [1;32m      2[0m res[38;5;241m.[39mfiles()
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [0;31mNameError[0m: name 'hs' is not defined
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] ______ RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 3 ______
[2024-03-07T16:33:08.743Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.743Z] [94mCell 3: Cell execution caused an exception
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] Input:
[2024-03-07T16:33:08.743Z] [0mres.file_download("USGS_Harvey_gages_TxLaMsAr.csv", save_path="/tmp")
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [94mTraceback:[0m
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.743Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.743Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.743Z] [0;32m----> 1[0m [43mres[49m[38;5;241m.[39mfile_download([38;5;124m"[39m[38;5;124mUSGS_Harvey_gages_TxLaMsAr.csv[39m[38;5;124m"[39m, save_path[38;5;241m=[39m[38;5;124m"[39m[38;5;124m/tmp[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [0;31mNameError[0m: name 'res' is not defined
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 7 _
[2024-03-07T16:33:08.743Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.743Z] [94mCell 7: Cell execution caused an exception
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] Input:
[2024-03-07T16:33:08.743Z] [0mfeatures, statistics, grid0 = stats_resp.get(asobj=True)
[2024-03-07T16:33:08.743Z] lu = statistics[0]
[2024-03-07T16:33:08.743Z] total = sum(lu.values())
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] land_use = {k: (v / total) for (k, v) in lu.items()}
[2024-03-07T16:33:08.743Z] display("Land use ratios", land_use)
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] land_use_pct = {k: f"{np.round(v/total*100, 2)} %" for (k, v) in lu.items()}
[2024-03-07T16:33:08.743Z] display("Land use percentages", land_use_pct)
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [94mTraceback:[0m
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.743Z] [0;31mAttributeError[0m                            Traceback (most recent call last)
[2024-03-07T16:33:08.743Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.743Z] [0;32m----> 1[0m features, statistics, grid0 [38;5;241m=[39m [43mstats_resp[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43masobj[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[2024-03-07T16:33:08.743Z] [1;32m      2[0m lu [38;5;241m=[39m statistics[[38;5;241m0[39m]
[2024-03-07T16:33:08.743Z] [1;32m      3[0m total [38;5;241m=[39m [38;5;28msum[39m(lu[38;5;241m.[39mvalues())
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:41[0m, in [0;36mWPSResult.get[0;34m(self, asobj)[0m
[2024-03-07T16:33:08.743Z] [1;32m     38[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39misSucceded():
[2024-03-07T16:33:08.743Z] [1;32m     39[0m     [38;5;66;03m# TODO: add reason for failure[39;00m
[2024-03-07T16:33:08.743Z] [1;32m     40[0m     [38;5;28;01mraise[39;00m ProcessFailed([38;5;124m"[39m[38;5;124mSorry, process failed.[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.743Z] [0;32m---> 41[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_output[49m[43m([49m[43masobj[49m[43m)[49m
[2024-03-07T16:33:08.743Z] 
[2024-03-07T16:33:08.743Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36mWPSResult._make_output[0;34m(self, convert_objects)[0m
[2024-03-07T16:33:08.743Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:33:08.743Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:33:08.743Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:33:08.743Z] [1;32m     47[0m )
[2024-03-07T16:33:08.744Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:33:08.744Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:33:08.744Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28mself[39m[38;5;241m.[39m_process_output(o, convert_objects) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:33:08.744Z] [1;32m     51[0m )
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:33:08.744Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:33:08.744Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:33:08.744Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:33:08.744Z] [1;32m     47[0m )
[2024-03-07T16:33:08.744Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:33:08.744Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:33:08.744Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_process_output[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mconvert_objects[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:33:08.744Z] [1;32m     51[0m )
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:71[0m, in [0;36mWPSResult._process_output[0;34m(self, output, convert_objects)[0m
[2024-03-07T16:33:08.744Z] [1;32m     68[0m     [38;5;28;01mreturn[39;00m delist(data)
[2024-03-07T16:33:08.744Z] [1;32m     70[0m [38;5;28;01mif[39;00m convert_objects:
[2024-03-07T16:33:08.744Z] [0;32m---> 71[0m     [38;5;28;01mreturn[39;00m [43mconvert[49m[43m([49m[43moutput[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_path[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_converters[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mauth[49m[38;5;241;43m.[39;49m[43mverify[49m[43m)[49m
[2024-03-07T16:33:08.744Z] [1;32m     72[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:33:08.744Z] [1;32m     73[0m     [38;5;28;01mreturn[39;00m output[38;5;241m.[39mreference
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:376[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:33:08.744Z] [1;32m    374[0m     out [38;5;241m=[39m converter[38;5;241m.[39mconvert()
[2024-03-07T16:33:08.744Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:33:08.744Z] [0;32m--> 376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:33:08.744Z] [1;32m    377[0m     [38;5;28;01mreturn[39;00m out
[2024-03-07T16:33:08.744Z] [1;32m    379[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mImportError[39;00m, [38;5;167;01mNotImplementedError[39;00m):
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:376[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:33:08.744Z] [1;32m    374[0m     out [38;5;241m=[39m converter[38;5;241m.[39mconvert()
[2024-03-07T16:33:08.744Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:33:08.744Z] [0;32m--> 376[0m         out [38;5;241m=[39m [[43mconvert[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mpath[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:33:08.744Z] [1;32m    377[0m     [38;5;28;01mreturn[39;00m out
[2024-03-07T16:33:08.744Z] [1;32m    379[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mImportError[39;00m, [38;5;167;01mNotImplementedError[39;00m):
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:374[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:33:08.744Z] [1;32m    372[0m [38;5;28;01mtry[39;00m:
[2024-03-07T16:33:08.744Z] [1;32m    373[0m     converter [38;5;241m=[39m [38;5;28mcls[39m(output, path[38;5;241m=[39mpath, verify[38;5;241m=[39mverify)
[2024-03-07T16:33:08.744Z] [0;32m--> 374[0m     out [38;5;241m=[39m [43mconverter[49m[38;5;241;43m.[39;49m[43mconvert[49m[43m([49m[43m)[49m
[2024-03-07T16:33:08.744Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:33:08.744Z] [1;32m    376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:266[0m, in [0;36mGeotiffRioxarrayConverter.convert[0;34m(self)[0m
[2024-03-07T16:33:08.744Z] [1;32m    263[0m [38;5;28;01mimport[39;00m [38;5;21;01mxarray[39;00m  [38;5;66;03m# isort: skip[39;00m
[2024-03-07T16:33:08.744Z] [1;32m    264[0m [38;5;28;01mimport[39;00m [38;5;21;01mrioxarray[39;00m  [38;5;66;03m# noqa[39;00m
[2024-03-07T16:33:08.744Z] [0;32m--> 266[0m [38;5;28;01mreturn[39;00m [43mxarray[49m[38;5;241;43m.[39;49m[43mopen_rasterio[49m([38;5;28mself[39m[38;5;241m.[39mfile)
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] [0;31mAttributeError[0m: module 'xarray' has no attribute 'open_rasterio'
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 8 _
[2024-03-07T16:33:08.744Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.744Z] [94mCell 8: Cell execution caused an exception
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] Input:
[2024-03-07T16:33:08.744Z] [0mterrain_resp = wps.terrain_analysis(
[2024-03-07T16:33:08.744Z]     shape=basin_contour, select_all_touching=True, projected_crs=3978
[2024-03-07T16:33:08.744Z] )
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] properties, dem0 = terrain_resp.get(asobj=True)
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] elevation = properties[0]["elevation"]
[2024-03-07T16:33:08.744Z] slope = properties[0]["slope"]
[2024-03-07T16:33:08.744Z] aspect = properties[0]["aspect"]
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] terrain = {"elevation": elevation, "slope": slope, "aspect": aspect}
[2024-03-07T16:33:08.744Z] display(terrain)
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] [94mTraceback:[0m
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.744Z] [0;31mAttributeError[0m                            Traceback (most recent call last)
[2024-03-07T16:33:08.744Z] Cell [0;32mIn[1], line 5[0m
[2024-03-07T16:33:08.744Z] [1;32m      1[0m terrain_resp [38;5;241m=[39m wps[38;5;241m.[39mterrain_analysis(
[2024-03-07T16:33:08.744Z] [1;32m      2[0m     shape[38;5;241m=[39mbasin_contour, select_all_touching[38;5;241m=[39m[38;5;28;01mTrue[39;00m, projected_crs[38;5;241m=[39m[38;5;241m3978[39m
[2024-03-07T16:33:08.744Z] [1;32m      3[0m )
[2024-03-07T16:33:08.744Z] [0;32m----> 5[0m properties, dem0 [38;5;241m=[39m [43mterrain_resp[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43masobj[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[2024-03-07T16:33:08.744Z] [1;32m      7[0m elevation [38;5;241m=[39m properties[[38;5;241m0[39m][[38;5;124m"[39m[38;5;124melevation[39m[38;5;124m"[39m]
[2024-03-07T16:33:08.744Z] [1;32m      8[0m slope [38;5;241m=[39m properties[[38;5;241m0[39m][[38;5;124m"[39m[38;5;124mslope[39m[38;5;124m"[39m]
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.744Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:41[0m, in [0;36mWPSResult.get[0;34m(self, asobj)[0m
[2024-03-07T16:33:08.744Z] [1;32m     38[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39misSucceded():
[2024-03-07T16:33:08.744Z] [1;32m     39[0m     [38;5;66;03m# TODO: add reason for failure[39;00m
[2024-03-07T16:33:08.744Z] [1;32m     40[0m     [38;5;28;01mraise[39;00m ProcessFailed([38;5;124m"[39m[38;5;124mSorry, process failed.[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.744Z] [0;32m---> 41[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_output[49m[43m([49m[43masobj[49m[43m)[49m
[2024-03-07T16:33:08.744Z] 
[2024-03-07T16:33:08.745Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36mWPSResult._make_output[0;34m(self, convert_objects)[0m
[2024-03-07T16:33:08.745Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:33:08.745Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:33:08.745Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:33:08.745Z] [1;32m     47[0m )
[2024-03-07T16:33:08.745Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:33:08.745Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:33:08.745Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28mself[39m[38;5;241m.[39m_process_output(o, convert_objects) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:33:08.745Z] [1;32m     51[0m )
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:50[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[2024-03-07T16:33:08.745Z] [1;32m     44[0m Output [38;5;241m=[39m namedtuple(
[2024-03-07T16:33:08.745Z] [1;32m     45[0m     sanitize([38;5;28mself[39m[38;5;241m.[39mprocess[38;5;241m.[39midentifier) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mResponse[39m[38;5;124m"[39m,
[2024-03-07T16:33:08.745Z] [1;32m     46[0m     [sanitize(o[38;5;241m.[39midentifier) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs],
[2024-03-07T16:33:08.745Z] [1;32m     47[0m )
[2024-03-07T16:33:08.745Z] [1;32m     48[0m Output[38;5;241m.[39m[38;5;21m__repr__[39m [38;5;241m=[39m utils[38;5;241m.[39mpretty_repr
[2024-03-07T16:33:08.745Z] [1;32m     49[0m [38;5;28;01mreturn[39;00m Output(
[2024-03-07T16:33:08.745Z] [0;32m---> 50[0m     [38;5;241m*[39m[[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_process_output[49m[43m([49m[43mo[49m[43m,[49m[43m [49m[43mconvert_objects[49m[43m)[49m [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocessOutputs]
[2024-03-07T16:33:08.745Z] [1;32m     51[0m )
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/outputs.py:71[0m, in [0;36mWPSResult._process_output[0;34m(self, output, convert_objects)[0m
[2024-03-07T16:33:08.745Z] [1;32m     68[0m     [38;5;28;01mreturn[39;00m delist(data)
[2024-03-07T16:33:08.745Z] [1;32m     70[0m [38;5;28;01mif[39;00m convert_objects:
[2024-03-07T16:33:08.745Z] [0;32m---> 71[0m     [38;5;28;01mreturn[39;00m [43mconvert[49m[43m([49m[43moutput[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_path[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_converters[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mauth[49m[38;5;241;43m.[39;49m[43mverify[49m[43m)[49m
[2024-03-07T16:33:08.745Z] [1;32m     72[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:33:08.745Z] [1;32m     73[0m     [38;5;28;01mreturn[39;00m output[38;5;241m.[39mreference
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:374[0m, in [0;36mconvert[0;34m(output, path, converters, verify)[0m
[2024-03-07T16:33:08.745Z] [1;32m    372[0m [38;5;28;01mtry[39;00m:
[2024-03-07T16:33:08.745Z] [1;32m    373[0m     converter [38;5;241m=[39m [38;5;28mcls[39m(output, path[38;5;241m=[39mpath, verify[38;5;241m=[39mverify)
[2024-03-07T16:33:08.745Z] [0;32m--> 374[0m     out [38;5;241m=[39m [43mconverter[49m[38;5;241;43m.[39;49m[43mconvert[49m[43m([49m[43m)[49m
[2024-03-07T16:33:08.745Z] [1;32m    375[0m     [38;5;28;01mif[39;00m converter[38;5;241m.[39mnested:  [38;5;66;03m# Then the output is a list of files.[39;00m
[2024-03-07T16:33:08.745Z] [1;32m    376[0m         out [38;5;241m=[39m [convert(o, path) [38;5;28;01mfor[39;00m o [38;5;129;01min[39;00m out]
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/birdy/client/converters.py:266[0m, in [0;36mGeotiffRioxarrayConverter.convert[0;34m(self)[0m
[2024-03-07T16:33:08.745Z] [1;32m    263[0m [38;5;28;01mimport[39;00m [38;5;21;01mxarray[39;00m  [38;5;66;03m# isort: skip[39;00m
[2024-03-07T16:33:08.745Z] [1;32m    264[0m [38;5;28;01mimport[39;00m [38;5;21;01mrioxarray[39;00m  [38;5;66;03m# noqa[39;00m
[2024-03-07T16:33:08.745Z] [0;32m--> 266[0m [38;5;28;01mreturn[39;00m [43mxarray[49m[38;5;241;43m.[39;49m[43mopen_rasterio[49m([38;5;28mself[39m[38;5;241m.[39mfile)
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] [0;31mAttributeError[0m: module 'xarray' has no attribute 'open_rasterio'
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 9 _
[2024-03-07T16:33:08.745Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.745Z] [94mCell 9: Cell execution caused an exception
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] Input:
[2024-03-07T16:33:08.745Z] [0mall_properties = {**shape_info, **land_use, **terrain}
[2024-03-07T16:33:08.745Z] display(all_properties)
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] [94mTraceback:[0m
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.745Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.745Z] Cell [0;32mIn[1], line 1[0m
[2024-03-07T16:33:08.745Z] [0;32m----> 1[0m all_properties [38;5;241m=[39m {[38;5;241m*[39m[38;5;241m*[39mshape_info, [38;5;241m*[39m[38;5;241m*[39m[43mland_use[49m, [38;5;241m*[39m[38;5;241m*[39mterrain}
[2024-03-07T16:33:08.745Z] [1;32m      2[0m display(all_properties)
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] [0;31mNameError[0m: name 'land_use' is not defined
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 10 _
[2024-03-07T16:33:08.745Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.745Z] [94mCell 10: Cell execution caused an exception
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] Input:
[2024-03-07T16:33:08.745Z] [0m# Get the ERA5 data from the Wasabi/Amazon S3 server.
[2024-03-07T16:33:08.745Z] catalog_name = "https://raw.githubusercontent.com/hydrocloudservices/catalogs/main/catalogs/atmosphere.yaml"
[2024-03-07T16:33:08.745Z] cat = intake.open_catalog(catalog_name)
[2024-03-07T16:33:08.745Z] ds = cat.era5_reanalysis_single_levels.to_dask()
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z] """
[2024-03-07T16:33:08.745Z] Get the ERA5 data. We will rechunk it to a single chunck to make it compatible with other codes on the platform,
[2024-03-07T16:33:08.745Z] especially bias-correction. We are also taking the daily min and max temperatures as well as the daily total
[2024-03-07T16:33:08.745Z] precipitation.
[2024-03-07T16:33:08.745Z] """
[2024-03-07T16:33:08.745Z] # We will add a wrapper to ensure that the following operations will preserve the original data attributes,
[2024-03-07T16:33:08.745Z] # such as units and variable names.
[2024-03-07T16:33:08.745Z] with xr.set_options(keep_attrs=True):
[2024-03-07T16:33:08.745Z]     ERA5_reference = subset.subset_shape(
[2024-03-07T16:33:08.745Z]         ds.sel(time=slice(reference_start_day, reference_end_day)), basin_contour
[2024-03-07T16:33:08.745Z]     )
[2024-03-07T16:33:08.745Z]     ERA5_tmin = ERA5_reference["t2m"].resample(time="1D").min().chunk(-1, -1, -1)
[2024-03-07T16:33:08.745Z]     ERA5_tmax = ERA5_reference["t2m"].resample(time="1D").max().chunk(-1, -1, -1)
[2024-03-07T16:33:08.745Z]     ERA5_pr = ERA5_reference["tp"].resample(time="1D").sum().chunk(-1, -1, -1)
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z]     # Change the units
[2024-03-07T16:33:08.745Z]     ERA5_tmin = ERA5_tmin - 273.15  # K to ��C
[2024-03-07T16:33:08.745Z]     ERA5_tmin.attrs["units"] = "degC"
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z]     ERA5_tmax = ERA5_tmax - 273.15  # K to ��C
[2024-03-07T16:33:08.745Z]     ERA5_tmax.attrs["units"] = "degC"
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z]     ERA5_pr = ERA5_pr * 1000  # m to mm
[2024-03-07T16:33:08.745Z]     ERA5_pr.attrs["units"] = "mm"
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z]     # Average the variables spatially
[2024-03-07T16:33:08.745Z]     ERA5_tmin = ERA5_tmin.mean({"latitude", "longitude"})
[2024-03-07T16:33:08.745Z]     ERA5_tmax = ERA5_tmax.mean({"latitude", "longitude"})
[2024-03-07T16:33:08.745Z]     ERA5_pr = ERA5_pr.mean({"latitude", "longitude"})
[2024-03-07T16:33:08.745Z] 
[2024-03-07T16:33:08.745Z]     # Ensure that the precipitation is non-negative, which can happen with some reanalysis models.
[2024-03-07T16:33:08.746Z]     ERA5_pr[ERA5_pr < 0] = 0
[2024-03-07T16:33:08.746Z] 
[2024-03-07T16:33:08.746Z]     # Transform them to a dataset such that they can be written with attributes to netcdf
[2024-03-07T16:33:08.746Z]     ERA5_tmin = ERA5_tmin.to_dataset(name="tmin", promote_attrs=True)
[2024-03-07T16:33:08.746Z]     ERA5_tmax = ERA5_tmax.to_dataset(name="tmax", promote_attrs=True)
[2024-03-07T16:33:08.746Z]     ERA5_pr = ERA5_pr.to_dataset(name="pr", promote_attrs=True)
[2024-03-07T16:33:08.746Z] 
[2024-03-07T16:33:08.746Z]     # Write to disk. Here is where we write to disk and where the notebook will fail if running it from the
[2024-03-07T16:33:08.746Z]     # original location on the server (which is read-only). Please move the notebooks to your writable-workspace.
[2024-03-07T16:33:08.746Z]     ERA5_weather = xr.merge([ERA5_tmin, ERA5_tmax, ERA5_pr])
[2024-03-07T16:33:08.746Z]     ERA5_weather.to_netcdf(tmp / "ERA5_meteo_data.nc")
[2024-03-07T16:33:08.746Z] 
[2024-03-07T16:33:08.746Z] [94mTraceback:[0m
[2024-03-07T16:33:08.746Z] 
[2024-03-07T16:33:08.746Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.746Z] [0;31mKeyError[0m                                  Traceback (most recent call last)
[2024-03-07T16:33:08.746Z] Cell [0;32mIn[1], line 37[0m
[2024-03-07T16:33:08.746Z] [1;32m     34[0m ERA5_pr [38;5;241m=[39m ERA5_pr[38;5;241m.[39mmean({[38;5;124m"[39m[38;5;124mlatitude[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mlongitude[39m[38;5;124m"[39m})
[2024-03-07T16:33:08.746Z] [1;32m     36[0m [38;5;66;03m# Ensure that the precipitation is non-negative, which can happen with some reanalysis models.[39;00m
[2024-03-07T16:33:08.746Z] [0;32m---> 37[0m [43mERA5_pr[49m[43m[[49m[43mERA5_pr[49m[43m [49m[38;5;241;43m<[39;49m[43m [49m[38;5;241;43m0[39;49m[43m][49m [38;5;241m=[39m [38;5;241m0[39m
[2024-03-07T16:33:08.746Z] [1;32m     39[0m [38;5;66;03m# Transform them to a dataset such that they can be written with attributes to netcdf[39;00m
[2024-03-07T16:33:08.746Z] [1;32m     40[0m ERA5_tmin [38;5;241m=[39m ERA5_tmin[38;5;241m.[39mto_dataset(name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtmin[39m[38;5;124m"[39m, promote_attrs[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[2024-03-07T16:33:08.746Z] 
[2024-03-07T16:33:08.746Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:856[0m, in [0;36mDataArray.__setitem__[0;34m(self, key, value)[0m
[2024-03-07T16:33:08.746Z] [1;32m    851[0m     [38;5;28mself[39m[38;5;241m.[39mcoords[key] [38;5;241m=[39m value
[2024-03-07T16:33:08.746Z] [1;32m    852[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:33:08.746Z] [1;32m    853[0m     [38;5;66;03m# Coordinates in key, value and self[key] should be consistent.[39;00m
[2024-03-07T16:33:08.746Z] [1;32m    854[0m     [38;5;66;03m# TODO Coordinate consistency in key is checked here, but it[39;00m
[2024-03-07T16:33:08.746Z] [1;32m    855[0m     [38;5;66;03m# causes unnecessary indexing. It should be optimized.[39;00m
[2024-03-07T16:33:08.746Z] [0;32m--> 856[0m     obj [38;5;241m=[39m [38;5;28;43mself[39;49m[43m[[49m[43mkey[49m[43m][49m
[2024-03-07T16:33:08.746Z] [1;32m    857[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(value, DataArray):
[2024-03-07T16:33:08.746Z] [1;32m    858[0m         assert_coordinate_consistent(value, obj[38;5;241m.[39mcoords[38;5;241m.[39mvariables)
[2024-03-07T16:33:08.746Z] 
[2024-03-07T16:33:08.746Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:847[0m, in [0;36mDataArray.__getitem__[0;34m(self, key)[0m
[2024-03-07T16:33:08.746Z] [1;32m    844[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_getitem_coord(key)
[2024-03-07T16:33:08.746Z] [1;32m    845[0m [38;5;28;01melse[39;00m:
[2024-03-07T16:33:08.746Z] [1;32m    846[0m     [38;5;66;03m# xarray-style array indexing[39;00m
[2024-03-07T16:33:08.746Z] [0;32m--> 847[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43misel[49m[43m([49m[43mindexers[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_item_key_to_dict[49m[43m([49m[43mkey[49m[43m)[49m[43m)[49m
[2024-03-07T16:33:08.746Z] 
[2024-03-07T16:33:08.746Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataarray.py:1445[0m, in [0;36mDataArray.isel[0;34m(self, indexers, drop, missing_dims, **indexers_kwargs)[0m
[2024-03-07T16:33:08.746Z] [1;32m   1442[0m indexers [38;5;241m=[39m either_dict_or_kwargs(indexers, indexers_kwargs, [38;5;124m"[39m[38;5;124misel[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.746Z] [1;32m   1444[0m [38;5;28;01mif[39;00m [38;5;28many[39m(is_fancy_indexer(idx) [38;5;28;01mfor[39;00m idx [38;5;129;01min[39;00m indexers[38;5;241m.[39mvalues()):
[2024-03-07T16:33:08.746Z] [0;32m-> 1445[0m     ds [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_to_temp_dataset[49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43m_isel_fancy[49m[43m([49m
[2024-03-07T16:33:08.746Z] [1;32m   1446[0m [43m        [49m[43mindexers[49m[43m,[49m[43m [49m[43mdrop[49m[38;5;241;43m=[39;49m[43mdrop[49m[43m,[49m[43m [49m[43mmissing_dims[49m[38;5;241;43m=[39;49m[43mmissing_dims[49m
[2024-03-07T16:33:08.746Z] [1;32m   1447[0m [43m    [49m[43m)[49m
[2024-03-07T16:33:08.746Z] [1;32m   1448[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_from_temp_dataset(ds)
[2024-03-07T16:33:08.746Z] [1;32m   1450[0m [38;5;66;03m# Much faster algorithm for when all indexers are ints, slices, one-dimensional[39;00m
[2024-03-07T16:33:08.746Z] [1;32m   1451[0m [38;5;66;03m# lists, or zero or one-dimensional np.ndarray's[39;00m
[2024-03-07T16:33:08.746Z] 
[2024-03-07T16:33:08.746Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/dataset.py:2930[0m, in [0;36mDataset._isel_fancy[0;34m(self, indexers, drop, missing_dims)[0m
[2024-03-07T16:33:08.746Z] [1;32m   2926[0m var_indexers [38;5;241m=[39m {
[2024-03-07T16:33:08.746Z] [1;32m   2927[0m     k: v [38;5;28;01mfor[39;00m k, v [38;5;129;01min[39;00m valid_indexers[38;5;241m.[39mitems() [38;5;28;01mif[39;00m k [38;5;129;01min[39;00m var[38;5;241m.[39mdims
[2024-03-07T16:33:08.746Z] [1;32m   2928[0m }
[2024-03-07T16:33:08.746Z] [1;32m   2929[0m [38;5;28;01mif[39;00m var_indexers:
[2024-03-07T16:33:08.746Z] [0;32m-> 2930[0m     new_var [38;5;241m=[39m [43mvar[49m[38;5;241;43m.[39;49m[43misel[49m[43m([49m[43mindexers[49m[38;5;241;43m=[39;49m[43mvar_indexers[49m[43m)[49m
[2024-03-07T16:33:08.746Z] [1;32m   2931[0m     [38;5;66;03m# drop scalar coordinates[39;00m
[2024-03-07T16:33:08.746Z] [1;32m   2932[0m     [38;5;66;03m# https://github.com/pydata/xarray/issues/6554[39;00m
[2024-03-07T16:33:08.746Z] [1;32m   2933[0m     [38;5;28;01mif[39;00m name [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mcoords [38;5;129;01mand[39;00m drop [38;5;129;01mand[39;00m new_var[38;5;241m.[39mndim [38;5;241m==[39m [38;5;241m0[39m:
[2024-03-07T16:33:08.746Z] 
[2024-03-07T16:33:08.746Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:1368[0m, in [0;36mVariable.isel[0;34m(self, indexers, missing_dims, **indexers_kwargs)[0m
[2024-03-07T16:33:08.746Z] [1;32m   1365[0m indexers [38;5;241m=[39m drop_dims_from_indexers(indexers, [38;5;28mself[39m[38;5;241m.[39mdims, missing_dims)
[2024-03-07T16:33:08.746Z] [1;32m   1367[0m key [38;5;241m=[39m [38;5;28mtuple[39m(indexers[38;5;241m.[39mget(dim, [38;5;28mslice[39m([38;5;28;01mNone[39;00m)) [38;5;28;01mfor[39;00m dim [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mdims)
[2024-03-07T16:33:08.746Z] [0;32m-> 1368[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m[[49m[43mkey[49m[43m][49m
[2024-03-07T16:33:08.746Z] 
[2024-03-07T16:33:08.746Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:891[0m, in [0;36mVariable.__getitem__[0;34m(self, key)[0m
[2024-03-07T16:33:08.746Z] [1;32m    878[0m [38;5;28;01mdef[39;00m [38;5;21m__getitem__[39m([38;5;28mself[39m: T_Variable, key) [38;5;241m-[39m[38;5;241m>[39m T_Variable:
[2024-03-07T16:33:08.747Z] [1;32m    879[0m [38;5;250m    [39m[38;5;124;03m"""Return a new Variable object whose contents are consistent with[39;00m
[2024-03-07T16:33:08.747Z] [1;32m    880[0m [38;5;124;03m    getting the provided key from the underlying data.[39;00m
[2024-03-07T16:33:08.747Z] [1;32m    881[0m 
[2024-03-07T16:33:08.747Z] [0;32m   (...)[0m
[2024-03-07T16:33:08.747Z] [1;32m    889[0m [38;5;124;03m    array `x.values` directly.[39;00m
[2024-03-07T16:33:08.747Z] [1;32m    890[0m [38;5;124;03m    """[39;00m
[2024-03-07T16:33:08.747Z] [0;32m--> 891[0m     dims, indexer, new_order [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_broadcast_indexes[49m[43m([49m[43mkey[49m[43m)[49m
[2024-03-07T16:33:08.747Z] [1;32m    892[0m     data [38;5;241m=[39m as_indexable([38;5;28mself[39m[38;5;241m.[39m_data)[indexer]
[2024-03-07T16:33:08.747Z] [1;32m    893[0m     [38;5;28;01mif[39;00m new_order:
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:724[0m, in [0;36mVariable._broadcast_indexes[0;34m(self, key)[0m
[2024-03-07T16:33:08.747Z] [1;32m    721[0m [38;5;28;01mif[39;00m [38;5;28mall[39m([38;5;28misinstance[39m(k, BASIC_INDEXING_TYPES) [38;5;28;01mfor[39;00m k [38;5;129;01min[39;00m key):
[2024-03-07T16:33:08.747Z] [1;32m    722[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_broadcast_indexes_basic(key)
[2024-03-07T16:33:08.747Z] [0;32m--> 724[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_indexers[49m[43m([49m[43mkey[49m[43m)[49m
[2024-03-07T16:33:08.747Z] [1;32m    725[0m [38;5;66;03m# Detect it can be mapped as an outer indexer[39;00m
[2024-03-07T16:33:08.747Z] [1;32m    726[0m [38;5;66;03m# If all key is unlabeled, or[39;00m
[2024-03-07T16:33:08.747Z] [1;32m    727[0m [38;5;66;03m# key can be mapped as an OuterIndexer.[39;00m
[2024-03-07T16:33:08.747Z] [1;32m    728[0m [38;5;28;01mif[39;00m [38;5;28mall[39m([38;5;129;01mnot[39;00m [38;5;28misinstance[39m(k, Variable) [38;5;28;01mfor[39;00m k [38;5;129;01min[39;00m key):
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xarray/core/variable.py:776[0m, in [0;36mVariable._validate_indexers[0;34m(self, key)[0m
[2024-03-07T16:33:08.747Z] [1;32m    771[0m     [38;5;28;01mraise[39;00m [38;5;167;01mIndexError[39;00m(
[2024-03-07T16:33:08.747Z] [1;32m    772[0m         [38;5;124m"[39m[38;5;132;01m{}[39;00m[38;5;124m-dimensional boolean indexing is [39m[38;5;124m"[39m
[2024-03-07T16:33:08.747Z] [1;32m    773[0m         [38;5;124m"[39m[38;5;124mnot supported. [39m[38;5;124m"[39m[38;5;241m.[39mformat(k[38;5;241m.[39mndim)
[2024-03-07T16:33:08.747Z] [1;32m    774[0m     )
[2024-03-07T16:33:08.747Z] [1;32m    775[0m [38;5;28;01mif[39;00m is_duck_dask_array(k[38;5;241m.[39mdata):
[2024-03-07T16:33:08.747Z] [0;32m--> 776[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(
[2024-03-07T16:33:08.747Z] [1;32m    777[0m         [38;5;124m"[39m[38;5;124mIndexing with a boolean dask array is not allowed. [39m[38;5;124m"[39m
[2024-03-07T16:33:08.747Z] [1;32m    778[0m         [38;5;124m"[39m[38;5;124mThis will result in a dask array of unknown shape. [39m[38;5;124m"[39m
[2024-03-07T16:33:08.747Z] [1;32m    779[0m         [38;5;124m"[39m[38;5;124mSuch arrays are unsupported by Xarray.[39m[38;5;124m"[39m
[2024-03-07T16:33:08.747Z] [1;32m    780[0m         [38;5;124m"[39m[38;5;124mPlease compute the indexer first using .compute()[39m[38;5;124m"[39m
[2024-03-07T16:33:08.747Z] [1;32m    781[0m     )
[2024-03-07T16:33:08.747Z] [1;32m    782[0m [38;5;28;01mif[39;00m [38;5;28mgetattr[39m(k, [38;5;124m"[39m[38;5;124mdims[39m[38;5;124m"[39m, (dim,)) [38;5;241m!=[39m (dim,):
[2024-03-07T16:33:08.747Z] [1;32m    783[0m     [38;5;28;01mraise[39;00m [38;5;167;01mIndexError[39;00m(
[2024-03-07T16:33:08.747Z] [1;32m    784[0m         [38;5;124m"[39m[38;5;124mBoolean indexer should be unlabeled or on the [39m[38;5;124m"[39m
[2024-03-07T16:33:08.747Z] [1;32m    785[0m         [38;5;124m"[39m[38;5;124msame dimension to the indexed array. Indexer is [39m[38;5;124m"[39m
[2024-03-07T16:33:08.747Z] [0;32m   (...)[0m
[2024-03-07T16:33:08.747Z] [1;32m    788[0m         )
[2024-03-07T16:33:08.747Z] [1;32m    789[0m     )
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z] [0;31mKeyError[0m: 'Indexing with a boolean dask array is not allowed. This will result in a dask array of unknown shape. Such arrays are unsupported by Xarray.Please compute the indexer first using .compute()'
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 11 _
[2024-03-07T16:33:08.747Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.747Z] [94mCell 11: Cell execution caused an exception
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z] Input:
[2024-03-07T16:33:08.747Z] [0m# Climate model to use
[2024-03-07T16:33:08.747Z] climate_model = "MIROC6"
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z] # Get the catalog info from the pangeo dataset, which basically is a list of links to the various products.
[2024-03-07T16:33:08.747Z] fsCMIP = gcsfs.GCSFileSystem(token="anon", access="read_only")
[2024-03-07T16:33:08.747Z] col = intake.open_esm_datastore(
[2024-03-07T16:33:08.747Z]     "https://storage.googleapis.com/cmip6/pangeo-cmip6.json"
[2024-03-07T16:33:08.747Z] )
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z] # We will add a wrapper to ensure that the following operations will preserve the original data attributes, such as units and variable names.
[2024-03-07T16:33:08.747Z] with xr.set_options(keep_attrs=True):
[2024-03-07T16:33:08.747Z]     # Load the files from the PanGEO catalogs, for reference and future variables of temperature and precipitation.
[2024-03-07T16:33:08.747Z]     out = {}
[2024-03-07T16:33:08.747Z]     for exp in ["historical", "ssp585"]:
[2024-03-07T16:33:08.747Z]         if exp == "historical":
[2024-03-07T16:33:08.747Z]             period_start = reference_start_day
[2024-03-07T16:33:08.747Z]             period_end = reference_end_day
[2024-03-07T16:33:08.747Z]         else:
[2024-03-07T16:33:08.747Z]             period_start = future_start_day
[2024-03-07T16:33:08.747Z]             period_end = future_end_day
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z]         out[exp] = {}
[2024-03-07T16:33:08.747Z]         for variable in ["tasmin", "tasmax", "pr"]:
[2024-03-07T16:33:08.747Z]             print(exp, variable)
[2024-03-07T16:33:08.747Z]             query = dict(
[2024-03-07T16:33:08.747Z]                 experiment_id=exp,
[2024-03-07T16:33:08.747Z]                 table_id="day",
[2024-03-07T16:33:08.747Z]                 variable_id=variable,
[2024-03-07T16:33:08.747Z]                 member_id="r1i1p1f1",
[2024-03-07T16:33:08.747Z]                 source_id=climate_model,
[2024-03-07T16:33:08.747Z]             )
[2024-03-07T16:33:08.747Z]             col_subset = col.search(require_all_on=["source_id"], **query)
[2024-03-07T16:33:08.747Z]             mapper = fsCMIP.get_mapper(col_subset.df.zstore[0])
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z]             # special case for precipitation, which does not have the "height" variable that we need to discard as for tasmax and tasmin.
[2024-03-07T16:33:08.747Z]             if variable == "pr":
[2024-03-07T16:33:08.747Z]                 out[exp][variable] = average.average_shape(
[2024-03-07T16:33:08.747Z]                     xr.open_zarr(mapper, consolidated=True).sel(
[2024-03-07T16:33:08.747Z]                         time=slice(period_start, period_end)
[2024-03-07T16:33:08.747Z]                     )[variable],
[2024-03-07T16:33:08.747Z]                     basin_contour,
[2024-03-07T16:33:08.747Z]                 ).chunk(-1)
[2024-03-07T16:33:08.747Z]             else:
[2024-03-07T16:33:08.747Z]                 out[exp][variable] = average.average_shape(
[2024-03-07T16:33:08.747Z]                     xr.open_zarr(mapper, consolidated=True)
[2024-03-07T16:33:08.747Z]                     .sel(time=slice(period_start, period_end))
[2024-03-07T16:33:08.747Z]                     .reset_coords("height", drop=True)[variable],
[2024-03-07T16:33:08.747Z]                     basin_contour,
[2024-03-07T16:33:08.747Z]                 ).chunk(-1)
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z] # We can now extract the variables that we will need later:
[2024-03-07T16:33:08.747Z] historical_tasmax = out["historical"]["tasmax"]
[2024-03-07T16:33:08.747Z] historical_tasmin = out["historical"]["tasmin"]
[2024-03-07T16:33:08.747Z] historical_pr = out["historical"]["pr"]
[2024-03-07T16:33:08.747Z] future_tasmax = out["ssp585"]["tasmax"]
[2024-03-07T16:33:08.747Z] future_tasmin = out["ssp585"]["tasmin"]
[2024-03-07T16:33:08.747Z] future_pr = out["ssp585"]["pr"]
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z] [94mTraceback:[0m
[2024-03-07T16:33:08.747Z] 
[2024-03-07T16:33:08.747Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.747Z] [0;31mKeyError[0m                                  Traceback (most recent call last)
[2024-03-07T16:33:08.747Z] Cell [0;32mIn[1], line 44[0m
[2024-03-07T16:33:08.747Z] [1;32m     37[0m                 out[exp][variable] [38;5;241m=[39m average[38;5;241m.[39maverage_shape(
[2024-03-07T16:33:08.748Z] [1;32m     38[0m                     xr[38;5;241m.[39mopen_zarr(mapper, consolidated[38;5;241m=[39m[38;5;28;01mTrue[39;00m)[38;5;241m.[39msel(
[2024-03-07T16:33:08.748Z] [1;32m     39[0m                         time[38;5;241m=[39m[38;5;28mslice[39m(period_start, period_end)
[2024-03-07T16:33:08.748Z] [1;32m     40[0m                     )[variable],
[2024-03-07T16:33:08.748Z] [1;32m     41[0m                     basin_contour,
[2024-03-07T16:33:08.748Z] [1;32m     42[0m                 )[38;5;241m.[39mchunk([38;5;241m-[39m[38;5;241m1[39m)
[2024-03-07T16:33:08.748Z] [1;32m     43[0m             [38;5;28;01melse[39;00m:
[2024-03-07T16:33:08.748Z] [0;32m---> 44[0m                 out[exp][variable] [38;5;241m=[39m [43maverage[49m[38;5;241;43m.[39;49m[43maverage_shape[49m[43m([49m
[2024-03-07T16:33:08.748Z] [1;32m     45[0m [43m                    [49m[43mxr[49m[38;5;241;43m.[39;49m[43mopen_zarr[49m[43m([49m[43mmapper[49m[43m,[49m[43m [49m[43mconsolidated[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[2024-03-07T16:33:08.748Z] [1;32m     46[0m [43m                    [49m[38;5;241;43m.[39;49m[43msel[49m[43m([49m[43mtime[49m[38;5;241;43m=[39;49m[38;5;28;43mslice[39;49m[43m([49m[43mperiod_start[49m[43m,[49m[43m [49m[43mperiod_end[49m[43m)[49m[43m)[49m
[2024-03-07T16:33:08.748Z] [1;32m     47[0m [43m                    [49m[38;5;241;43m.[39;49m[43mreset_coords[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mheight[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mdrop[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m[43m[[49m[43mvariable[49m[43m][49m[43m,[49m
[2024-03-07T16:33:08.748Z] [1;32m     48[0m [43m                    [49m[43mbasin_contour[49m[43m,[49m
[2024-03-07T16:33:08.748Z] [1;32m     49[0m [43m                [49m[43m)[49m[38;5;241m.[39mchunk([38;5;241m-[39m[38;5;241m1[39m)
[2024-03-07T16:33:08.748Z] [1;32m     51[0m [38;5;66;03m# We can now extract the variables that we will need later:[39;00m
[2024-03-07T16:33:08.748Z] [1;32m     52[0m historical_tasmax [38;5;241m=[39m out[[38;5;124m"[39m[38;5;124mhistorical[39m[38;5;124m"[39m][[38;5;124m"[39m[38;5;124mtasmax[39m[38;5;124m"[39m]
[2024-03-07T16:33:08.748Z] 
[2024-03-07T16:33:08.748Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/clisops/core/average.py:108[0m, in [0;36maverage_shape[0;34m(ds, shape, variable)[0m
[2024-03-07T16:33:08.748Z] [1;32m    105[0m ds_sub [38;5;241m=[39m ds_copy[38;5;241m.[39misel(indexer)
[2024-03-07T16:33:08.748Z] [1;32m    107[0m [38;5;66;03m# Compute the weights[39;00m
[2024-03-07T16:33:08.748Z] [0;32m--> 108[0m savger [38;5;241m=[39m [43mSpatialAverager[49m[43m([49m[43mds_sub[49m[43m,[49m[43m [49m[43mpoly[49m[38;5;241;43m.[39;49m[43mgeometry[49m[43m)[49m
[2024-03-07T16:33:08.748Z] [1;32m    110[0m [38;5;66;03m# Check that some weights are not null. Handle both sparse and scipy weights.[39;00m
[2024-03-07T16:33:08.748Z] [1;32m    111[0m nonnull [38;5;241m=[39m (
[2024-03-07T16:33:08.748Z] [1;32m    112[0m     savger[38;5;241m.[39mweights[38;5;241m.[39mdata[38;5;241m.[39mnnz
[2024-03-07T16:33:08.748Z] [1;32m    113[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(savger[38;5;241m.[39mweights, xr[38;5;241m.[39mDataArray)
[2024-03-07T16:33:08.748Z] [1;32m    114[0m     [38;5;28;01melse[39;00m savger[38;5;241m.[39mweights[38;5;241m.[39mnnz
[2024-03-07T16:33:08.748Z] [1;32m    115[0m )
[2024-03-07T16:33:08.748Z] 
[2024-03-07T16:33:08.748Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xesmf/frontend.py:1185[0m, in [0;36mSpatialAverager.__init__[0;34m(self, ds_in, polys, ignore_holes, periodic, filename, reuse_weights, weights, ignore_degenerate, geom_dim_name)[0m
[2024-03-07T16:33:08.748Z] [1;32m   1182[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(ds_in, xr[38;5;241m.[39mDataArray):
[2024-03-07T16:33:08.748Z] [1;32m   1183[0m     ds_in [38;5;241m=[39m ds_in[38;5;241m.[39m_to_temp_dataset()
[2024-03-07T16:33:08.748Z] [0;32m-> 1185[0m grid_in, shape_in, input_dims [38;5;241m=[39m [43mds_to_ESMFgrid[49m[43m([49m[43mds_in[49m[43m,[49m[43m [49m[43mneed_bounds[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43mperiodic[49m[38;5;241;43m=[39;49m[43mperiodic[49m[43m)[49m
[2024-03-07T16:33:08.748Z] [1;32m   1187[0m [38;5;66;03m# Create an output locstream so that the regridder knows the output shape and coords.[39;00m
[2024-03-07T16:33:08.748Z] [1;32m   1188[0m [38;5;66;03m# Latitude and longitude coordinates are the polygon centroid.[39;00m
[2024-03-07T16:33:08.748Z] [1;32m   1189[0m lon_out, lat_out [38;5;241m=[39m _get_lon_lat(ds_in)
[2024-03-07T16:33:08.748Z] 
[2024-03-07T16:33:08.748Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xesmf/frontend.py:167[0m, in [0;36mds_to_ESMFgrid[0;34m(ds, need_bounds, periodic, append)[0m
[2024-03-07T16:33:08.748Z] [1;32m    164[0m     grid [38;5;241m=[39m Grid[38;5;241m.[39mfrom_xarray(lon[38;5;241m.[39mT, lat[38;5;241m.[39mT, periodic[38;5;241m=[39mperiodic, mask[38;5;241m=[39m[38;5;28;01mNone[39;00m)
[2024-03-07T16:33:08.748Z] [1;32m    166[0m [38;5;28;01mif[39;00m need_bounds:
[2024-03-07T16:33:08.748Z] [0;32m--> 167[0m     lon_b, lat_b [38;5;241m=[39m [43m_get_lon_lat_bounds[49m[43m([49m[43mds[49m[43m)[49m
[2024-03-07T16:33:08.748Z] [1;32m    168[0m     lon_b, lat_b [38;5;241m=[39m as_2d_mesh(np[38;5;241m.[39masarray(lon_b), np[38;5;241m.[39masarray(lat_b))
[2024-03-07T16:33:08.748Z] [1;32m    169[0m     add_corner(grid, lon_b[38;5;241m.[39mT, lat_b[38;5;241m.[39mT)
[2024-03-07T16:33:08.748Z] 
[2024-03-07T16:33:08.748Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/xesmf/frontend.py:109[0m, in [0;36m_get_lon_lat_bounds[0;34m(ds)[0m
[2024-03-07T16:33:08.748Z] [1;32m    105[0m     lat_bnds [38;5;241m=[39m ds[38;5;241m.[39mcf[38;5;241m.[39mget_bounds([38;5;124m'[39m[38;5;124mlatitude[39m[38;5;124m'[39m)
[2024-03-07T16:33:08.748Z] [1;32m    107[0m [38;5;66;03m# Convert from CF bounds to xESMF bounds.[39;00m
[2024-03-07T16:33:08.748Z] [1;32m    108[0m [38;5;66;03m# order=None is because we don't want to assume the dimension order for 2D bounds.[39;00m
[2024-03-07T16:33:08.748Z] [0;32m--> 109[0m lon_b [38;5;241m=[39m cfxr[38;5;241m.[39mbounds_to_vertices(lon_bnds, [43mds[49m[38;5;241;43m.[39;49m[43mcf[49m[38;5;241;43m.[39;49m[43mget_bounds_dim_name[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mlongitude[39;49m[38;5;124;43m'[39;49m[43m)[49m, order[38;5;241m=[39m[38;5;28;01mNone[39;00m)
[2024-03-07T16:33:08.748Z] [1;32m    110[0m lat_b [38;5;241m=[39m cfxr[38;5;241m.[39mbounds_to_vertices(lat_bnds, ds[38;5;241m.[39mcf[38;5;241m.[39mget_bounds_dim_name([38;5;124m'[39m[38;5;124mlatitude[39m[38;5;124m'[39m), order[38;5;241m=[39m[38;5;28;01mNone[39;00m)
[2024-03-07T16:33:08.748Z] [1;32m    111[0m [38;5;28;01mreturn[39;00m lon_b, lat_b
[2024-03-07T16:33:08.748Z] 
[2024-03-07T16:33:08.748Z] File [0;32m/opt/conda/envs/birdy/lib/python3.10/site-packages/cf_xarray/accessor.py:2404[0m, in [0;36mCFDatasetAccessor.get_bounds_dim_name[0;34m(self, key)[0m
[2024-03-07T16:33:08.748Z] [1;32m   2400[0m filtered [38;5;241m=[39m [
[2024-03-07T16:33:08.748Z] [1;32m   2401[0m     crd_name [38;5;28;01mfor[39;00m crd_name [38;5;129;01min[39;00m crd_names [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mbounds[39m[38;5;124m"[39m [38;5;129;01min[39;00m variables[crd_name][38;5;241m.[39mattrs
[2024-03-07T16:33:08.748Z] [1;32m   2402[0m ]
[2024-03-07T16:33:08.748Z] [1;32m   2403[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(filtered) [38;5;241m>[39m [38;5;241m1[39m:
[2024-03-07T16:33:08.748Z] [0;32m-> 2404[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(
[2024-03-07T16:33:08.748Z] [1;32m   2405[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mReceived multiple matches for [39m[38;5;132;01m{[39;00mkey[38;5;132;01m!r}[39;00m[38;5;124m that have a bounds attribute: [39m[38;5;132;01m{[39;00mfiltered[38;5;132;01m!r}[39;00m[38;5;124m [39m[38;5;124m"[39m
[2024-03-07T16:33:08.748Z] [1;32m   2406[0m     )
[2024-03-07T16:33:08.748Z] [1;32m   2408[0m (crd_name,) [38;5;241m=[39m filtered
[2024-03-07T16:33:08.748Z] [1;32m   2409[0m crd [38;5;241m=[39m variables[crd_name]
[2024-03-07T16:33:08.748Z] 
[2024-03-07T16:33:08.748Z] [0;31mKeyError[0m: "Received multiple matches for 'longitude' that have a bounds attribute: ['lon_bounds', 'lon'] "
[2024-03-07T16:33:08.748Z] 
[2024-03-07T16:33:08.748Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 12 _
[2024-03-07T16:33:08.748Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.748Z] [94mCell 12: Cell execution caused an exception
[2024-03-07T16:33:08.748Z] 
[2024-03-07T16:33:08.748Z] Input:
[2024-03-07T16:33:08.748Z] [0m# Here we need to make sure that our units are all in the correct format. You can play around with the tools we've seen thus far to explore the units
[2024-03-07T16:33:08.748Z] # and make sure everything is consistent.
[2024-03-07T16:33:08.748Z] 
[2024-03-07T16:33:08.748Z] # Let's start with precipitation:
[2024-03-07T16:33:08.749Z] # The CMIP data is a rate rather than an absolute value, so let's get the absolute values:
[2024-03-07T16:33:08.749Z] historical_pr = xclim.core.units.rate2amount(historical_pr)
[2024-03-07T16:33:08.749Z] future_pr = xclim.core.units.rate2amount(future_pr)
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Now we can actually convert units in absolute terms.
[2024-03-07T16:33:08.749Z] historical_pr = xclim.core.units.convert_units_to(historical_pr, "mm", context="hydro")
[2024-03-07T16:33:08.749Z] future_pr = xclim.core.units.convert_units_to(future_pr, "mm", context="hydro")
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Now let's do temperature:
[2024-03-07T16:33:08.749Z] historical_tasmin = xclim.core.units.convert_units_to(historical_tasmin, "degC")
[2024-03-07T16:33:08.749Z] historical_tasmax = xclim.core.units.convert_units_to(historical_tasmax, "degC")
[2024-03-07T16:33:08.749Z] future_tasmin = xclim.core.units.convert_units_to(future_tasmin, "degC")
[2024-03-07T16:33:08.749Z] future_tasmax = xclim.core.units.convert_units_to(future_tasmax, "degC")
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] [94mTraceback:[0m
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.749Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.749Z] Cell [0;32mIn[1], line 6[0m
[2024-03-07T16:33:08.749Z] [1;32m      1[0m [38;5;66;03m# Here we need to make sure that our units are all in the correct format. You can play around with the tools we've seen thus far to explore the units[39;00m
[2024-03-07T16:33:08.749Z] [1;32m      2[0m [38;5;66;03m# and make sure everything is consistent.[39;00m
[2024-03-07T16:33:08.749Z] [1;32m      3[0m 
[2024-03-07T16:33:08.749Z] [1;32m      4[0m [38;5;66;03m# Let's start with precipitation:[39;00m
[2024-03-07T16:33:08.749Z] [1;32m      5[0m [38;5;66;03m# The CMIP data is a rate rather than an absolute value, so let's get the absolute values:[39;00m
[2024-03-07T16:33:08.749Z] [0;32m----> 6[0m historical_pr [38;5;241m=[39m xclim[38;5;241m.[39mcore[38;5;241m.[39munits[38;5;241m.[39mrate2amount([43mhistorical_pr[49m)
[2024-03-07T16:33:08.749Z] [1;32m      7[0m future_pr [38;5;241m=[39m xclim[38;5;241m.[39mcore[38;5;241m.[39munits[38;5;241m.[39mrate2amount(future_pr)
[2024-03-07T16:33:08.749Z] [1;32m      9[0m [38;5;66;03m# Now we can actually convert units in absolute terms.[39;00m
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] [0;31mNameError[0m: name 'historical_pr' is not defined
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 13 _
[2024-03-07T16:33:08.749Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.749Z] [94mCell 13: Cell execution caused an exception
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] Input:
[2024-03-07T16:33:08.749Z] [0m# Use xclim utilities (sbda) to give information on the type of window used for the bias correction.
[2024-03-07T16:33:08.749Z] group_month_window = sdba.utils.Grouper("time.dayofyear", window=15)
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # This is an adjusting function. It builds the tool that will perform the corrections.
[2024-03-07T16:33:08.749Z] Adjustment = sdba.DetrendedQuantileMapping.train(
[2024-03-07T16:33:08.749Z]     ref=ERA5_weather.pr,
[2024-03-07T16:33:08.749Z]     hist=historical_pr,
[2024-03-07T16:33:08.749Z]     nquantiles=50,
[2024-03-07T16:33:08.749Z]     kind="+",
[2024-03-07T16:33:08.749Z]     group=group_month_window,
[2024-03-07T16:33:08.749Z] )
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Apply the correction factors on the reference period
[2024-03-07T16:33:08.749Z] corrected_ref_precip = Adjustment.adjust(historical_pr, interp="linear")
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Apply the correction factors on the future period
[2024-03-07T16:33:08.749Z] corrected_fut_precip = Adjustment.adjust(future_pr, interp="linear")
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Ensure that the precipitation is non-negative, which can happen with some climate models
[2024-03-07T16:33:08.749Z] corrected_ref_precip = corrected_ref_precip.where(corrected_ref_precip > 0, 0)
[2024-03-07T16:33:08.749Z] corrected_fut_precip = corrected_fut_precip.where(corrected_fut_precip > 0, 0)
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Train the model to find the correction factors for the maximum temperature (tasmax) data
[2024-03-07T16:33:08.749Z] Adjustment = sdba.DetrendedQuantileMapping.train(
[2024-03-07T16:33:08.749Z]     ref=ERA5_weather.tmax,
[2024-03-07T16:33:08.749Z]     hist=historical_tasmax,
[2024-03-07T16:33:08.749Z]     nquantiles=50,
[2024-03-07T16:33:08.749Z]     kind="+",
[2024-03-07T16:33:08.749Z]     group=group_month_window,
[2024-03-07T16:33:08.749Z] )
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Apply the correction factors on the reference period
[2024-03-07T16:33:08.749Z] corrected_ref_tasmax = Adjustment.adjust(historical_tasmax, interp="linear")
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Apply the correction factors on the future period
[2024-03-07T16:33:08.749Z] corrected_fut_tasmax = Adjustment.adjust(future_tasmax, interp="linear")
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Train the model to find the correction factors for the minimum temperature (tasmin) data
[2024-03-07T16:33:08.749Z] Adjustment = sdba.DetrendedQuantileMapping.train(
[2024-03-07T16:33:08.749Z]     ref=ERA5_weather.tmin,
[2024-03-07T16:33:08.749Z]     hist=historical_tasmin,
[2024-03-07T16:33:08.749Z]     nquantiles=50,
[2024-03-07T16:33:08.749Z]     kind="+",
[2024-03-07T16:33:08.749Z]     group=group_month_window,
[2024-03-07T16:33:08.749Z] )
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Apply the correction factors on the reference period
[2024-03-07T16:33:08.749Z] corrected_ref_tasmin = Adjustment.adjust(historical_tasmin, interp="linear")
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Apply the correction factors on the future period
[2024-03-07T16:33:08.749Z] corrected_fut_tasmin = Adjustment.adjust(future_tasmin, interp="linear")
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] [94mTraceback:[0m
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.749Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.749Z] Cell [0;32mIn[1], line 6[0m
[2024-03-07T16:33:08.749Z] [1;32m      2[0m group_month_window [38;5;241m=[39m sdba[38;5;241m.[39mutils[38;5;241m.[39mGrouper([38;5;124m"[39m[38;5;124mtime.dayofyear[39m[38;5;124m"[39m, window[38;5;241m=[39m[38;5;241m15[39m)
[2024-03-07T16:33:08.749Z] [1;32m      4[0m [38;5;66;03m# This is an adjusting function. It builds the tool that will perform the corrections.[39;00m
[2024-03-07T16:33:08.749Z] [1;32m      5[0m Adjustment [38;5;241m=[39m sdba[38;5;241m.[39mDetrendedQuantileMapping[38;5;241m.[39mtrain(
[2024-03-07T16:33:08.749Z] [0;32m----> 6[0m     ref[38;5;241m=[39m[43mERA5_weather[49m[38;5;241m.[39mpr,
[2024-03-07T16:33:08.749Z] [1;32m      7[0m     hist[38;5;241m=[39mhistorical_pr,
[2024-03-07T16:33:08.749Z] [1;32m      8[0m     nquantiles[38;5;241m=[39m[38;5;241m50[39m,
[2024-03-07T16:33:08.749Z] [1;32m      9[0m     kind[38;5;241m=[39m[38;5;124m"[39m[38;5;124m+[39m[38;5;124m"[39m,
[2024-03-07T16:33:08.749Z] [1;32m     10[0m     group[38;5;241m=[39mgroup_month_window,
[2024-03-07T16:33:08.749Z] [1;32m     11[0m )
[2024-03-07T16:33:08.749Z] [1;32m     13[0m [38;5;66;03m# Apply the correction factors on the reference period[39;00m
[2024-03-07T16:33:08.749Z] [1;32m     14[0m corrected_ref_precip [38;5;241m=[39m Adjustment[38;5;241m.[39madjust(historical_pr, interp[38;5;241m=[39m[38;5;124m"[39m[38;5;124mlinear[39m[38;5;124m"[39m)
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] [0;31mNameError[0m: name 'ERA5_weather' is not defined
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 14 _
[2024-03-07T16:33:08.749Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.749Z] [94mCell 14: Cell execution caused an exception
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] Input:
[2024-03-07T16:33:08.749Z] [0m# Convert the reference corrected data into netCDF file. We will then apply a special code to remove a dimension in the dataset to make it applicable to the RAVEN models.
[2024-03-07T16:33:08.749Z] ref_dataset = xr.merge(
[2024-03-07T16:33:08.749Z]     [
[2024-03-07T16:33:08.749Z]         corrected_ref_precip.to_dataset(name="pr"),
[2024-03-07T16:33:08.749Z]         corrected_ref_tasmax.to_dataset(name="tasmax"),
[2024-03-07T16:33:08.749Z]         corrected_ref_tasmin.to_dataset(name="tasmin"),
[2024-03-07T16:33:08.749Z]     ]
[2024-03-07T16:33:08.749Z] )
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Write to temporary folder
[2024-03-07T16:33:08.749Z] fn_tmp_ref = tmp / "reference_dataset_tmp.nc"
[2024-03-07T16:33:08.749Z] ref_dataset.to_netcdf(fn_tmp_ref)
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Convert the future corrected data into netCDF file
[2024-03-07T16:33:08.749Z] fut_dataset = xr.merge(
[2024-03-07T16:33:08.749Z]     [
[2024-03-07T16:33:08.749Z]         corrected_fut_precip.to_dataset(name="pr"),
[2024-03-07T16:33:08.749Z]         corrected_fut_tasmax.to_dataset(name="tasmax"),
[2024-03-07T16:33:08.749Z]         corrected_fut_tasmin.to_dataset(name="tasmin"),
[2024-03-07T16:33:08.749Z]     ]
[2024-03-07T16:33:08.749Z] )
[2024-03-07T16:33:08.749Z] # Write to temporary folder
[2024-03-07T16:33:08.749Z] fn_tmp_fut = tmp / "future_dataset_tmp.nc"
[2024-03-07T16:33:08.749Z] fut_dataset.to_netcdf(fn_tmp_fut)
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] # Write the data to disk to a temporary location for future use.
[2024-03-07T16:33:08.749Z] ref_dataset = xr.open_dataset(fn_tmp_ref)
[2024-03-07T16:33:08.749Z] ref_dataset.isel(geom=0).squeeze().to_netcdf(tmp / "reference_dataset.nc")
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] fut_dataset = xr.open_dataset(fn_tmp_fut)
[2024-03-07T16:33:08.749Z] fut_dataset.isel(geom=0).squeeze().to_netcdf(tmp / "future_dataset.nc")
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.749Z] [94mTraceback:[0m
[2024-03-07T16:33:08.749Z] 
[2024-03-07T16:33:08.750Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.750Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.750Z] Cell [0;32mIn[1], line 4[0m
[2024-03-07T16:33:08.750Z] [1;32m      1[0m [38;5;66;03m# Convert the reference corrected data into netCDF file. We will then apply a special code to remove a dimension in the dataset to make it applicable to the RAVEN models.[39;00m
[2024-03-07T16:33:08.750Z] [1;32m      2[0m ref_dataset [38;5;241m=[39m xr[38;5;241m.[39mmerge(
[2024-03-07T16:33:08.750Z] [1;32m      3[0m     [
[2024-03-07T16:33:08.750Z] [0;32m----> 4[0m         [43mcorrected_ref_precip[49m[38;5;241m.[39mto_dataset(name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mpr[39m[38;5;124m"[39m),
[2024-03-07T16:33:08.750Z] [1;32m      5[0m         corrected_ref_tasmax[38;5;241m.[39mto_dataset(name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtasmax[39m[38;5;124m"[39m),
[2024-03-07T16:33:08.750Z] [1;32m      6[0m         corrected_ref_tasmin[38;5;241m.[39mto_dataset(name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mtasmin[39m[38;5;124m"[39m),
[2024-03-07T16:33:08.750Z] [1;32m      7[0m     ]
[2024-03-07T16:33:08.750Z] [1;32m      8[0m )
[2024-03-07T16:33:08.750Z] [1;32m     10[0m [38;5;66;03m# Write to temporary folder[39;00m
[2024-03-07T16:33:08.750Z] [1;32m     11[0m fn_tmp_ref [38;5;241m=[39m tmp [38;5;241m/[39m [38;5;124m"[39m[38;5;124mreference_dataset_tmp.nc[39m[38;5;124m"[39m
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] [0;31mNameError[0m: name 'corrected_ref_precip' is not defined
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 15 _
[2024-03-07T16:33:08.750Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.750Z] [94mCell 15: Cell execution caused an exception
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] Input:
[2024-03-07T16:33:08.750Z] [0m# Define the hydrological response unit. We can use the geographic information we gathered previously to
[2024-03-07T16:33:08.750Z] # populate the fields for the HRU.
[2024-03-07T16:33:08.750Z] hru = {}
[2024-03-07T16:33:08.750Z] hru = dict(
[2024-03-07T16:33:08.750Z]     area=all_properties["area"],
[2024-03-07T16:33:08.750Z]     elevation=all_properties["elevation"],
[2024-03-07T16:33:08.750Z]     latitude=all_properties["latitude"],
[2024-03-07T16:33:08.750Z]     longitude=all_properties["longitude"],
[2024-03-07T16:33:08.750Z]     hru_type="land",
[2024-03-07T16:33:08.750Z] )
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # Establish the start date for the calibration. This is set in the model configuration, so the calibrator
[2024-03-07T16:33:08.750Z] # will simply execute the model which has been pre-configured to run on this period.
[2024-03-07T16:33:08.750Z] start_date = dt.datetime(1981, 1, 1)
[2024-03-07T16:33:08.750Z] end_date = dt.datetime(1985, 12, 31)
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # The data types available in the forcing netcdf file from ERA5, as per the tutorials.
[2024-03-07T16:33:08.750Z] data_type = ["TEMP_MAX", "TEMP_MIN", "PRECIP"]
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # Alternative variable names as described in the tutorial.
[2024-03-07T16:33:08.750Z] alt_names = {
[2024-03-07T16:33:08.750Z]     "TEMP_MIN": "tmin",
[2024-03-07T16:33:08.750Z]     "TEMP_MAX": "tmax",
[2024-03-07T16:33:08.750Z]     "PRECIP": "pr",
[2024-03-07T16:33:08.750Z] }
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # The data keywords necessary to indicate the elevation, latitude and longitude of the ERA5 forcing data. Here
[2024-03-07T16:33:08.750Z] # we use the information for the basin average as the ERA5 data is averaged on the watershed.
[2024-03-07T16:33:08.750Z] data_kwds = {
[2024-03-07T16:33:08.750Z]     "ALL": {
[2024-03-07T16:33:08.750Z]         "elevation": hru["elevation"],
[2024-03-07T16:33:08.750Z]         "latitude": hru["latitude"],
[2024-03-07T16:33:08.750Z]         "longitude": hru["longitude"],
[2024-03-07T16:33:08.750Z]     }
[2024-03-07T16:33:08.750Z] }
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # Give a name to the simulation
[2024-03-07T16:33:08.750Z] run_name = "Paper_example_simulation"
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # Setup the gauge object that includes meteorological data from ERA5
[2024-03-07T16:33:08.750Z] gauge = [
[2024-03-07T16:33:08.750Z]     rc.Gauge.from_nc(
[2024-03-07T16:33:08.750Z]         tmp
[2024-03-07T16:33:08.750Z]         / "ERA5_meteo_data.nc",  # Path to the ERA5 file containing all three meteorological variables
[2024-03-07T16:33:08.750Z]         data_type=data_type,  # Note that this is the list of all the variables
[2024-03-07T16:33:08.750Z]         alt_names=alt_names,  # Note that all variables here are mapped to their names in the netcdf file.
[2024-03-07T16:33:08.750Z]         data_kwds=data_kwds,
[2024-03-07T16:33:08.750Z]     )
[2024-03-07T16:33:08.750Z] ]
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # Read the streamflow from the HYSETS catchment data for this basin
[2024-03-07T16:33:08.750Z] discharge_data = [rc.ObservationData.from_nc(streamflow_file, alt_names="discharge")]
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # Which evaluation metric do we want to use for calibration. Raven will return this by default after each run,
[2024-03-07T16:33:08.750Z] # and the optimizer will read it directly to calibrate.
[2024-03-07T16:33:08.750Z] eval_metrics = ("NASH_SUTCLIFFE",)
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # Build the model configuration according to user preferences and inputs
[2024-03-07T16:33:08.750Z] model_config = GR4JCN(
[2024-03-07T16:33:08.750Z]     ObservationData=discharge_data,
[2024-03-07T16:33:08.750Z]     Gauge=gauge,
[2024-03-07T16:33:08.750Z]     HRUs=[hru],
[2024-03-07T16:33:08.750Z]     StartDate=start_date,
[2024-03-07T16:33:08.750Z]     EndDate=end_date,
[2024-03-07T16:33:08.750Z]     RunName=run_name,
[2024-03-07T16:33:08.750Z]     EvaluationMetrics=eval_metrics,  # We add this code to tell Raven which objective function we want to pass.
[2024-03-07T16:33:08.750Z]     SuppressOutput=True,  # This stops Raven from generating the output .nc files at each iteration.
[2024-03-07T16:33:08.750Z] )
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] [94mTraceback:[0m
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.750Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.750Z] Cell [0;32mIn[1], line 5[0m
[2024-03-07T16:33:08.750Z] [1;32m      1[0m [38;5;66;03m# Define the hydrological response unit. We can use the geographic information we gathered previously to[39;00m
[2024-03-07T16:33:08.750Z] [1;32m      2[0m [38;5;66;03m# populate the fields for the HRU.[39;00m
[2024-03-07T16:33:08.750Z] [1;32m      3[0m hru [38;5;241m=[39m {}
[2024-03-07T16:33:08.750Z] [1;32m      4[0m hru [38;5;241m=[39m [38;5;28mdict[39m(
[2024-03-07T16:33:08.750Z] [0;32m----> 5[0m     area[38;5;241m=[39m[43mall_properties[49m[[38;5;124m"[39m[38;5;124marea[39m[38;5;124m"[39m],
[2024-03-07T16:33:08.750Z] [1;32m      6[0m     elevation[38;5;241m=[39mall_properties[[38;5;124m"[39m[38;5;124melevation[39m[38;5;124m"[39m],
[2024-03-07T16:33:08.750Z] [1;32m      7[0m     latitude[38;5;241m=[39mall_properties[[38;5;124m"[39m[38;5;124mlatitude[39m[38;5;124m"[39m],
[2024-03-07T16:33:08.750Z] [1;32m      8[0m     longitude[38;5;241m=[39mall_properties[[38;5;124m"[39m[38;5;124mlongitude[39m[38;5;124m"[39m],
[2024-03-07T16:33:08.750Z] [1;32m      9[0m     hru_type[38;5;241m=[39m[38;5;124m"[39m[38;5;124mland[39m[38;5;124m"[39m,
[2024-03-07T16:33:08.750Z] [1;32m     10[0m )
[2024-03-07T16:33:08.750Z] [1;32m     12[0m [38;5;66;03m# Establish the start date for the calibration. This is set in the model configuration, so the calibrator[39;00m
[2024-03-07T16:33:08.750Z] [1;32m     13[0m [38;5;66;03m# will simply execute the model which has been pre-configured to run on this period.[39;00m
[2024-03-07T16:33:08.750Z] [1;32m     14[0m start_date [38;5;241m=[39m dt[38;5;241m.[39mdatetime([38;5;241m1981[39m, [38;5;241m1[39m, [38;5;241m1[39m)
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] [0;31mNameError[0m: name 'all_properties' is not defined
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 16 _
[2024-03-07T16:33:08.750Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.750Z] [94mCell 16: Cell execution caused an exception
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] Input:
[2024-03-07T16:33:08.750Z] [0m# In order to calibrate your model, you need to give the lower and higher bounds of the model. In this case,
[2024-03-07T16:33:08.750Z] # we are passing the boundaries for a GR4JCN, but it's important to change them, if you are using another model.
[2024-03-07T16:33:08.750Z] low = (0.01, -15.0, 10.0, 0.0, 1.0, 0.0)
[2024-03-07T16:33:08.750Z] high = (2.5, 10.0, 700.0, 7.0, 30.0, 1.0)
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # Random seed. We will provide one for consistency purposes, but operationnaly this should not be provided.
[2024-03-07T16:33:08.750Z] random_seed = 42
[2024-03-07T16:33:08.750Z] np.random.seed(random_seed)
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # Build the optimizer object
[2024-03-07T16:33:08.750Z] spot_setup = SpotSetup(
[2024-03-07T16:33:08.750Z]     config=model_config,
[2024-03-07T16:33:08.750Z]     low=low,
[2024-03-07T16:33:08.750Z]     high=high,
[2024-03-07T16:33:08.750Z] )
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # Maximum number of model evaluations. We only use 200 here to keep the computation time as low as possible,
[2024-03-07T16:33:08.750Z] # but you will want to increase this for operational use, perhaps to 2000-5000 depending on the model.
[2024-03-07T16:33:08.750Z] max_iterations = 200
[2024-03-07T16:33:08.750Z] 
[2024-03-07T16:33:08.750Z] # Setup the spotpy sampler with the method, the setup configuration, a run name and other options. Please refer
[2024-03-07T16:33:08.751Z] # to the spotpy documentation for more options. We recommend sticking to this format for efficiency of most
[2024-03-07T16:33:08.751Z] # applications. Here we use DDS as the optimization algorithm. More are available: see the Spotpy documentation
[2024-03-07T16:33:08.751Z] # for more information. Here, DDS is used as it is powerful and particularly useful for optimizations with small
[2024-03-07T16:33:08.751Z] # evaluation budgets. For more details on DDS, see:
[2024-03-07T16:33:08.751Z] #
[2024-03-07T16:33:08.751Z] # Tolson, B.A. and Shoemaker, C.A., 2007. Dynamically dimensioned search algorithm for computationally efficient watershed model calibration. Water
[2024-03-07T16:33:08.751Z] # Resources Research, 43(1)
[2024-03-07T16:33:08.751Z] sampler = spotpy.algorithms.dds(
[2024-03-07T16:33:08.751Z]     spot_setup, dbname="RAVEN_model_run", dbformat="ram", save_sim=False
[2024-03-07T16:33:08.751Z] )
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] # Launch the actual optimization. Multiple trials can be launched, where the entire process is repeated and
[2024-03-07T16:33:08.751Z] # the best overall value from all trials is returned.
[2024-03-07T16:33:08.751Z] sampler.sample(max_iterations, trials=1)
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] # Get the model diagnostics
[2024-03-07T16:33:08.751Z] diag = spot_setup.diagnostics
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] # Get all the values of each iteration
[2024-03-07T16:33:08.751Z] results = sampler.getdata()
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] # Get the raw resutlts directly in an array
[2024-03-07T16:33:08.751Z] bestindex, bestobjfun = spotpy.analyser.get_maxlikeindex(
[2024-03-07T16:33:08.751Z]     results
[2024-03-07T16:33:08.751Z] )  # Want to get the MAX NSE (change for min for RMSE)
[2024-03-07T16:33:08.751Z] best_model_run = list(
[2024-03-07T16:33:08.751Z]     results[bestindex][0]
[2024-03-07T16:33:08.751Z] )  # Get the parameter set returning the best NSE
[2024-03-07T16:33:08.751Z] optimized_parameters = best_model_run[
[2024-03-07T16:33:08.751Z]     1:-1
[2024-03-07T16:33:08.751Z] ]  # Remove the NSE value (position 0) and the ID at the last position to get the actual parameter set.
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] # Display the parameter set ready to use in a future run:
[2024-03-07T16:33:08.751Z] print(optimized_parameters)
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] [94mTraceback:[0m
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.751Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.751Z] Cell [0;32mIn[1], line 12[0m
[2024-03-07T16:33:08.751Z] [1;32m      8[0m np[38;5;241m.[39mrandom[38;5;241m.[39mseed(random_seed)
[2024-03-07T16:33:08.751Z] [1;32m     10[0m [38;5;66;03m# Build the optimizer object[39;00m
[2024-03-07T16:33:08.751Z] [1;32m     11[0m spot_setup [38;5;241m=[39m SpotSetup(
[2024-03-07T16:33:08.751Z] [0;32m---> 12[0m     config[38;5;241m=[39m[43mmodel_config[49m,
[2024-03-07T16:33:08.751Z] [1;32m     13[0m     low[38;5;241m=[39mlow,
[2024-03-07T16:33:08.751Z] [1;32m     14[0m     high[38;5;241m=[39mhigh,
[2024-03-07T16:33:08.751Z] [1;32m     15[0m )
[2024-03-07T16:33:08.751Z] [1;32m     17[0m [38;5;66;03m# Maximum number of model evaluations. We only use 200 here to keep the computation time as low as possible,[39;00m
[2024-03-07T16:33:08.751Z] [1;32m     18[0m [38;5;66;03m# but you will want to increase this for operational use, perhaps to 2000-5000 depending on the model.[39;00m
[2024-03-07T16:33:08.751Z] [1;32m     19[0m max_iterations [38;5;241m=[39m [38;5;241m200[39m
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] [0;31mNameError[0m: name 'model_config' is not defined
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 17 _
[2024-03-07T16:33:08.751Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.751Z] [94mCell 17: Cell execution caused an exception
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] Input:
[2024-03-07T16:33:08.751Z] [0m# Copy the configuration of the previous model that we will modify for our validation:
[2024-03-07T16:33:08.751Z] model_validation = model_config.duplicate(
[2024-03-07T16:33:08.751Z]     params=optimized_parameters,
[2024-03-07T16:33:08.751Z]     StartDate=dt.datetime(1986, 1, 1),
[2024-03-07T16:33:08.751Z]     EndDate=dt.datetime(1990, 12, 31),
[2024-03-07T16:33:08.751Z]     SuppressOutput=False,
[2024-03-07T16:33:08.751Z] )
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] sim_output = Emulator(config=model_validation).run()
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] # Get validation NSE (note we are counting the first year without warm-up)
[2024-03-07T16:33:08.751Z] NSE = sim_output.diagnostics["DIAG_NASH_SUTCLIFFE"]
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] # Plot the model output
[2024-03-07T16:33:08.751Z] sim_output.hydrograph.q_sim.plot(color="blue", label="Simulation")
[2024-03-07T16:33:08.751Z] sim_output.hydrograph.q_obs.plot(color="black", label="Observation")
[2024-03-07T16:33:08.751Z] plt.legend()
[2024-03-07T16:33:08.751Z] plt.title("Validation period - NSE=" + str(NSE[0]))
[2024-03-07T16:33:08.751Z] plt.ylabel("Streamflow (m��/s)")
[2024-03-07T16:33:08.751Z] plt.grid()
[2024-03-07T16:33:08.751Z] plt.show()
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] [94mTraceback:[0m
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.751Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.751Z] Cell [0;32mIn[1], line 2[0m
[2024-03-07T16:33:08.751Z] [1;32m      1[0m [38;5;66;03m# Copy the configuration of the previous model that we will modify for our validation:[39;00m
[2024-03-07T16:33:08.751Z] [0;32m----> 2[0m model_validation [38;5;241m=[39m [43mmodel_config[49m[38;5;241m.[39mduplicate(
[2024-03-07T16:33:08.751Z] [1;32m      3[0m     params[38;5;241m=[39moptimized_parameters,
[2024-03-07T16:33:08.751Z] [1;32m      4[0m     StartDate[38;5;241m=[39mdt[38;5;241m.[39mdatetime([38;5;241m1986[39m, [38;5;241m1[39m, [38;5;241m1[39m),
[2024-03-07T16:33:08.751Z] [1;32m      5[0m     EndDate[38;5;241m=[39mdt[38;5;241m.[39mdatetime([38;5;241m1990[39m, [38;5;241m12[39m, [38;5;241m31[39m),
[2024-03-07T16:33:08.751Z] [1;32m      6[0m     SuppressOutput[38;5;241m=[39m[38;5;28;01mFalse[39;00m,
[2024-03-07T16:33:08.751Z] [1;32m      7[0m )
[2024-03-07T16:33:08.751Z] [1;32m      9[0m sim_output [38;5;241m=[39m Emulator(config[38;5;241m=[39mmodel_validation)[38;5;241m.[39mrun()
[2024-03-07T16:33:08.751Z] [1;32m     11[0m [38;5;66;03m# Get validation NSE (note we are counting the first year without warm-up)[39;00m
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] [0;31mNameError[0m: name 'model_config' is not defined
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 18 _
[2024-03-07T16:33:08.751Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.751Z] [94mCell 18: Cell execution caused an exception
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] Input:
[2024-03-07T16:33:08.751Z] [0m# Setup a gauge for Raven to read-in the reference climate data, just like for ERA5
[2024-03-07T16:33:08.751Z] gauge_ref = [
[2024-03-07T16:33:08.751Z]     rc.Gauge.from_nc(
[2024-03-07T16:33:08.751Z]         tmp
[2024-03-07T16:33:08.751Z]         / "reference_dataset.nc",  # Path to the CMIP6 model reference data netcdf file
[2024-03-07T16:33:08.751Z]         data_type=data_type,
[2024-03-07T16:33:08.751Z]         alt_names=alt_names,
[2024-03-07T16:33:08.751Z]         data_kwds=data_kwds,
[2024-03-07T16:33:08.751Z]     )
[2024-03-07T16:33:08.751Z] ]
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] # Copy the configuration of the previous model that we will modify for our simulation on the reference period.
[2024-03-07T16:33:08.751Z] model_config_reference = model_validation.duplicate(
[2024-03-07T16:33:08.751Z]     Gauge=gauge_ref,
[2024-03-07T16:33:08.751Z]     StartDate=reference_start_day
[2024-03-07T16:33:08.751Z]     + dt.timedelta(days=1),  # Add a day here to account for the UTC lag in ERA5
[2024-03-07T16:33:08.751Z]     EndDate=reference_end_day,
[2024-03-07T16:33:08.751Z] )
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] # Run the model from the configuration and get the outputs.
[2024-03-07T16:33:08.751Z] ref_output = Emulator(config=model_config_reference).run()
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] # Plot the model output. Note that both simulations should have similar hydrological
[2024-03-07T16:33:08.751Z] # regime but day-to-day variability is not expected to match.
[2024-03-07T16:33:08.751Z] ref_output.hydrograph.q_sim.plot(color="blue", label="Reference period simulation")
[2024-03-07T16:33:08.751Z] ref_output.hydrograph.q_obs.plot(color="black", label="Observation")
[2024-03-07T16:33:08.751Z] plt.legend()
[2024-03-07T16:33:08.751Z] plt.title("Reference period")
[2024-03-07T16:33:08.751Z] plt.ylabel("Streamflow (m��/s)")
[2024-03-07T16:33:08.751Z] plt.grid()
[2024-03-07T16:33:08.751Z] plt.show()
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] [94mTraceback:[0m
[2024-03-07T16:33:08.751Z] 
[2024-03-07T16:33:08.751Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.751Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.751Z] Cell [0;32mIn[1], line 6[0m
[2024-03-07T16:33:08.751Z] [1;32m      1[0m [38;5;66;03m# Setup a gauge for Raven to read-in the reference climate data, just like for ERA5[39;00m
[2024-03-07T16:33:08.751Z] [1;32m      2[0m gauge_ref [38;5;241m=[39m [
[2024-03-07T16:33:08.751Z] [1;32m      3[0m     rc[38;5;241m.[39mGauge[38;5;241m.[39mfrom_nc(
[2024-03-07T16:33:08.751Z] [1;32m      4[0m         tmp
[2024-03-07T16:33:08.751Z] [1;32m      5[0m         [38;5;241m/[39m [38;5;124m"[39m[38;5;124mreference_dataset.nc[39m[38;5;124m"[39m,  [38;5;66;03m# Path to the CMIP6 model reference data netcdf file[39;00m
[2024-03-07T16:33:08.751Z] [0;32m----> 6[0m         data_type[38;5;241m=[39m[43mdata_type[49m,
[2024-03-07T16:33:08.751Z] [1;32m      7[0m         alt_names[38;5;241m=[39malt_names,
[2024-03-07T16:33:08.752Z] [1;32m      8[0m         data_kwds[38;5;241m=[39mdata_kwds,
[2024-03-07T16:33:08.752Z] [1;32m      9[0m     )
[2024-03-07T16:33:08.752Z] [1;32m     10[0m ]
[2024-03-07T16:33:08.752Z] [1;32m     12[0m [38;5;66;03m# Copy the configuration of the previous model that we will modify for our simulation on the reference period.[39;00m
[2024-03-07T16:33:08.752Z] [1;32m     13[0m model_config_reference [38;5;241m=[39m model_validation[38;5;241m.[39mduplicate(
[2024-03-07T16:33:08.752Z] [1;32m     14[0m     Gauge[38;5;241m=[39mgauge_ref,
[2024-03-07T16:33:08.752Z] [1;32m     15[0m     StartDate[38;5;241m=[39mreference_start_day
[2024-03-07T16:33:08.752Z] [1;32m     16[0m     [38;5;241m+[39m dt[38;5;241m.[39mtimedelta(days[38;5;241m=[39m[38;5;241m1[39m),  [38;5;66;03m# Add a day here to account for the UTC lag in ERA5[39;00m
[2024-03-07T16:33:08.752Z] [1;32m     17[0m     EndDate[38;5;241m=[39mreference_end_day,
[2024-03-07T16:33:08.752Z] [1;32m     18[0m )
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] [0;31mNameError[0m: name 'data_type' is not defined
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 19 _
[2024-03-07T16:33:08.752Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.752Z] [94mCell 19: Cell execution caused an exception
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] Input:
[2024-03-07T16:33:08.752Z] [0m# Setup a gauge for Raven to read-in the future climate data, just like for the reference data
[2024-03-07T16:33:08.752Z] gauge_fut = [
[2024-03-07T16:33:08.752Z]     rc.Gauge.from_nc(
[2024-03-07T16:33:08.752Z]         tmp / "future_dataset.nc",  # Path to the CMIP6 model reference data netcdf file
[2024-03-07T16:33:08.752Z]         data_type=data_type,
[2024-03-07T16:33:08.752Z]         alt_names=alt_names,
[2024-03-07T16:33:08.752Z]         data_kwds=data_kwds,
[2024-03-07T16:33:08.752Z]     )
[2024-03-07T16:33:08.752Z] ]
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] # Copy the configuration of the previous model that we will modify for our simulation on the reference period.
[2024-03-07T16:33:08.752Z] model_config_future = model_validation.duplicate(
[2024-03-07T16:33:08.752Z]     Gauge=gauge_fut,
[2024-03-07T16:33:08.752Z]     StartDate=future_start_day + dt.timedelta(days=1),
[2024-03-07T16:33:08.752Z]     EndDate=future_end_day,
[2024-03-07T16:33:08.752Z]     ObservationData=None,  # There are no observations for the future period.
[2024-03-07T16:33:08.752Z] )
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] # Run the model and get the outputs and hydrographs.
[2024-03-07T16:33:08.752Z] fut_output = Emulator(config=model_config_future).run()
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] # Plot the model output
[2024-03-07T16:33:08.752Z] fut_output.hydrograph.q_sim.plot(color="blue", label="Future simulation")
[2024-03-07T16:33:08.752Z] plt.legend()
[2024-03-07T16:33:08.752Z] plt.title("Future period")
[2024-03-07T16:33:08.752Z] plt.ylabel("Streamflow (m��/s)")
[2024-03-07T16:33:08.752Z] plt.grid()
[2024-03-07T16:33:08.752Z] plt.show()
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] [94mTraceback:[0m
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.752Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.752Z] Cell [0;32mIn[1], line 5[0m
[2024-03-07T16:33:08.752Z] [1;32m      1[0m [38;5;66;03m# Setup a gauge for Raven to read-in the future climate data, just like for the reference data[39;00m
[2024-03-07T16:33:08.752Z] [1;32m      2[0m gauge_fut [38;5;241m=[39m [
[2024-03-07T16:33:08.752Z] [1;32m      3[0m     rc[38;5;241m.[39mGauge[38;5;241m.[39mfrom_nc(
[2024-03-07T16:33:08.752Z] [1;32m      4[0m         tmp [38;5;241m/[39m [38;5;124m"[39m[38;5;124mfuture_dataset.nc[39m[38;5;124m"[39m,  [38;5;66;03m# Path to the CMIP6 model reference data netcdf file[39;00m
[2024-03-07T16:33:08.752Z] [0;32m----> 5[0m         data_type[38;5;241m=[39m[43mdata_type[49m,
[2024-03-07T16:33:08.752Z] [1;32m      6[0m         alt_names[38;5;241m=[39malt_names,
[2024-03-07T16:33:08.752Z] [1;32m      7[0m         data_kwds[38;5;241m=[39mdata_kwds,
[2024-03-07T16:33:08.752Z] [1;32m      8[0m     )
[2024-03-07T16:33:08.752Z] [1;32m      9[0m ]
[2024-03-07T16:33:08.752Z] [1;32m     11[0m [38;5;66;03m# Copy the configuration of the previous model that we will modify for our simulation on the reference period.[39;00m
[2024-03-07T16:33:08.752Z] [1;32m     12[0m model_config_future [38;5;241m=[39m model_validation[38;5;241m.[39mduplicate(
[2024-03-07T16:33:08.752Z] [1;32m     13[0m     Gauge[38;5;241m=[39mgauge_fut,
[2024-03-07T16:33:08.752Z] [1;32m     14[0m     StartDate[38;5;241m=[39mfuture_start_day [38;5;241m+[39m dt[38;5;241m.[39mtimedelta(days[38;5;241m=[39m[38;5;241m1[39m),
[2024-03-07T16:33:08.752Z] [1;32m     15[0m     EndDate[38;5;241m=[39mfuture_end_day,
[2024-03-07T16:33:08.752Z] [1;32m     16[0m     ObservationData[38;5;241m=[39m[38;5;28;01mNone[39;00m,  [38;5;66;03m# There are no observations for the future period.[39;00m
[2024-03-07T16:33:08.752Z] [1;32m     17[0m )
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] [0;31mNameError[0m: name 'data_type' is not defined
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] _ RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 20 _
[2024-03-07T16:33:08.752Z] [91mNotebook cell execution failed[0m
[2024-03-07T16:33:08.752Z] [94mCell 20: Cell execution caused an exception
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] Input:
[2024-03-07T16:33:08.752Z] [0m# Extract the mean annual hydrograph for each simulation.
[2024-03-07T16:33:08.752Z] observed_flows = ref_output.hydrograph.q_obs.groupby("time.dayofyear").mean()
[2024-03-07T16:33:08.752Z] simulated_flows = sim_output.hydrograph.q_obs.groupby("time.dayofyear").mean()
[2024-03-07T16:33:08.752Z] reference_flows = ref_output.hydrograph.q_sim.groupby("time.dayofyear").mean()
[2024-03-07T16:33:08.752Z] future_flows = fut_output.hydrograph.q_sim.groupby("time.dayofyear").mean()
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] # Plot the model output
[2024-03-07T16:33:08.752Z] observed_flows.plot(color="black", label="Observation", x="dayofyear")
[2024-03-07T16:33:08.752Z] simulated_flows.plot(color="green", label="Simulation", x="dayofyear")
[2024-03-07T16:33:08.752Z] reference_flows.plot(color="blue", label="Reference", x="dayofyear")
[2024-03-07T16:33:08.752Z] future_flows.plot(color="red", label="Future", x="dayofyear")
[2024-03-07T16:33:08.752Z] plt.legend()
[2024-03-07T16:33:08.752Z] plt.ylabel("Streamflow (m��/s)")
[2024-03-07T16:33:08.752Z] plt.xlabel("Day of year")
[2024-03-07T16:33:08.752Z] plt.xlim([0, 365])
[2024-03-07T16:33:08.752Z] plt.title("Comparison of mean annual hydrographs")
[2024-03-07T16:33:08.752Z] plt.grid()
[2024-03-07T16:33:08.752Z] plt.show()
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] [94mTraceback:[0m
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] [0;31m---------------------------------------------------------------------------[0m
[2024-03-07T16:33:08.752Z] [0;31mNameError[0m                                 Traceback (most recent call last)
[2024-03-07T16:33:08.752Z] Cell [0;32mIn[1], line 2[0m
[2024-03-07T16:33:08.752Z] [1;32m      1[0m [38;5;66;03m# Extract the mean annual hydrograph for each simulation.[39;00m
[2024-03-07T16:33:08.752Z] [0;32m----> 2[0m observed_flows [38;5;241m=[39m [43mref_output[49m[38;5;241m.[39mhydrograph[38;5;241m.[39mq_obs[38;5;241m.[39mgroupby([38;5;124m"[39m[38;5;124mtime.dayofyear[39m[38;5;124m"[39m)[38;5;241m.[39mmean()
[2024-03-07T16:33:08.752Z] [1;32m      3[0m simulated_flows [38;5;241m=[39m sim_output[38;5;241m.[39mhydrograph[38;5;241m.[39mq_obs[38;5;241m.[39mgroupby([38;5;124m"[39m[38;5;124mtime.dayofyear[39m[38;5;124m"[39m)[38;5;241m.[39mmean()
[2024-03-07T16:33:08.752Z] [1;32m      4[0m reference_flows [38;5;241m=[39m ref_output[38;5;241m.[39mhydrograph[38;5;241m.[39mq_sim[38;5;241m.[39mgroupby([38;5;124m"[39m[38;5;124mtime.dayofyear[39m[38;5;124m"[39m)[38;5;241m.[39mmean()
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] [0;31mNameError[0m: name 'ref_output' is not defined
[2024-03-07T16:33:08.752Z] 
[2024-03-07T16:33:08.752Z] =========================== short test summary info ============================
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 5
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 6
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 7
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 8
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 10
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 11
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb::Cell 13
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 7
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 8
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb::Cell 10
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 5
[2024-03-07T16:33:08.752Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 6
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 7
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 8
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 9
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 10
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 11
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb::Cell 12
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 0
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 1
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 2
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/HydroShare_integration.ipynb::Cell 3
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 7
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 8
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 9
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 10
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 11
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 12
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 13
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 14
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 15
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 16
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 17
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 18
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 19
[2024-03-07T16:33:08.753Z] FAILED RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb::Cell 20
[2024-03-07T16:33:08.753Z] ERROR RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 0 - RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.753Z] ERROR RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 1 - RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.753Z] ERROR RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 2 - RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.753Z] ERROR RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 3 - RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.753Z] ERROR RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 4 - RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.753Z] ERROR RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb::Cell 5 - RuntimeError: Kernel didn't respond in 60 seconds
[2024-03-07T16:33:08.753Z] ============ 36 failed, 218 passed, 6 errors in 1149.59s (0:19:09) =============
[2024-03-07T16:33:08.753Z] + EXIT_CODE=1
[2024-03-07T16:33:08.753Z] + echo true
[2024-03-07T16:33:08.753Z] + tr [:upper:] [:lower:]
[2024-03-07T16:33:08.753Z] + SAVE_RESULTING_NOTEBOOK=true
[2024-03-07T16:33:08.753Z] + [ xtrue = xtrue ]
[2024-03-07T16:33:08.753Z] + mkdir -p buildout
[2024-03-07T16:33:08.753Z] + basename raven-main/docs/source/notebooks/Region_selection.ipynb
[2024-03-07T16:33:08.753Z] + filename=Region_selection.ipynb
[2024-03-07T16:33:08.753Z] + + sed s/.ipynb$//
[2024-03-07T16:33:08.753Z] echo Region_selection.ipynb
[2024-03-07T16:33:08.753Z] + filename=Region_selection
[2024-03-07T16:33:08.753Z] + [ -e buildout/Region_selection.output.ipynb ]
[2024-03-07T16:33:08.753Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Region_selection.output.ipynb raven-main/docs/source/notebooks/Region_selection.ipynb
[2024-03-07T16:33:08.753Z] [NbConvertApp] Converting notebook raven-main/docs/source/notebooks/Region_selection.ipynb to notebook
[2024-03-07T16:33:18.733Z] [NbConvertApp] Writing 107224 bytes to buildout/Region_selection.output.ipynb
[2024-03-07T16:33:18.733Z] + basename raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb
[2024-03-07T16:33:18.733Z] + filename=Subset_climate_data_over_watershed.ipynb
[2024-03-07T16:33:18.733Z] + echo Subset_climate_data_over_watershed.ipynb
[2024-03-07T16:33:18.733Z] + sed s/.ipynb$//
[2024-03-07T16:33:18.733Z] + filename=Subset_climate_data_over_watershed
[2024-03-07T16:33:18.733Z] + [ -e buildout/Subset_climate_data_over_watershed.output.ipynb ]
[2024-03-07T16:33:18.733Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Subset_climate_data_over_watershed.output.ipynb raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb
[2024-03-07T16:33:19.304Z] [NbConvertApp] Converting notebook raven-main/docs/source/notebooks/Subset_climate_data_over_watershed.ipynb to notebook
[2024-03-07T16:33:37.463Z] [NbConvertApp] Writing 97070 bytes to buildout/Subset_climate_data_over_watershed.output.ipynb
[2024-03-07T16:33:37.463Z] + basename RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb
[2024-03-07T16:33:37.463Z] + filename=00_Introduction_to_JupyterLab.ipynb
[2024-03-07T16:33:37.463Z] + echo 00_Introduction_to_JupyterLab.ipynb
[2024-03-07T16:33:37.463Z] + sed s/.ipynb$//
[2024-03-07T16:33:37.463Z] + filename=00_Introduction_to_JupyterLab
[2024-03-07T16:33:37.463Z] + [ -e buildout/00_Introduction_to_JupyterLab.output.ipynb ]
[2024-03-07T16:33:37.463Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 00_Introduction_to_JupyterLab.output.ipynb RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb
[2024-03-07T16:33:37.463Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/00_Introduction_to_JupyterLab.ipynb to notebook
[2024-03-07T16:33:39.368Z] [NbConvertApp] Writing 13179 bytes to buildout/00_Introduction_to_JupyterLab.output.ipynb
[2024-03-07T16:33:39.368Z] + basename RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb
[2024-03-07T16:33:39.368Z] + filename=01_Getting_watershed_boundaries.ipynb
[2024-03-07T16:33:39.368Z] + + sed s/.ipynb$//
[2024-03-07T16:33:39.368Z] echo 01_Getting_watershed_boundaries.ipynb
[2024-03-07T16:33:39.368Z] + filename=01_Getting_watershed_boundaries
[2024-03-07T16:33:39.368Z] + [ -e buildout/01_Getting_watershed_boundaries.output.ipynb ]
[2024-03-07T16:33:39.368Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 01_Getting_watershed_boundaries.output.ipynb RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb
[2024-03-07T16:33:40.753Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/01_Getting_watershed_boundaries.ipynb to notebook
[2024-03-07T16:33:53.013Z] [NbConvertApp] Writing 109427 bytes to buildout/01_Getting_watershed_boundaries.output.ipynb
[2024-03-07T16:33:53.013Z] + basename RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb
[2024-03-07T16:33:53.013Z] + filename=02_Extract_geographical_watershed_properties.ipynb
[2024-03-07T16:33:53.013Z] + + echo 02_Extract_geographical_watershed_properties.ipynb
[2024-03-07T16:33:53.013Z] sed s/.ipynb$//
[2024-03-07T16:33:53.013Z] + filename=02_Extract_geographical_watershed_properties
[2024-03-07T16:33:53.013Z] + [ -e buildout/02_Extract_geographical_watershed_properties.output.ipynb ]
[2024-03-07T16:33:53.013Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 02_Extract_geographical_watershed_properties.output.ipynb RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb
[2024-03-07T16:33:53.584Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/02_Extract_geographical_watershed_properties.ipynb to notebook
[2024-03-07T16:34:08.474Z] [NbConvertApp] Writing 95487 bytes to buildout/02_Extract_geographical_watershed_properties.output.ipynb
[2024-03-07T16:34:08.474Z] + basename RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb
[2024-03-07T16:34:08.474Z] + filename=03_Extracting_forcing_data.ipynb
[2024-03-07T16:34:08.474Z] + echo 03_Extracting_forcing_data.ipynb
[2024-03-07T16:34:08.474Z] + sed s/.ipynb$//
[2024-03-07T16:34:08.474Z] + filename=03_Extracting_forcing_data
[2024-03-07T16:34:08.474Z] + [ -e buildout/03_Extracting_forcing_data.output.ipynb ]
[2024-03-07T16:34:08.474Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 03_Extracting_forcing_data.output.ipynb RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb
[2024-03-07T16:34:09.053Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/03_Extracting_forcing_data.ipynb to notebook
[2024-03-07T16:36:15.534Z] [NbConvertApp] Writing 65772 bytes to buildout/03_Extracting_forcing_data.output.ipynb
[2024-03-07T16:36:15.534Z] + basename RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb
[2024-03-07T16:36:15.534Z] + filename=04_Emulating_hydrological_models.ipynb
[2024-03-07T16:36:15.534Z] + + echosed 04_Emulating_hydrological_models.ipynb s/.ipynb$//
[2024-03-07T16:36:15.534Z] 
[2024-03-07T16:36:15.534Z] + filename=04_Emulating_hydrological_models
[2024-03-07T16:36:15.534Z] + [ -e buildout/04_Emulating_hydrological_models.output.ipynb ]
[2024-03-07T16:36:15.534Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 04_Emulating_hydrological_models.output.ipynb RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb
[2024-03-07T16:36:15.534Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/04_Emulating_hydrological_models.ipynb to notebook
[2024-03-07T16:36:20.802Z] [NbConvertApp] Writing 158077 bytes to buildout/04_Emulating_hydrological_models.output.ipynb
[2024-03-07T16:36:20.802Z] + basename RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb
[2024-03-07T16:36:20.802Z] + filename=05_Advanced_RavenPy_configuration.ipynb
[2024-03-07T16:36:20.802Z] + echo 05_Advanced_RavenPy_configuration.ipynb
[2024-03-07T16:36:20.802Z] + sed s/.ipynb$//
[2024-03-07T16:36:20.802Z] + filename=05_Advanced_RavenPy_configuration
[2024-03-07T16:36:20.802Z] + [ -e buildout/05_Advanced_RavenPy_configuration.output.ipynb ]
[2024-03-07T16:36:20.802Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 05_Advanced_RavenPy_configuration.output.ipynb RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb
[2024-03-07T16:36:22.174Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/05_Advanced_RavenPy_configuration.ipynb to notebook
[2024-03-07T16:36:44.224Z] [NbConvertApp] Writing 340428 bytes to buildout/05_Advanced_RavenPy_configuration.output.ipynb
[2024-03-07T16:36:44.224Z] + basename RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb
[2024-03-07T16:36:44.224Z] + filename=06_Raven_calibration.ipynb
[2024-03-07T16:36:44.224Z] + + sedecho s/.ipynb$// 06_Raven_calibration.ipynb
[2024-03-07T16:36:44.224Z] 
[2024-03-07T16:36:44.224Z] + filename=06_Raven_calibration
[2024-03-07T16:36:44.224Z] + [ -e buildout/06_Raven_calibration.output.ipynb ]
[2024-03-07T16:36:44.224Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 06_Raven_calibration.output.ipynb RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb
[2024-03-07T16:36:44.224Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/06_Raven_calibration.ipynb to notebook
[2024-03-07T16:36:54.213Z] [NbConvertApp] Writing 24098 bytes to buildout/06_Raven_calibration.output.ipynb
[2024-03-07T16:36:54.213Z] + basename RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb
[2024-03-07T16:36:54.213Z] + filename=07_Making_and_using_hotstart_files.ipynb
[2024-03-07T16:36:54.213Z] + echo 07_Making_and_using_hotstart_files.ipynb
[2024-03-07T16:36:54.213Z] + sed s/.ipynb$//
[2024-03-07T16:36:54.213Z] + filename=07_Making_and_using_hotstart_files
[2024-03-07T16:36:54.213Z] + [ -e buildout/07_Making_and_using_hotstart_files.output.ipynb ]
[2024-03-07T16:36:54.213Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 07_Making_and_using_hotstart_files.output.ipynb RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb
[2024-03-07T16:36:55.593Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/07_Making_and_using_hotstart_files.ipynb to notebook
[2024-03-07T16:37:07.851Z] [NbConvertApp] Writing 226139 bytes to buildout/07_Making_and_using_hotstart_files.output.ipynb
[2024-03-07T16:37:07.851Z] + basename RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb
[2024-03-07T16:37:07.851Z] + filename=08_Getting_and_bias_correcting_CMIP6_data.ipynb
[2024-03-07T16:37:07.851Z] + echo 08_Getting_and_bias_correcting_CMIP6_data.ipynb
[2024-03-07T16:37:07.851Z] + sed s/.ipynb$//
[2024-03-07T16:37:07.851Z] + filename=08_Getting_and_bias_correcting_CMIP6_data
[2024-03-07T16:37:07.851Z] + [ -e buildout/08_Getting_and_bias_correcting_CMIP6_data.output.ipynb ]
[2024-03-07T16:37:07.851Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 08_Getting_and_bias_correcting_CMIP6_data.output.ipynb RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb
[2024-03-07T16:37:09.237Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/08_Getting_and_bias_correcting_CMIP6_data.ipynb to notebook
[2024-03-07T16:41:00.773Z] [NbConvertApp] Writing 251789 bytes to buildout/08_Getting_and_bias_correcting_CMIP6_data.output.ipynb
[2024-03-07T16:41:00.773Z] + basename RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb
[2024-03-07T16:41:00.773Z] + filename=09_Hydrological_impacts_of_climate_change.ipynb
[2024-03-07T16:41:00.773Z] + echo 09_Hydrological_impacts_of_climate_change.ipynb
[2024-03-07T16:41:00.773Z] + sed s/.ipynb$//
[2024-03-07T16:41:00.773Z] + filename=09_Hydrological_impacts_of_climate_change
[2024-03-07T16:41:00.773Z] + [ -e buildout/09_Hydrological_impacts_of_climate_change.output.ipynb ]
[2024-03-07T16:41:00.773Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 09_Hydrological_impacts_of_climate_change.output.ipynb RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb
[2024-03-07T16:41:00.773Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/09_Hydrological_impacts_of_climate_change.ipynb to notebook
[2024-03-07T16:41:15.655Z] [NbConvertApp] Writing 128175 bytes to buildout/09_Hydrological_impacts_of_climate_change.output.ipynb
[2024-03-07T16:41:15.655Z] + basename RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb
[2024-03-07T16:41:15.655Z] + filename=10_Data_assimilation.ipynb
[2024-03-07T16:41:15.655Z] + echo 10_Data_assimilation.ipynb
[2024-03-07T16:41:15.656Z] + sed s/.ipynb$//
[2024-03-07T16:41:15.656Z] + filename=10_Data_assimilation
[2024-03-07T16:41:15.656Z] + [ -e buildout/10_Data_assimilation.output.ipynb ]
[2024-03-07T16:41:15.656Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 10_Data_assimilation.output.ipynb RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb
[2024-03-07T16:41:15.656Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/10_Data_assimilation.ipynb to notebook
[2024-03-07T16:42:37.107Z] [NbConvertApp] Writing 689843 bytes to buildout/10_Data_assimilation.output.ipynb
[2024-03-07T16:42:37.107Z] + basename RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb
[2024-03-07T16:42:37.107Z] + filename=11_Climatological_ESP_forecasting.ipynb
[2024-03-07T16:42:37.107Z] + echo 11_Climatological_ESP_forecasting.ipynb
[2024-03-07T16:42:37.107Z] + sed s/.ipynb$//
[2024-03-07T16:42:37.107Z] + filename=11_Climatological_ESP_forecasting
[2024-03-07T16:42:37.107Z] + [ -e buildout/11_Climatological_ESP_forecasting.output.ipynb ]
[2024-03-07T16:42:37.107Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 11_Climatological_ESP_forecasting.output.ipynb RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb
[2024-03-07T16:42:37.107Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/11_Climatological_ESP_forecasting.ipynb to notebook
[2024-03-07T16:43:15.814Z] [NbConvertApp] Writing 556956 bytes to buildout/11_Climatological_ESP_forecasting.output.ipynb
[2024-03-07T16:43:15.814Z] + basename RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb
[2024-03-07T16:43:15.814Z] + filename=12_Performing_hindcasting_experiments.ipynb
[2024-03-07T16:43:15.814Z] + echo 12_Performing_hindcasting_experiments.ipynb
[2024-03-07T16:43:15.814Z] + sed s/.ipynb$//
[2024-03-07T16:43:15.814Z] + filename=12_Performing_hindcasting_experiments
[2024-03-07T16:43:15.814Z] + [ -e buildout/12_Performing_hindcasting_experiments.output.ipynb ]
[2024-03-07T16:43:15.814Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output 12_Performing_hindcasting_experiments.output.ipynb RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb
[2024-03-07T16:43:15.814Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/12_Performing_hindcasting_experiments.ipynb to notebook
[2024-03-07T16:43:37.801Z] [NbConvertApp] Writing 298315 bytes to buildout/12_Performing_hindcasting_experiments.output.ipynb
[2024-03-07T16:43:37.801Z] + basename RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb
[2024-03-07T16:43:37.801Z] + filename=Assess_probabilistic_flood_risk.ipynb
[2024-03-07T16:43:37.801Z] + echo Assess_probabilistic_flood_risk.ipynb
[2024-03-07T16:43:37.801Z] + sed s/.ipynb$//
[2024-03-07T16:43:37.801Z] + filename=Assess_probabilistic_flood_risk
[2024-03-07T16:43:37.801Z] + [ -e buildout/Assess_probabilistic_flood_risk.output.ipynb ]
[2024-03-07T16:43:37.801Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Assess_probabilistic_flood_risk.output.ipynb RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb
[2024-03-07T16:43:38.062Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Assess_probabilistic_flood_risk.ipynb to notebook
[2024-03-07T16:44:10.107Z] [NbConvertApp] Writing 549686 bytes to buildout/Assess_probabilistic_flood_risk.output.ipynb
[2024-03-07T16:44:10.107Z] + basename RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb
[2024-03-07T16:44:10.107Z] + filename=Comparing_hindcasts_and_ESP_forecasts.ipynb
[2024-03-07T16:44:10.107Z] + echo Comparing_hindcasts_and_ESP_forecasts.ipynb
[2024-03-07T16:44:10.107Z] + sed s/.ipynb$//
[2024-03-07T16:44:10.107Z] + filename=Comparing_hindcasts_and_ESP_forecasts
[2024-03-07T16:44:10.107Z] + [ -e buildout/Comparing_hindcasts_and_ESP_forecasts.output.ipynb ]
[2024-03-07T16:44:10.107Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Comparing_hindcasts_and_ESP_forecasts.output.ipynb RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb
[2024-03-07T16:44:10.107Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Comparing_hindcasts_and_ESP_forecasts.ipynb to notebook
[2024-03-07T16:44:42.190Z] [NbConvertApp] Writing 748714 bytes to buildout/Comparing_hindcasts_and_ESP_forecasts.output.ipynb
[2024-03-07T16:44:42.190Z] + basename RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb
[2024-03-07T16:44:42.190Z] + filename=Distributed_hydrological_modelling.ipynb
[2024-03-07T16:44:42.190Z] + sed s/.ipynb$//
[2024-03-07T16:44:42.190Z] + echo Distributed_hydrological_modelling.ipynb
[2024-03-07T16:44:42.190Z] + filename=Distributed_hydrological_modelling
[2024-03-07T16:44:42.190Z] + [ -e buildout/Distributed_hydrological_modelling.output.ipynb ]
[2024-03-07T16:44:42.190Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Distributed_hydrological_modelling.output.ipynb RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb
[2024-03-07T16:44:42.455Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Distributed_hydrological_modelling.ipynb to notebook
[2024-03-07T16:45:14.554Z] [NbConvertApp] Writing 111408 bytes to buildout/Distributed_hydrological_modelling.output.ipynb
[2024-03-07T16:45:14.554Z] + basename RavenPy-master/docs/notebooks/HydroShare_integration.ipynb
[2024-03-07T16:45:14.554Z] + filename=HydroShare_integration.ipynb
[2024-03-07T16:45:14.554Z] + + echo HydroShare_integration.ipynb
[2024-03-07T16:45:14.554Z] sed s/.ipynb$//
[2024-03-07T16:45:14.554Z] + filename=HydroShare_integration
[2024-03-07T16:45:14.554Z] + [ -e buildout/HydroShare_integration.output.ipynb ]
[2024-03-07T16:45:14.554Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output HydroShare_integration.output.ipynb RavenPy-master/docs/notebooks/HydroShare_integration.ipynb
[2024-03-07T16:45:15.126Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/HydroShare_integration.ipynb to notebook
[2024-03-07T16:45:20.415Z] [NbConvertApp] Writing 11584 bytes to buildout/HydroShare_integration.output.ipynb
[2024-03-07T16:45:20.415Z] + basename RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb
[2024-03-07T16:45:20.415Z] + filename=Hydrological_realtime_forecasting.ipynb
[2024-03-07T16:45:20.415Z] + echo Hydrological_realtime_forecasting.ipynb
[2024-03-07T16:45:20.415Z] + sed s/.ipynb$//
[2024-03-07T16:45:20.415Z] + filename=Hydrological_realtime_forecasting
[2024-03-07T16:45:20.415Z] + [ -e buildout/Hydrological_realtime_forecasting.output.ipynb ]
[2024-03-07T16:45:20.415Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Hydrological_realtime_forecasting.output.ipynb RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb
[2024-03-07T16:45:21.357Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Hydrological_realtime_forecasting.ipynb to notebook
[2024-03-07T16:45:43.309Z] [NbConvertApp] Writing 312700 bytes to buildout/Hydrological_realtime_forecasting.output.ipynb
[2024-03-07T16:45:43.309Z] + basename RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb
[2024-03-07T16:45:43.309Z] + filename=Managing_Jupyter_Environments.ipynb
[2024-03-07T16:45:43.309Z] + echo Managing_Jupyter_Environments.ipynb
[2024-03-07T16:45:43.309Z] + sed s/.ipynb$//
[2024-03-07T16:45:43.309Z] + filename=Managing_Jupyter_Environments
[2024-03-07T16:45:43.309Z] + [ -e buildout/Managing_Jupyter_Environments.output.ipynb ]
[2024-03-07T16:45:43.309Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Managing_Jupyter_Environments.output.ipynb RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb
[2024-03-07T16:45:43.573Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Managing_Jupyter_Environments.ipynb to notebook
[2024-03-07T16:45:55.901Z] [NbConvertApp] Writing 8736 bytes to buildout/Managing_Jupyter_Environments.output.ipynb
[2024-03-07T16:45:55.901Z] + basename RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb
[2024-03-07T16:45:55.901Z] + filename=Perform_Regionalization.ipynb
[2024-03-07T16:45:55.901Z] + + sed s/.ipynb$//
[2024-03-07T16:45:55.901Z] echo Perform_Regionalization.ipynb
[2024-03-07T16:45:55.901Z] + filename=Perform_Regionalization
[2024-03-07T16:45:55.901Z] + [ -e buildout/Perform_Regionalization.output.ipynb ]
[2024-03-07T16:45:55.901Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Perform_Regionalization.output.ipynb RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb
[2024-03-07T16:45:55.901Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Perform_Regionalization.ipynb to notebook
[2024-03-07T16:46:27.985Z] [NbConvertApp] Writing 127609 bytes to buildout/Perform_Regionalization.output.ipynb
[2024-03-07T16:46:27.985Z] + basename RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb
[2024-03-07T16:46:27.985Z] + filename=Running_HMETS_with_CANOPEX_dataset.ipynb
[2024-03-07T16:46:27.985Z] + echo Running_HMETS_with_CANOPEX_dataset.ipynb
[2024-03-07T16:46:27.985Z] + sed s/.ipynb$//
[2024-03-07T16:46:27.985Z] + filename=Running_HMETS_with_CANOPEX_dataset
[2024-03-07T16:46:27.985Z] + [ -e buildout/Running_HMETS_with_CANOPEX_dataset.output.ipynb ]
[2024-03-07T16:46:27.985Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Running_HMETS_with_CANOPEX_dataset.output.ipynb RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb
[2024-03-07T16:46:27.985Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Running_HMETS_with_CANOPEX_dataset.ipynb to notebook
[2024-03-07T16:46:42.851Z] [NbConvertApp] Writing 109502 bytes to buildout/Running_HMETS_with_CANOPEX_dataset.output.ipynb
[2024-03-07T16:46:42.851Z] + basename RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb
[2024-03-07T16:46:42.851Z] + filename=Sensitivity_analysis.ipynb
[2024-03-07T16:46:42.851Z] + echo Sensitivity_analysis.ipynb
[2024-03-07T16:46:42.851Z] + sed s/.ipynb$//
[2024-03-07T16:46:42.851Z] + filename=Sensitivity_analysis
[2024-03-07T16:46:42.851Z] + [ -e buildout/Sensitivity_analysis.output.ipynb ]
[2024-03-07T16:46:42.851Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Sensitivity_analysis.output.ipynb RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb
[2024-03-07T16:46:42.851Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/Sensitivity_analysis.ipynb to notebook
[2024-03-07T16:47:00.948Z] [NbConvertApp] Writing 35261 bytes to buildout/Sensitivity_analysis.output.ipynb
[2024-03-07T16:47:00.949Z] + basename RavenPy-master/docs/notebooks/time_series_analysis.ipynb
[2024-03-07T16:47:00.949Z] + filename=time_series_analysis.ipynb
[2024-03-07T16:47:00.949Z] + echo time_series_analysis.ipynb
[2024-03-07T16:47:00.949Z] + sed s/.ipynb$//
[2024-03-07T16:47:00.949Z] + filename=time_series_analysis
[2024-03-07T16:47:00.949Z] + [ -e buildout/time_series_analysis.output.ipynb ]
[2024-03-07T16:47:00.949Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output time_series_analysis.output.ipynb RavenPy-master/docs/notebooks/time_series_analysis.ipynb
[2024-03-07T16:47:01.213Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/time_series_analysis.ipynb to notebook
[2024-03-07T16:47:13.420Z] [NbConvertApp] Writing 190847 bytes to buildout/time_series_analysis.output.ipynb
[2024-03-07T16:47:13.420Z] + basename RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb
[2024-03-07T16:47:13.420Z] + filename=Perform_a_climate_change_impact_study_on_a_watershed.ipynb
[2024-03-07T16:47:13.420Z] + sed s/.ipynb$//
[2024-03-07T16:47:13.420Z] + echo Perform_a_climate_change_impact_study_on_a_watershed.ipynb
[2024-03-07T16:47:13.421Z] + filename=Perform_a_climate_change_impact_study_on_a_watershed
[2024-03-07T16:47:13.421Z] + [ -e buildout/Perform_a_climate_change_impact_study_on_a_watershed.output.ipynb ]
[2024-03-07T16:47:13.421Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output Perform_a_climate_change_impact_study_on_a_watershed.output.ipynb RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb
[2024-03-07T16:47:14.795Z] [NbConvertApp] Converting notebook RavenPy-master/docs/notebooks/paper/Perform_a_climate_change_impact_study_on_a_watershed.ipynb to notebook
[2024-03-07T16:48:51.344Z] [NbConvertApp] Writing 131058 bytes to buildout/Perform_a_climate_change_impact_study_on_a_watershed.output.ipynb
[2024-03-07T16:48:51.344Z] + basename notebooks/hummingbird.ipynb
[2024-03-07T16:48:51.344Z] + filename=hummingbird.ipynb
[2024-03-07T16:48:51.344Z] + echo hummingbird.ipynb
[2024-03-07T16:48:51.344Z] + sed s/.ipynb$//
[2024-03-07T16:48:51.344Z] + filename=hummingbird
[2024-03-07T16:48:51.344Z] + [ -e buildout/hummingbird.output.ipynb ]
[2024-03-07T16:48:51.344Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output hummingbird.output.ipynb notebooks/hummingbird.ipynb
[2024-03-07T16:48:51.344Z] [NbConvertApp] Converting notebook notebooks/hummingbird.ipynb to notebook
[2024-03-07T16:48:54.632Z] [NbConvertApp] Writing 15951 bytes to buildout/hummingbird.output.ipynb
[2024-03-07T16:48:54.632Z] + basename notebooks/stress-tests.ipynb
[2024-03-07T16:48:54.632Z] + filename=stress-tests.ipynb
[2024-03-07T16:48:54.632Z] + echo stress-tests.ipynb
[2024-03-07T16:48:54.632Z] + sed s/.ipynb$//
[2024-03-07T16:48:54.633Z] + filename=stress-tests
[2024-03-07T16:48:54.633Z] + [ -e buildout/stress-tests.output.ipynb ]
[2024-03-07T16:48:54.633Z] + jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=240 --allow-errors --output-dir buildout --output stress-tests.output.ipynb notebooks/stress-tests.ipynb
[2024-03-07T16:48:56.542Z] [NbConvertApp] Converting notebook notebooks/stress-tests.ipynb to notebook
[2024-03-07T16:51:03.009Z] [NbConvertApp] Writing 428737 bytes to buildout/stress-tests.output.ipynb
[2024-03-07T16:51:03.009Z] + exit 1
[2024-03-07T16:51:03.009Z] + EXIT_CODE=1
[2024-03-07T16:51:03.009Z] + ENV_DUMP_DIR=buildout/env-dump
[2024-03-07T16:51:03.009Z] + mkdir -p buildout/env-dump
[2024-03-07T16:51:03.009Z] + ENV_EXPORT_FILE=buildout/env-dump/environment-export-birdy.yml
[2024-03-07T16:51:03.009Z] + rm -fv buildout/env-dump/environment-export-birdy.yml
[2024-03-07T16:51:03.009Z] + conda env export -n birdy
[2024-03-07T16:51:15.224Z] + LIST_EXPLICIT_FILE=buildout/env-dump/conda-list-explicit-birdy.txt
[2024-03-07T16:51:15.224Z] + rm -fv buildout/env-dump/conda-list-explicit-birdy.txt
[2024-03-07T16:51:15.224Z] + conda list -n birdy --explicit
[2024-03-07T16:51:25.207Z] + PIP_FREEZE_FILE=buildout/env-dump/pip-freeze-birdy-requirements.txt
[2024-03-07T16:51:25.207Z] + rm -fv buildout/env-dump/pip-freeze-birdy-requirements.txt
[2024-03-07T16:51:25.207Z] + pip freeze
[2024-03-07T16:51:25.207Z] + exit 1
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] archiveArtifacts
[2024-03-07T16:51:25.341Z] Archiving artifacts
[2024-03-07T16:51:25.367Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:51:25.395Z] Archiving artifacts
[2024-03-07T16:51:27.502Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:51:28.361Z] Archiving artifacts
[2024-03-07T16:51:28.679Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:51:29.190Z] Archiving artifacts
[2024-03-07T16:51:29.331Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:51:29.717Z] Archiving artifacts
[2024-03-07T16:51:29.744Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:51:30.138Z] Archiving artifacts
[2024-03-07T16:51:30.192Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:51:31.420Z] Archiving artifacts
[2024-03-07T16:51:31.432Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:51:31.719Z] Archiving artifacts
[2024-03-07T16:51:31.764Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:51:32.246Z] Archiving artifacts
[2024-03-07T16:51:32.629Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:51:32.884Z] Archiving artifacts
[2024-03-07T16:51:33.247Z] Recording fingerprints
[Pipeline] archiveArtifacts
[2024-03-07T16:51:36.794Z] Archiving artifacts
[2024-03-07T16:51:36.879Z] Recording fingerprints
[Pipeline] emailextrecipients
[Pipeline] step
[2024-03-07T16:51:37.578Z] Sending e-mails to: vu.long@ouranos.ca
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // timeout
[Pipeline] }
[Pipeline] // timestamps
[Pipeline] }
[Pipeline] // ansiColor
[Pipeline] }
$ docker stop --time=1 b411d488c542a4bdbdc744f27a68a543433da316133264e74a522e46b73d9a9b
$ docker rm -f b411d488c542a4bdbdc744f27a68a543433da316133264e74a522e46b73d9a9b
[Pipeline] // withDockerContainer
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
ERROR: script returned exit code 1
Finished: FAILURE
